=head1 NAME

qemu-qmp-ref - QEMU QMP Reference Manual

=head1 DESCRIPTION



=head2 Introduction


This document describes all commands currently supported by QMP.

Most of the time their usage is exactly the same as in the user Monitor, this
means that any other document which also describe commands (the manpage,
QEMU's manual, etc) can and should be consulted.

QMP has two types of commands: regular and query commands. Regular commands
usually change the Virtual Machine's state someway, while query commands just
return information. The sections below are divided accordingly.

It's important to observe that all communication examples are formatted in
a reader-friendly way, so that they're easier to understand. However, in real
protocol usage, they're emitted as a single line.

Also, the following notation is used to denote data flow:

Example:

	
	-> data issued by the Client


	
	<- Server data response



Please, refer to the QMP specification (docs/qmp-spec.txt) for
detailed information on the Server command and response formats.


=head2 Stability Considerations


The current QMP command set (described in this file) may be useful for a
number of use cases, however it's limited and several commands have bad
defined semantics, specially with regard to command completion.

These problems are going to be solved incrementally in the next QEMU releases
and we're going to establish a deprecation policy for badly defined commands.

If you're planning to adopt QMP, please observe the following:


=over 4


=item 1.

The deprecation policy will take effect and be documented soon, please
check the documentation of each used command as soon as a new release of
QEMU is available


=item 2.

DO NOT rely on anything which is not explicit documented


=item 3.

Errors, in special, are not documented. Applications should NOT check
for specific errors classes or data (it's strongly recommended to only
check for the "error" key)

=back




=head2 QAPI common definitions




B<QapiErrorClass> (Enum)


QEMU error classes

=over 4


=item C<'GenericError'>

this is used for errors that don't require a specific error
class. This should be the default case for most errors

=item C<'CommandNotFound'>

the requested command has not been found

=item C<'DeviceEncrypted'>

the requested operation can't be fulfilled because the
selected device is encrypted

=item C<'DeviceNotActive'>

a device has failed to be become active

=item C<'DeviceNotFound'>

the requested device has not been found

=item C<'KVMMissingCap'>

the requested operation can't be fulfilled because a
required KVM capability is missing

=back



B<Since:>
1.2






B<VersionTriple> (Struct)


A three-part version number.

=over 4


=item C<'major'>

The major version number.

=item C<'minor'>

The minor version number.

=item C<'micro'>

The micro version number.

=back



B<Since:>
2.4






B<VersionInfo> (Struct)


A description of QEMU's version.

=over 4


=item C<'qemu'>

The version of QEMU.  By current convention, a micro
version of 50 signifies a development branch.  A micro version
greater than or equal to 90 signifies a release candidate for
the next minor version.  A micro version of less than 50
signifies a stable release.

=item C<'package'>

QEMU will always set this field to an empty string.  Downstream
versions of QEMU should set this to a non-empty string.  The
exact format depends on the downstream however it highly
recommended that a unique name is used.

=back



B<Since:>
0.14.0






B<query-version>  (Command)
Returns the current version of QEMU.


B<Returns:>
A C<VersionInfo> object describing the current version of QEMU.

B<Since:>
0.14.0

B<Example:>
	
	-> { "execute": "query-version" }
	<- {
	      "return":{
	         "qemu":{
	            "major":0,
	            "minor":11,
	            "micro":5
	         },
	         "package":""
	      }
	   }








B<CommandInfo> (Struct)


Information about a QMP command

=over 4


=item C<'name'>

The command name

=back



B<Since:>
0.14.0






B<query-commands>  (Command)
Return a list of supported QMP commands by this server


B<Returns:>
A list of C<CommandInfo> for all supported commands

B<Since:>
0.14.0

B<Example:>
	
	-> { "execute": "query-commands" }
	<- {
	     "return":[
	        {
	           "name":"query-balloon"
	        },
	        {
	           "name":"system_powerdown"
	        }
	     ]
	   }



B<Note:>
This example has been shortened as the real response is too long.






B<OnOffAuto> (Enum)


An enumeration of three options: on, off, and auto

=over 4


=item C<'auto'>

QEMU selects the value between on and off

=item C<'on'>

Enabled

=item C<'off'>

Disabled

=back



B<Since:>
2.2






B<OnOffSplit> (Enum)


An enumeration of three values: on, off, and split

=over 4


=item C<'on'>

Enabled

=item C<'off'>

Disabled

=item C<'split'>

Mixed

=back



B<Since:>
2.6





=head2 QAPI crypto definitions




B<QCryptoTLSCredsEndpoint> (Enum)


The type of network endpoint that will be using the credentials.
Most types of credential require different setup / structures
depending on whether they will be used in a server versus a
client.

=over 4


=item C<'client'>

the network endpoint is acting as the client

=item C<'server'>

the network endpoint is acting as the server

=back



B<Since:>
2.5






B<QCryptoSecretFormat> (Enum)


The data format that the secret is provided in

=over 4


=item C<'raw'>

raw bytes. When encoded in JSON only valid UTF-8 sequences can be used

=item C<'base64'>

arbitrary base64 encoded binary data

=back



B<Since:>
2.6






B<QCryptoHashAlgorithm> (Enum)


The supported algorithms for computing content digests

=over 4


=item C<'md5'>

MD5. Should not be used in any new code, legacy compat only

=item C<'sha1'>

SHA-1. Should not be used in any new code, legacy compat only

=item C<'sha224'>

SHA-224. (since 2.7)

=item C<'sha256'>

SHA-256. Current recommended strong hash.

=item C<'sha384'>

SHA-384. (since 2.7)

=item C<'sha512'>

SHA-512. (since 2.7)

=item C<'ripemd160'>

RIPEMD-160. (since 2.7)

=back



B<Since:>
2.6






B<QCryptoCipherAlgorithm> (Enum)


The supported algorithms for content encryption ciphers

=over 4


=item C<'aes-128'>

AES with 128 bit / 16 byte keys

=item C<'aes-192'>

AES with 192 bit / 24 byte keys

=item C<'aes-256'>

AES with 256 bit / 32 byte keys

=item C<'des-rfb'>

RFB specific variant of single DES. Do not use except in VNC.

=item C<'3des'>

3DES(EDE) with 192 bit / 24 byte keys (since 2.9)

=item C<'cast5-128'>

Cast5 with 128 bit / 16 byte keys

=item C<'serpent-128'>

Serpent with 128 bit / 16 byte keys

=item C<'serpent-192'>

Serpent with 192 bit / 24 byte keys

=item C<'serpent-256'>

Serpent with 256 bit / 32 byte keys

=item C<'twofish-128'>

Twofish with 128 bit / 16 byte keys

=item C<'twofish-192'>

Twofish with 192 bit / 24 byte keys

=item C<'twofish-256'>

Twofish with 256 bit / 32 byte keys

=back



B<Since:>
2.6






B<QCryptoCipherMode> (Enum)


The supported modes for content encryption ciphers

=over 4


=item C<'ecb'>

Electronic Code Book

=item C<'cbc'>

Cipher Block Chaining

=item C<'xts'>

XEX with tweaked code book and ciphertext stealing

=item C<'ctr'>

Counter (Since 2.8)

=back



B<Since:>
2.6






B<QCryptoIVGenAlgorithm> (Enum)


The supported algorithms for generating initialization
vectors for full disk encryption. The 'plain' generator
should not be used for disks with sector numbers larger
than 2^32, except where compatibility with pre-existing
Linux dm-crypt volumes is required.

=over 4


=item C<'plain'>

64-bit sector number truncated to 32-bits

=item C<'plain64'>

64-bit sector number

=item C<'essiv'>

64-bit sector number encrypted with a hash of the encryption key

=back



B<Since:>
2.6






B<QCryptoBlockFormat> (Enum)


The supported full disk encryption formats

=over 4


=item C<'qcow'>

QCow/QCow2 built-in AES-CBC encryption. Use only
for liberating data from old images.

=item C<'luks'>

LUKS encryption format. Recommended for new images

=back



B<Since:>
2.6






B<QCryptoBlockOptionsBase> (Struct)


The common options that apply to all full disk
encryption formats

=over 4


=item C<'format'>

the encryption format

=back



B<Since:>
2.6






B<QCryptoBlockOptionsQCow> (Struct)


The options that apply to QCow/QCow2 AES-CBC encryption format

=over 4


=item C<'key-secret'> (optional)

 the ID of a QCryptoSecret object providing the
decryption key. Mandatory except when probing image for
metadata only.

=back



B<Since:>
2.6






B<QCryptoBlockOptionsLUKS> (Struct)


The options that apply to LUKS encryption format

=over 4


=item C<'key-secret'> (optional)

 the ID of a QCryptoSecret object providing the
decryption key. Mandatory except when probing image for
metadata only.

=back



B<Since:>
2.6






B<QCryptoBlockCreateOptionsLUKS> (Struct)


The options that apply to LUKS encryption format initialization

=over 4


=item C<'cipher-alg'> (optional)

 the cipher algorithm for data encryption
Currently defaults to 'aes'.

=item C<'cipher-mode'> (optional)

 the cipher mode for data encryption
Currently defaults to 'cbc'

=item C<'ivgen-alg'> (optional)

 the initialization vector generator
Currently defaults to 'essiv'

=item C<'ivgen-hash-alg'> (optional)

 the initialization vector generator hash
Currently defaults to 'sha256'

=item C<'hash-alg'> (optional)

 the master key hash algorithm
Currently defaults to 'sha256'

=item C<'iter-time'> (optional)

 number of milliseconds to spend in
PBKDF passphrase processing. Currently defaults
to 2000. (since 2.8)

=back



B<Since:>
2.6






B<Union> (Flat)


The options that are available for all encryption formats
when opening an existing volume


B<Since:>
2.6






B<Union> (Flat)


The options that are available for all encryption formats
when initializing a new volume


B<Since:>
2.6






B<QCryptoBlockInfoBase> (Struct)


The common information that applies to all full disk
encryption formats

=over 4


=item C<'format'>

the encryption format

=back



B<Since:>
2.7






B<QCryptoBlockInfoLUKSSlot> (Struct)


Information about the LUKS block encryption key
slot options

=over 4


=item C<'active'>

whether the key slot is currently in use

=item C<'key-offset'>

offset to the key material in bytes

=item C<'iters'> (optional)

 number of PBKDF2 iterations for key material

=item C<'stripes'> (optional)

 number of stripes for splitting key material

=back



B<Since:>
2.7






B<QCryptoBlockInfoLUKS> (Struct)


Information about the LUKS block encryption options

=over 4


=item C<'cipher-alg'>

the cipher algorithm for data encryption

=item C<'cipher-mode'>

the cipher mode for data encryption

=item C<'ivgen-alg'>

the initialization vector generator

=item C<'ivgen-hash-alg'> (optional)

 the initialization vector generator hash

=item C<'hash-alg'>

the master key hash algorithm

=item C<'payload-offset'>

offset to the payload data in bytes

=item C<'master-key-iters'>

number of PBKDF2 iterations for key material

=item C<'uuid'>

unique identifier for the volume

=item C<'slots'>

information about each key slot

=back



B<Since:>
2.7






B<QCryptoBlockInfoQCow> (Struct)


Information about the QCow block encryption options


B<Since:>
2.7






B<Union> (Flat)


Information about the block encryption options


B<Since:>
2.7





=head2 QAPI block definitions



=head3 QAPI block core definitions (vm unrelated)




B<SnapshotInfo> (Struct)




=over 4


=item C<'id'>

unique snapshot id

=item C<'name'>

user chosen name

=item C<'vm-state-size'>

size of the VM state

=item C<'date-sec'>

UTC date of the snapshot in seconds

=item C<'date-nsec'>

fractional part in nano seconds to be used with date-sec

=item C<'vm-clock-sec'>

VM clock relative to boot in seconds

=item C<'vm-clock-nsec'>

fractional part in nano seconds to be used with vm-clock-sec

=back



B<Since:>
1.3






B<ImageInfoSpecificQCow2> (Struct)




=over 4


=item C<'compat'>

compatibility level

=item C<'lazy-refcounts'> (optional)

 on or off; only valid for compat E<gt>= 1.1

=item C<'corrupt'> (optional)

 true if the image has been marked corrupt; only valid for
compat E<gt>= 1.1 (since 2.2)

=item C<'refcount-bits'>

width of a refcount entry in bits (since 2.3)

=back



B<Since:>
1.7






B<ImageInfoSpecificVmdk> (Struct)




=over 4


=item C<'create-type'>

The create type of VMDK image

=item C<'cid'>

Content id of image

=item C<'parent-cid'>

Parent VMDK image's cid

=item C<'extents'>

List of extent files

=back



B<Since:>
1.7






B<Union> (Simple)


A discriminated record of image format specific information structures.


B<Since:>
1.7






B<ImageInfo> (Struct)


Information about a QEMU image file

=over 4


=item C<'filename'>

name of the image file

=item C<'format'>

format of the image file

=item C<'virtual-size'>

maximum capacity in bytes of the image

=item C<'actual-size'> (optional)

 actual size on disk in bytes of the image

=item C<'dirty-flag'> (optional)

 true if image is not cleanly closed

=item C<'cluster-size'> (optional)

 size of a cluster in bytes

=item C<'encrypted'> (optional)

 true if the image is encrypted

=item C<'compressed'> (optional)

 true if the image is compressed (Since 1.7)

=item C<'backing-filename'> (optional)

 name of the backing file

=item C<'full-backing-filename'> (optional)

 full path of the backing file

=item C<'backing-filename-format'> (optional)

 the format of the backing file

=item C<'snapshots'> (optional)

 list of VM snapshots

=item C<'backing-image'> (optional)

 info of the backing image (since 1.6)

=item C<'format-specific'> (optional)

 structure supplying additional format-specific
information (since 1.7)

=back



B<Since:>
1.3






B<ImageCheck> (Struct)


Information about a QEMU image file check

=over 4


=item C<'filename'>

name of the image file checked

=item C<'format'>

format of the image file checked

=item C<'check-errors'>

number of unexpected errors occurred during check

=item C<'image-end-offset'> (optional)

 offset (in bytes) where the image ends, this
field is present if the driver for the image format
supports it

=item C<'corruptions'> (optional)

 number of corruptions found during the check if any

=item C<'leaks'> (optional)

 number of leaks found during the check if any

=item C<'corruptions-fixed'> (optional)

 number of corruptions fixed during the check
if any

=item C<'leaks-fixed'> (optional)

 number of leaks fixed during the check if any

=item C<'total-clusters'> (optional)

 total number of clusters, this field is present
if the driver for the image format supports it

=item C<'allocated-clusters'> (optional)

 total number of allocated clusters, this
field is present if the driver for the image format
supports it

=item C<'fragmented-clusters'> (optional)

 total number of fragmented clusters, this
field is present if the driver for the image format
supports it

=item C<'compressed-clusters'> (optional)

 total number of compressed clusters, this
field is present if the driver for the image format
supports it

=back



B<Since:>
1.4






B<MapEntry> (Struct)


Mapping information from a virtual block range to a host file range

=over 4


=item C<'start'>

the start byte of the mapped virtual range

=item C<'length'>

the number of bytes of the mapped virtual range

=item C<'data'>

whether the mapped range has data

=item C<'zero'>

whether the virtual blocks are zeroed

=item C<'depth'>

the depth of the mapping

=item C<'offset'> (optional)

 the offset in file that the virtual sectors are mapped to

=item C<'filename'> (optional)

 filename that is referred to by C<offset>

=back



B<Since:>
2.6






B<BlockdevCacheInfo> (Struct)


Cache mode information for a block device

=over 4


=item C<'writeback'>

true if writeback mode is enabled

=item C<'direct'>

true if the host page cache is bypassed (O_DIRECT)

=item C<'no-flush'>

true if flush requests are ignored for the device

=back



B<Since:>
2.3






B<BlockDeviceInfo> (Struct)


Information about the backing device for a block device.

=over 4


=item C<'file'>

the filename of the backing device

=item C<'node-name'> (optional)

 the name of the block driver node (Since 2.0)

=item C<'ro'>

true if the backing device was open read-only

=item C<'drv'>

the name of the block format used to open the backing device. As of
0.14.0 this can be: 'blkdebug', 'bochs', 'cloop', 'cow', 'dmg',
'file', 'file', 'ftp', 'ftps', 'host_cdrom', 'host_device',
'http', 'https', 'luks', 'nbd', 'parallels', 'qcow',
'qcow2', 'raw', 'vdi', 'vmdk', 'vpc', 'vvfat'
2.2: 'archipelago' added, 'cow' dropped
2.3: 'host_floppy' deprecated
2.5: 'host_floppy' dropped
2.6: 'luks' added
2.8: 'replication' added, 'tftp' dropped

=item C<'backing_file'> (optional)

 the name of the backing file (for copy-on-write)

=item C<'backing_file_depth'>

number of files in the backing file chain (since: 1.2)

=item C<'encrypted'>

true if the backing device is encrypted

=item C<'encryption_key_missing'>

true if the backing device is encrypted but an
valid encryption key is missing

=item C<'detect_zeroes'>

detect and optimize zero writes (Since 2.1)

=item C<'bps'>

total throughput limit in bytes per second is specified

=item C<'bps_rd'>

read throughput limit in bytes per second is specified

=item C<'bps_wr'>

write throughput limit in bytes per second is specified

=item C<'iops'>

total I/O operations per second is specified

=item C<'iops_rd'>

read I/O operations per second is specified

=item C<'iops_wr'>

write I/O operations per second is specified

=item C<'image'>

the info of image used (since: 1.6)

=item C<'bps_max'> (optional)

 total throughput limit during bursts,
in bytes (Since 1.7)

=item C<'bps_rd_max'> (optional)

 read throughput limit during bursts,
in bytes (Since 1.7)

=item C<'bps_wr_max'> (optional)

 write throughput limit during bursts,
in bytes (Since 1.7)

=item C<'iops_max'> (optional)

 total I/O operations per second during bursts,
in bytes (Since 1.7)

=item C<'iops_rd_max'> (optional)

 read I/O operations per second during bursts,
in bytes (Since 1.7)

=item C<'iops_wr_max'> (optional)

 write I/O operations per second during bursts,
in bytes (Since 1.7)

=item C<'bps_max_length'> (optional)

 maximum length of the C<bps_max> burst
period, in seconds. (Since 2.6)

=item C<'bps_rd_max_length'> (optional)

 maximum length of the C<bps_rd_max>
burst period, in seconds. (Since 2.6)

=item C<'bps_wr_max_length'> (optional)

 maximum length of the C<bps_wr_max>
burst period, in seconds. (Since 2.6)

=item C<'iops_max_length'> (optional)

 maximum length of the C<iops> burst
period, in seconds. (Since 2.6)

=item C<'iops_rd_max_length'> (optional)

 maximum length of the C<iops_rd_max>
burst period, in seconds. (Since 2.6)

=item C<'iops_wr_max_length'> (optional)

 maximum length of the C<iops_wr_max>
burst period, in seconds. (Since 2.6)

=item C<'iops_size'> (optional)

 an I/O size in bytes (Since 1.7)

=item C<'group'> (optional)

 throttle group name (Since 2.4)

=item C<'cache'>

the cache mode used for the block device (since: 2.3)

=item C<'write_threshold'>

configured write threshold for the device.
0 if disabled. (Since 2.3)

=back



B<Since:>
0.14.0






B<BlockDeviceIoStatus> (Enum)


An enumeration of block device I/O status.

=over 4


=item C<'ok'>

The last I/O operation has succeeded

=item C<'failed'>

The last I/O operation has failed

=item C<'nospace'>

The last I/O operation has failed due to a no-space condition

=back



B<Since:>
1.0






B<BlockDeviceMapEntry> (Struct)


Entry in the metadata map of the device (returned by "qemu-img map")

=over 4


=item C<'start'>

Offset in the image of the first byte described by this entry
(in bytes)

=item C<'length'>

Length of the range described by this entry (in bytes)

=item C<'depth'>

Number of layers (0 = top image, 1 = top image's backing file, etc.)
before reaching one for which the range is allocated.  The value is
in the range 0 to the depth of the image chain - 1.

=item C<'zero'>

the sectors in this range read as zeros

=item C<'data'>

reading the image will actually read data from a file (in particular,
if C<offset> is present this means that the sectors are not simply
preallocated, but contain actual data in raw format)

=item C<'offset'> (optional)

if present, the image file stores the data for this range in
raw format at the given offset.



=back



B<Since:>
1.7






B<DirtyBitmapStatus> (Enum)


An enumeration of possible states that a dirty bitmap can report to the user.

=over 4


=item C<'frozen'>

The bitmap is currently in-use by a backup operation or block job,
and is immutable.

=item C<'disabled'>

The bitmap is currently in-use by an internal operation and is
read-only. It can still be deleted.

=item C<'active'>

The bitmap is actively monitoring for new writes, and can be cleared,
deleted, or used for backup operations.

=back



B<Since:>
2.4






B<BlockDirtyInfo> (Struct)


Block dirty bitmap information.

=over 4


=item C<'name'> (optional)

 the name of the dirty bitmap (Since 2.4)

=item C<'count'>

number of dirty bytes according to the dirty bitmap

=item C<'granularity'>

granularity of the dirty bitmap in bytes (since 1.4)

=item C<'status'>

current status of the dirty bitmap (since 2.4)

=back



B<Since:>
1.3






B<BlockInfo> (Struct)


Block device information.  This structure describes a virtual device and
the backing device associated with it.

=over 4


=item C<'device'>

The device name associated with the virtual device.

=item C<'type'>

This field is returned only for compatibility reasons, it should
not be used (always returns 'unknown')

=item C<'removable'>

True if the device supports removable media.

=item C<'locked'>

True if the guest has locked this device from having its media
removed

=item C<'tray_open'> (optional)

 True if the device's tray is open
(only present if it has a tray)

=item C<'dirty-bitmaps'> (optional)

 dirty bitmaps information (only present if the
driver has one or more dirty bitmaps) (Since 2.0)

=item C<'io-status'> (optional)

 C<BlockDeviceIoStatus>. Only present if the device
supports it and the VM is configured to stop on errors
(supported device models: virtio-blk, ide, scsi-disk)

=item C<'inserted'> (optional)

 C<BlockDeviceInfo> describing the device if media is
present

=back



B<Since:>
0.14.0






B<query-block>  (Command)
Get a list of BlockInfo for all virtual block devices.


B<Returns:>
a list of C<BlockInfo> describing each virtual block device

B<Since:>
0.14.0

B<Example:>
	
	-> { "execute": "query-block" }
	<- {
	      "return":[
	         {
	            "io-status": "ok",
	            "device":"ide0-hd0",
	            "locked":false,
	            "removable":false,
	            "inserted":{
	               "ro":false,
	               "drv":"qcow2",
	               "encrypted":false,
	               "file":"disks/test.qcow2",
	               "backing_file_depth":1,
	               "bps":1000000,
	               "bps_rd":0,
	               "bps_wr":0,
	               "iops":1000000,
	               "iops_rd":0,
	               "iops_wr":0,
	               "bps_max": 8000000,
	               "bps_rd_max": 0,
	               "bps_wr_max": 0,
	               "iops_max": 0,
	               "iops_rd_max": 0,
	               "iops_wr_max": 0,
	               "iops_size": 0,
	               "detect_zeroes": "on",
	               "write_threshold": 0,
	               "image":{
	                  "filename":"disks/test.qcow2",
	                  "format":"qcow2",
	                  "virtual-size":2048000,
	                  "backing_file":"base.qcow2",
	                  "full-backing-filename":"disks/base.qcow2",
	                  "backing-filename-format":"qcow2",
	                  "snapshots":[
	                     {
	                        "id": "1",
	                        "name": "snapshot1",
	                        "vm-state-size": 0,
	                        "date-sec": 10000200,
	                        "date-nsec": 12,
	                        "vm-clock-sec": 206,
	                        "vm-clock-nsec": 30
	                     }
	                  ],
	                  "backing-image":{
	                      "filename":"disks/base.qcow2",
	                      "format":"qcow2",
	                      "virtual-size":2048000
	                  }
	               }
	            },
	            "type":"unknown"
	         },
	         {
	            "io-status": "ok",
	            "device":"ide1-cd0",
	            "locked":false,
	            "removable":true,
	            "type":"unknown"
	         },
	         {
	            "device":"floppy0",
	            "locked":false,
	            "removable":true,
	            "type":"unknown"
	         },
	         {
	            "device":"sd0",
	            "locked":false,
	            "removable":true,
	            "type":"unknown"
	         }
	      ]
	   }








B<BlockDeviceTimedStats> (Struct)


Statistics of a block device during a given interval of time.

=over 4


=item C<'interval_length'>

Interval used for calculating the statistics,
in seconds.

=item C<'min_rd_latency_ns'>

Minimum latency of read operations in the
defined interval, in nanoseconds.

=item C<'min_wr_latency_ns'>

Minimum latency of write operations in the
defined interval, in nanoseconds.

=item C<'min_flush_latency_ns'>

Minimum latency of flush operations in the
defined interval, in nanoseconds.

=item C<'max_rd_latency_ns'>

Maximum latency of read operations in the
defined interval, in nanoseconds.

=item C<'max_wr_latency_ns'>

Maximum latency of write operations in the
defined interval, in nanoseconds.

=item C<'max_flush_latency_ns'>

Maximum latency of flush operations in the
defined interval, in nanoseconds.

=item C<'avg_rd_latency_ns'>

Average latency of read operations in the
defined interval, in nanoseconds.

=item C<'avg_wr_latency_ns'>

Average latency of write operations in the
defined interval, in nanoseconds.

=item C<'avg_flush_latency_ns'>

Average latency of flush operations in the
defined interval, in nanoseconds.

=item C<'avg_rd_queue_depth'>

Average number of pending read operations
in the defined interval.

=item C<'avg_wr_queue_depth'>

Average number of pending write operations
in the defined interval.

=back



B<Since:>
2.5






B<BlockDeviceStats> (Struct)


Statistics of a virtual block device or a block backing device.

=over 4


=item C<'rd_bytes'>

The number of bytes read by the device.

=item C<'wr_bytes'>

The number of bytes written by the device.

=item C<'rd_operations'>

The number of read operations performed by the device.

=item C<'wr_operations'>

The number of write operations performed by the device.

=item C<'flush_operations'>

The number of cache flush operations performed by the
device (since 0.15.0)

=item C<'flush_total_time_ns'>

Total time spend on cache flushes in nano-seconds
(since 0.15.0).

=item C<'wr_total_time_ns'>

Total time spend on writes in nano-seconds (since 0.15.0).

=item C<'rd_total_time_ns'>

Total_time_spend on reads in nano-seconds (since 0.15.0).

=item C<'wr_highest_offset'>

The offset after the greatest byte written to the
device.  The intended use of this information is for
growable sparse files (like qcow2) that are used on top
of a physical device.

=item C<'rd_merged'>

Number of read requests that have been merged into another
request (Since 2.3).

=item C<'wr_merged'>

Number of write requests that have been merged into another
request (Since 2.3).

=item C<'idle_time_ns'> (optional)

 Time since the last I/O operation, in
nanoseconds. If the field is absent it means that
there haven't been any operations yet (Since 2.5).

=item C<'failed_rd_operations'>

The number of failed read operations
performed by the device (Since 2.5)

=item C<'failed_wr_operations'>

The number of failed write operations
performed by the device (Since 2.5)

=item C<'failed_flush_operations'>

The number of failed flush operations
performed by the device (Since 2.5)

=item C<'invalid_rd_operations'>

The number of invalid read operations
performed by the device (Since 2.5)

=item C<'invalid_wr_operations'>

The number of invalid write operations
performed by the device (Since 2.5)

=item C<'invalid_flush_operations'>

The number of invalid flush operations
performed by the device (Since 2.5)

=item C<'account_invalid'>

Whether invalid operations are included in the
last access statistics (Since 2.5)

=item C<'account_failed'>

Whether failed operations are included in the
latency and last access statistics (Since 2.5)

=item C<'timed_stats'>

Statistics specific to the set of previously defined
intervals of time (Since 2.5)

=back



B<Since:>
0.14.0






B<BlockStats> (Struct)


Statistics of a virtual block device or a block backing device.

=over 4


=item C<'device'> (optional)

 If the stats are for a virtual block device, the name
corresponding to the virtual block device.

=item C<'node-name'> (optional)

 The node name of the device. (Since 2.3)

=item C<'stats'>

A C<BlockDeviceStats> for the device.

=item C<'parent'> (optional)

 This describes the file block device if it has one.
Contains recursively the statistics of the underlying
protocol (e.g. the host file for a qcow2 image). If there is
no underlying protocol, this field is omitted

=item C<'backing'> (optional)

 This describes the backing block device if it has one.
(Since 2.0)

=back



B<Since:>
0.14.0






B<query-blockstats>  (Command)
Query the C<BlockStats> for all virtual block devices.

=over 4


=item C<'query-nodes'> (optional)

 If true, the command will query all the block nodes
that have a node name, in a list which will include "parent"
information, but not "backing".
If false or omitted, the behavior is as before - query all the
device backends, recursively including their "parent" and
"backing". (Since 2.3)

=back



B<Returns:>
A list of C<BlockStats> for each virtual block devices.

B<Since:>
0.14.0

B<Example:>
	
	-> { "execute": "query-blockstats" }
	<- {
	      "return":[
	         {
	            "device":"ide0-hd0",
	            "parent":{
	               "stats":{
	                  "wr_highest_offset":3686448128,
	                  "wr_bytes":9786368,
	                  "wr_operations":751,
	                  "rd_bytes":122567168,
	                  "rd_operations":36772
	                  "wr_total_times_ns":313253456
	                  "rd_total_times_ns":3465673657
	                  "flush_total_times_ns":49653
	                  "flush_operations":61,
	                  "rd_merged":0,
	                  "wr_merged":0,
	                  "idle_time_ns":2953431879,
	                  "account_invalid":true,
	                  "account_failed":false
	               }
	            },
	            "stats":{
	               "wr_highest_offset":2821110784,
	               "wr_bytes":9786368,
	               "wr_operations":692,
	               "rd_bytes":122739200,
	               "rd_operations":36604
	               "flush_operations":51,
	               "wr_total_times_ns":313253456
	               "rd_total_times_ns":3465673657
	               "flush_total_times_ns":49653,
	               "rd_merged":0,
	               "wr_merged":0,
	               "idle_time_ns":2953431879,
	               "account_invalid":true,
	               "account_failed":false
	            }
	         },
	         {
	            "device":"ide1-cd0",
	            "stats":{
	               "wr_highest_offset":0,
	               "wr_bytes":0,
	               "wr_operations":0,
	               "rd_bytes":0,
	               "rd_operations":0
	               "flush_operations":0,
	               "wr_total_times_ns":0
	               "rd_total_times_ns":0
	               "flush_total_times_ns":0,
	               "rd_merged":0,
	               "wr_merged":0,
	               "account_invalid":false,
	               "account_failed":false
	            }
	         },
	         {
	            "device":"floppy0",
	            "stats":{
	               "wr_highest_offset":0,
	               "wr_bytes":0,
	               "wr_operations":0,
	               "rd_bytes":0,
	               "rd_operations":0
	               "flush_operations":0,
	               "wr_total_times_ns":0
	               "rd_total_times_ns":0
	               "flush_total_times_ns":0,
	               "rd_merged":0,
	               "wr_merged":0,
	               "account_invalid":false,
	               "account_failed":false
	            }
	         },
	         {
	            "device":"sd0",
	            "stats":{
	               "wr_highest_offset":0,
	               "wr_bytes":0,
	               "wr_operations":0,
	               "rd_bytes":0,
	               "rd_operations":0
	               "flush_operations":0,
	               "wr_total_times_ns":0
	               "rd_total_times_ns":0
	               "flush_total_times_ns":0,
	               "rd_merged":0,
	               "wr_merged":0,
	               "account_invalid":false,
	               "account_failed":false
	            }
	         }
	      ]
	   }








B<BlockdevOnError> (Enum)


An enumeration of possible behaviors for errors on I/O operations.
The exact meaning depends on whether the I/O was initiated by a guest
or by a block job

=over 4


=item C<'report'>

for guest operations, report the error to the guest;
for jobs, cancel the job

=item C<'ignore'>

ignore the error, only report a QMP event (BLOCK_IO_ERROR
or BLOCK_JOB_ERROR)

=item C<'enospc'>

same as C<stop> on ENOSPC, same as C<report> otherwise.

=item C<'stop'>

for guest operations, stop the virtual machine;
for jobs, pause the job

=item C<'auto'>

inherit the error handling policy of the backend (since: 2.7)

=back



B<Since:>
1.3






B<MirrorSyncMode> (Enum)


An enumeration of possible behaviors for the initial synchronization
phase of storage mirroring.

=over 4


=item C<'top'>

copies data in the topmost image to the destination

=item C<'full'>

copies data from all images to the destination

=item C<'none'>

only copy data written from now on

=item C<'incremental'>

only copy data described by the dirty bitmap. Since: 2.4

=back



B<Since:>
1.3






B<BlockJobType> (Enum)


Type of a block job.

=over 4


=item C<'commit'>

block commit job type, see "block-commit"

=item C<'stream'>

block stream job type, see "block-stream"

=item C<'mirror'>

drive mirror job type, see "drive-mirror"

=item C<'backup'>

drive backup job type, see "drive-backup"

=back



B<Since:>
1.7






B<BlockJobInfo> (Struct)


Information about a long-running block device operation.

=over 4


=item C<'type'>

the job type ('stream' for image streaming)

=item C<'device'>

The job identifier. Originally the device name but other
values are allowed since QEMU 2.7

=item C<'len'>

the maximum progress value

=item C<'busy'>

false if the job is known to be in a quiescent state, with
no pending I/O.  Since 1.3.

=item C<'paused'>

whether the job is paused or, if C<busy> is true, will
pause itself as soon as possible.  Since 1.3.

=item C<'offset'>

the current progress value

=item C<'speed'>

the rate limit, bytes per second

=item C<'io-status'>

the status of the job (since 1.3)

=item C<'ready'>

true if the job may be completed (since 2.2)

=back



B<Since:>
1.1






B<query-block-jobs>  (Command)
Return information about long-running block device operations.


B<Returns:>
a list of C<BlockJobInfo> for each active block job

B<Since:>
1.1






B<block_passwd>  (Command)
This command sets the password of a block device that has not been open
with a password and requires one.

The two cases where this can happen are a block device is created through
QEMU's initial command line or a block device is changed through the legacy
C<change> interface.

In the event that the block device is created through the initial command
line, the VM will start in the stopped state regardless of whether '-S' is
used.  The intention is for a management tool to query the block devices to
determine which ones are encrypted, set the passwords with this command, and
then start the guest with the C<cont> command.

Either C<device> or C<node-name> must be set but not both.

=over 4


=item C<'device'> (optional)

 the name of the block backend device to set the password on

=item C<'node-name'> (optional)

 graph node name to set the password on (Since 2.0)

=item C<'password'>

the password to use for the device

=back



B<Returns:>
nothing on success
If C<device> is not a valid block device, DeviceNotFound
If C<device> is not encrypted, DeviceNotEncrypted

B<Notes:>
Not all block formats support encryption and some that do are not
able to validate that a password is correct.  Disk corruption may
occur if an invalid password is specified.

B<Since:>
0.14.0

B<Example:>
	
	-> { "execute": "block_passwd", "arguments": { "device": "ide0-hd0",
	                                               "password": "12345" } }
	<- { "return": {} }








B<block_resize>  (Command)
Resize a block image while a guest is running.

Either C<device> or C<node-name> must be set but not both.

=over 4


=item C<'device'> (optional)

 the name of the device to get the image resized

=item C<'node-name'> (optional)

 graph node name to get the image resized (Since 2.0)

=item C<'size'>

new image size in bytes

=back



B<Returns:>
nothing on success
If C<device> is not a valid block device, DeviceNotFound

B<Since:>
0.14.0

B<Example:>
	
	-> { "execute": "block_resize",
	     "arguments": { "device": "scratch", "size": 1073741824 } }
	<- { "return": {} }








B<NewImageMode> (Enum)


An enumeration that tells QEMU how to set the backing file path in
a new image file.

=over 4


=item C<'existing'>

QEMU should look for an existing image file.

=item C<'absolute-paths'>

QEMU should create a new image with absolute paths
for the backing file. If there is no backing file available, the new
image will not be backed either.

=back



B<Since:>
1.1






B<BlockdevSnapshotSync> (Struct)


Either C<device> or C<node-name> must be set but not both.

=over 4


=item C<'device'> (optional)

 the name of the device to generate the snapshot from.

=item C<'node-name'> (optional)

 graph node name to generate the snapshot from (Since 2.0)

=item C<'snapshot-file'>

the target of the new image. If the file exists, or
if it is a device, the snapshot will be created in the existing
file/device. Otherwise, a new file will be created.

=item C<'snapshot-node-name'> (optional)

 the graph node name of the new image (Since 2.0)

=item C<'format'> (optional)

 the format of the snapshot image, default is 'qcow2'.

=item C<'mode'> (optional)

 whether and how QEMU should create a new image, default is
'absolute-paths'.

=back








B<BlockdevSnapshot> (Struct)




=over 4


=item C<'node'>

device or node name that will have a snapshot created.

=item C<'overlay'>

reference to the existing block device that will become
the overlay of C<node>, as part of creating the snapshot.
It must not have a current backing file (this can be
achieved by passing "backing": "" to blockdev-add).

=back



B<Since:>
2.5






B<DriveBackup> (Struct)




=over 4


=item C<'job-id'> (optional)

 identifier for the newly-created block job. If
omitted, the device name will be used. (Since 2.7)

=item C<'device'>

the device name or node-name of a root node which should be copied.

=item C<'target'>

the target of the new image. If the file exists, or if it
is a device, the existing file/device will be used as the new
destination.  If it does not exist, a new file will be created.

=item C<'format'> (optional)

 the format of the new destination, default is to
probe if C<mode> is 'existing', else the format of the source

=item C<'sync'>

what parts of the disk image should be copied to the destination
(all the disk, only the sectors allocated in the topmost image, from a
dirty bitmap, or only new I/O).

=item C<'mode'> (optional)

 whether and how QEMU should create a new image, default is
'absolute-paths'.

=item C<'speed'> (optional)

 the maximum speed, in bytes per second

=item C<'bitmap'> (optional)

 the name of dirty bitmap if sync is "incremental".
Must be present if sync is "incremental", must NOT be present
otherwise. (Since 2.4)

=item C<'compress'> (optional)

 true to compress data, if the target format supports it.
(default: false) (since 2.8)

=item C<'on-source-error'> (optional)

 the action to take on an error on the source,
default 'report'.  'stop' and 'enospc' can only be used
if the block device supports io-status (see BlockInfo).

=item C<'on-target-error'> (optional)

 the action to take on an error on the target,
default 'report' (no limitations, since this applies to
a different block device than C<device>).

=back



B<Note:>
C<on-source-error> and C<on-target-error> only affect background
I/O.  If an error occurs during a guest write request, the device's
rerror/werror actions will be used.

B<Since:>
1.6






B<BlockdevBackup> (Struct)




=over 4


=item C<'job-id'> (optional)

 identifier for the newly-created block job. If
omitted, the device name will be used. (Since 2.7)

=item C<'device'>

the device name or node-name of a root node which should be copied.

=item C<'target'>

the device name or node-name of the backup target node.

=item C<'sync'>

what parts of the disk image should be copied to the destination
(all the disk, only the sectors allocated in the topmost image, or
only new I/O).

=item C<'speed'> (optional)

 the maximum speed, in bytes per second. The default is 0,
for unlimited.

=item C<'compress'> (optional)

 true to compress data, if the target format supports it.
(default: false) (since 2.8)

=item C<'on-source-error'> (optional)

 the action to take on an error on the source,
default 'report'.  'stop' and 'enospc' can only be used
if the block device supports io-status (see BlockInfo).

=item C<'on-target-error'> (optional)

 the action to take on an error on the target,
default 'report' (no limitations, since this applies to
a different block device than C<device>).

=back



B<Note:>
C<on-source-error> and C<on-target-error> only affect background
I/O.  If an error occurs during a guest write request, the device's
rerror/werror actions will be used.

B<Since:>
2.3






B<blockdev-snapshot-sync>  (Command)
Generates a synchronous snapshot of a block device.

For the arguments, see the documentation of BlockdevSnapshotSync.


B<Returns:>
nothing on success
If C<device> is not a valid block device, DeviceNotFound

B<Since:>
0.14.0

B<Example:>
	
	-> { "execute": "blockdev-snapshot-sync",
	     "arguments": { "device": "ide-hd0",
	                    "snapshot-file":
	                    "/some/place/my-image",
	                    "format": "qcow2" } }
	<- { "return": {} }








B<blockdev-snapshot>  (Command)
Generates a snapshot of a block device.

Create a snapshot, by installing 'node' as the backing image of
'overlay'. Additionally, if 'node' is associated with a block
device, the block device changes to using 'overlay' as its new active
image.

For the arguments, see the documentation of BlockdevSnapshot.


B<Since:>
2.5

B<Example:>
	
	-> { "execute": "blockdev-add",
	     "arguments": { "options": { "driver": "qcow2",
	                                 "node-name": "node1534",
	                                 "file": { "driver": "file",
	                                           "filename": "hd1.qcow2" },
	                                 "backing": "" } } }
	
	<- { "return": {} }
	
	-> { "execute": "blockdev-snapshot",
	     "arguments": { "node": "ide-hd0",
	                    "overlay": "node1534" } }
	<- { "return": {} }








B<change-backing-file>  (Command)
Change the backing file in the image file metadata.  This does not
cause QEMU to reopen the image file to reparse the backing filename
(it may, however, perform a reopen to change permissions from
r/o -E<gt> r/w -E<gt> r/o, if needed). The new backing file string is written
into the image file metadata, and the QEMU internal strings are
updated.

=over 4


=item C<'image-node-name'>

The name of the block driver state node of the
image to modify. The "device" argument is used
to verify "image-node-name" is in the chain
described by "device".

=item C<'device'>

The device name or node-name of the root node that owns
image-node-name.

=item C<'backing-file'>

The string to write as the backing file.  This
string is not validated, so care should be taken
when specifying the string or the image chain may
not be able to be reopened again.

=back



B<Returns:>
Nothing on success

If "device" does not exist or cannot be determined, DeviceNotFound

B<Since:>
2.1






B<block-commit>  (Command)
Live commit of data from overlay image nodes into backing nodes - i.e.,
writes data between 'top' and 'base' into 'base'.

=over 4


=item C<'job-id'> (optional)

 identifier for the newly-created block job. If
omitted, the device name will be used. (Since 2.7)

=item C<'device'>

the device name or node-name of a root node

=item C<'base'> (optional)

 The file name of the backing image to write data into.
If not specified, this is the deepest backing image.

=item C<'top'> (optional)

 The file name of the backing image within the image chain,
which contains the topmost data to be committed down. If
not specified, this is the active layer.

=item C<'backing-file'> (optional)

 The backing file string to write into the overlay
image of 'top'.  If 'top' is the active layer,
specifying a backing file string is an error. This
filename is not validated.

If a pathname string is such that it cannot be
resolved by QEMU, that means that subsequent QMP or
HMP commands must use node-names for the image in
question, as filename lookup methods will fail.

If not specified, QEMU will automatically determine
the backing file string to use, or error out if
there is no obvious choice. Care should be taken
when specifying the string, to specify a valid
filename or protocol.
(Since 2.1)

If top == base, that is an error.
If top == active, the job will not be completed by itself,
user needs to complete the job with the block-job-complete
command after getting the ready event. (Since 2.0)

If the base image is smaller than top, then the base image
will be resized to be the same size as top.  If top is
smaller than the base image, the base will not be
truncated.  If you want the base image size to match the
size of the smaller top, you can safely truncate it
yourself once the commit operation successfully completes.

=item C<'speed'> (optional)

 the maximum speed, in bytes per second

=back



B<Returns:>
Nothing on success
If commit or stream is already active on this device, DeviceInUse
If C<device> does not exist, DeviceNotFound
If image commit is not supported by this device, NotSupported
If C<base> or C<top> is invalid, a generic error is returned
If C<speed> is invalid, InvalidParameter

B<Since:>
1.3

B<Example:>
	
	-> { "execute": "block-commit",
	     "arguments": { "device": "virtio0",
	                    "top": "/tmp/snap1.qcow2" } }
	<- { "return": {} }








B<drive-backup>  (Command)
Start a point-in-time copy of a block device to a new destination.  The
status of ongoing drive-backup operations can be checked with
query-block-jobs where the BlockJobInfo.type field has the value 'backup'.
The operation can be stopped before it has completed using the
block-job-cancel command.

For the arguments, see the documentation of DriveBackup.


B<Returns:>
nothing on success
If C<device> is not a valid block device, GenericError

B<Since:>
1.6

B<Example:>
	
	-> { "execute": "drive-backup",
	     "arguments": { "device": "drive0",
	                    "sync": "full",
	                    "target": "backup.img" } }
	<- { "return": {} }








B<blockdev-backup>  (Command)
Start a point-in-time copy of a block device to a new destination.  The
status of ongoing blockdev-backup operations can be checked with
query-block-jobs where the BlockJobInfo.type field has the value 'backup'.
The operation can be stopped before it has completed using the
block-job-cancel command.

For the arguments, see the documentation of BlockdevBackup.


B<Returns:>
nothing on success
If C<device> is not a valid block device, DeviceNotFound

B<Since:>
2.3

B<Example:>
	
	-> { "execute": "blockdev-backup",
	     "arguments": { "device": "src-id",
	                    "sync": "full",
	                    "target": "tgt-id" } }
	<- { "return": {} }








B<query-named-block-nodes>  (Command)
Get the named block driver list


B<Returns:>
the list of BlockDeviceInfo

B<Since:>
2.0

B<Example:>
	
	-> { "execute": "query-named-block-nodes" }
	<- { "return": [ { "ro":false,
	                   "drv":"qcow2",
	                   "encrypted":false,
	                   "file":"disks/test.qcow2",
	                   "node-name": "my-node",
	                   "backing_file_depth":1,
	                   "bps":1000000,
	                   "bps_rd":0,
	                   "bps_wr":0,
	                   "iops":1000000,
	                   "iops_rd":0,
	                   "iops_wr":0,
	                   "bps_max": 8000000,
	                   "bps_rd_max": 0,
	                   "bps_wr_max": 0,
	                   "iops_max": 0,
	                   "iops_rd_max": 0,
	                   "iops_wr_max": 0,
	                   "iops_size": 0,
	                   "write_threshold": 0,
	                   "image":{
	                      "filename":"disks/test.qcow2",
	                      "format":"qcow2",
	                      "virtual-size":2048000,
	                      "backing_file":"base.qcow2",
	                      "full-backing-filename":"disks/base.qcow2",
	                      "backing-filename-format":"qcow2",
	                      "snapshots":[
	                         {
	                            "id": "1",
	                            "name": "snapshot1",
	                            "vm-state-size": 0,
	                            "date-sec": 10000200,
	                            "date-nsec": 12,
	                            "vm-clock-sec": 206,
	                            "vm-clock-nsec": 30
	                         }
	                      ],
	                      "backing-image":{
	                          "filename":"disks/base.qcow2",
	                          "format":"qcow2",
	                          "virtual-size":2048000
	                      }
	                   } } ] }








B<drive-mirror>  (Command)
Start mirroring a block device's writes to a new destination. target
specifies the target of the new image. If the file exists, or if it
is a device, it will be used as the new destination for writes. If
it does not exist, a new file will be created. format specifies the
format of the mirror image, default is to probe if mode='existing',
else the format of the source.

See DriveMirror for parameter descriptions


B<Returns:>
nothing on success
If C<device> is not a valid block device, GenericError

B<Since:>
1.3

B<Example:>
	
	-> { "execute": "drive-mirror",
	     "arguments": { "device": "ide-hd0",
	                    "target": "/some/place/my-image",
	                    "sync": "full",
	                    "format": "qcow2" } }
	<- { "return": {} }








B<DriveMirror> (Struct)


A set of parameters describing drive mirror setup.

=over 4


=item C<'job-id'> (optional)

 identifier for the newly-created block job. If
omitted, the device name will be used. (Since 2.7)

=item C<'device'>

the device name or node-name of a root node whose writes should be
mirrored.

=item C<'target'>

the target of the new image. If the file exists, or if it
is a device, the existing file/device will be used as the new
destination.  If it does not exist, a new file will be created.

=item C<'format'> (optional)

 the format of the new destination, default is to
probe if C<mode> is 'existing', else the format of the source

=item C<'node-name'> (optional)

 the new block driver state node name in the graph
(Since 2.1)

=item C<'replaces'> (optional)

 with sync=full graph node name to be replaced by the new
image when a whole image copy is done. This can be used to repair
broken Quorum files. (Since 2.1)

=item C<'mode'> (optional)

 whether and how QEMU should create a new image, default is
'absolute-paths'.

=item C<'speed'> (optional)

 the maximum speed, in bytes per second

=item C<'sync'>

what parts of the disk image should be copied to the destination
(all the disk, only the sectors allocated in the topmost image, or
only new I/O).

=item C<'granularity'> (optional)

 granularity of the dirty bitmap, default is 64K
if the image format doesn't have clusters, 4K if the clusters
are smaller than that, else the cluster size.  Must be a
power of 2 between 512 and 64M (since 1.4).

=item C<'buf-size'> (optional)

 maximum amount of data in flight from source to
target (since 1.4).

=item C<'on-source-error'> (optional)

 the action to take on an error on the source,
default 'report'.  'stop' and 'enospc' can only be used
if the block device supports io-status (see BlockInfo).

=item C<'on-target-error'> (optional)

 the action to take on an error on the target,
default 'report' (no limitations, since this applies to
a different block device than C<device>).

=item C<'unmap'> (optional)

 Whether to try to unmap target sectors where source has
only zero. If true, and target unallocated sectors will read as zero,
target image sectors will be unmapped; otherwise, zeroes will be
written. Both will result in identical contents.
Default is true. (Since 2.4)

=back



B<Since:>
1.3






B<BlockDirtyBitmap> (Struct)




=over 4


=item C<'node'>

name of device/node which the bitmap is tracking

=item C<'name'>

name of the dirty bitmap

=back



B<Since:>
2.4






B<BlockDirtyBitmapAdd> (Struct)




=over 4


=item C<'node'>

name of device/node which the bitmap is tracking

=item C<'name'>

name of the dirty bitmap

=item C<'granularity'> (optional)

 the bitmap granularity, default is 64k for
block-dirty-bitmap-add

=back



B<Since:>
2.4






B<block-dirty-bitmap-add>  (Command)
Create a dirty bitmap with a name on the node, and start tracking the writes.


B<Returns:>
nothing on success
If C<node> is not a valid block device or node, DeviceNotFound
If C<name> is already taken, GenericError with an explanation

B<Since:>
2.4

B<Example:>
	
	-> { "execute": "block-dirty-bitmap-add",
	     "arguments": { "node": "drive0", "name": "bitmap0" } }
	<- { "return": {} }








B<block-dirty-bitmap-remove>  (Command)
Stop write tracking and remove the dirty bitmap that was created
with block-dirty-bitmap-add.


B<Returns:>
nothing on success
If C<node> is not a valid block device or node, DeviceNotFound
If C<name> is not found, GenericError with an explanation
if C<name> is frozen by an operation, GenericError

B<Since:>
2.4

B<Example:>
	
	-> { "execute": "block-dirty-bitmap-remove",
	     "arguments": { "node": "drive0", "name": "bitmap0" } }
	<- { "return": {} }








B<block-dirty-bitmap-clear>  (Command)
Clear (reset) a dirty bitmap on the device, so that an incremental
backup from this point in time forward will only backup clusters
modified after this clear operation.


B<Returns:>
nothing on success
If C<node> is not a valid block device, DeviceNotFound
If C<name> is not found, GenericError with an explanation

B<Since:>
2.4

B<Example:>
	
	-> { "execute": "block-dirty-bitmap-clear",
	     "arguments": { "node": "drive0", "name": "bitmap0" } }
	<- { "return": {} }








B<blockdev-mirror>  (Command)
Start mirroring a block device's writes to a new destination.

=over 4


=item C<'job-id'> (optional)

 identifier for the newly-created block job. If
omitted, the device name will be used. (Since 2.7)

=item C<'device'>

The device name or node-name of a root node whose writes should be
mirrored.

=item C<'target'>

the id or node-name of the block device to mirror to. This mustn't be
attached to guest.

=item C<'replaces'> (optional)

 with sync=full graph node name to be replaced by the new
image when a whole image copy is done. This can be used to repair
broken Quorum files.

=item C<'speed'> (optional)

 the maximum speed, in bytes per second

=item C<'sync'>

what parts of the disk image should be copied to the destination
(all the disk, only the sectors allocated in the topmost image, or
only new I/O).

=item C<'granularity'> (optional)

 granularity of the dirty bitmap, default is 64K
if the image format doesn't have clusters, 4K if the clusters
are smaller than that, else the cluster size.  Must be a
power of 2 between 512 and 64M

=item C<'buf-size'> (optional)

 maximum amount of data in flight from source to
target

=item C<'on-source-error'> (optional)

 the action to take on an error on the source,
default 'report'.  'stop' and 'enospc' can only be used
if the block device supports io-status (see BlockInfo).

=item C<'on-target-error'> (optional)

 the action to take on an error on the target,
default 'report' (no limitations, since this applies to
a different block device than C<device>).

=back



B<Returns:>
nothing on success.

B<Since:>
2.6

B<Example:>
	
	-> { "execute": "blockdev-mirror",
	     "arguments": { "device": "ide-hd0",
	                    "target": "target0",
	                    "sync": "full" } }
	<- { "return": {} }








B<block_set_io_throttle>  (Command)
Change I/O throttle limits for a block drive.

Since QEMU 2.4, each device with I/O limits is member of a throttle
group.

If two or more devices are members of the same group, the limits
will apply to the combined I/O of the whole group in a round-robin
fashion. Therefore, setting new I/O limits to a device will affect
the whole group.

The name of the group can be specified using the 'group' parameter.
If the parameter is unset, it is assumed to be the current group of
that device. If it's not in any group yet, the name of the device
will be used as the name for its group.

The 'group' parameter can also be used to move a device to a
different group. In this case the limits specified in the parameters
will be applied to the new group only.

I/O limits can be disabled by setting all of them to 0. In this case
the device will be removed from its group and the rest of its
members will not be affected. The 'group' parameter is ignored.

See BlockIOThrottle for parameter descriptions.


B<Returns:>
Nothing on success
If C<device> is not a valid block device, DeviceNotFound

B<Since:>
1.1

B<Example:>
	
	-> { "execute": "block_set_io_throttle",
	     "arguments": { "id": "ide0-1-0",
	                    "bps": 1000000,
	                    "bps_rd": 0,
	                    "bps_wr": 0,
	                    "iops": 0,
	                    "iops_rd": 0,
	                    "iops_wr": 0,
	                    "bps_max": 8000000,
	                    "bps_rd_max": 0,
	                    "bps_wr_max": 0,
	                    "iops_max": 0,
	                    "iops_rd_max": 0,
	                    "iops_wr_max": 0,
	                    "bps_max_length": 60,
	                    "iops_size": 0 } }
	<- { "return": {} }








B<BlockIOThrottle> (Struct)


A set of parameters describing block throttling.

=over 4


=item C<'device'> (optional)

 Block device name (deprecated, use C<id> instead)

=item C<'id'> (optional)

 The name or QOM path of the guest device (since: 2.8)

=item C<'bps'>

total throughput limit in bytes per second

=item C<'bps_rd'>

read throughput limit in bytes per second

=item C<'bps_wr'>

write throughput limit in bytes per second

=item C<'iops'>

total I/O operations per second

=item C<'iops_rd'>

read I/O operations per second

=item C<'iops_wr'>

write I/O operations per second

=item C<'bps_max'> (optional)

 total throughput limit during bursts,
in bytes (Since 1.7)

=item C<'bps_rd_max'> (optional)

 read throughput limit during bursts,
in bytes (Since 1.7)

=item C<'bps_wr_max'> (optional)

 write throughput limit during bursts,
in bytes (Since 1.7)

=item C<'iops_max'> (optional)

 total I/O operations per second during bursts,
in bytes (Since 1.7)

=item C<'iops_rd_max'> (optional)

 read I/O operations per second during bursts,
in bytes (Since 1.7)

=item C<'iops_wr_max'> (optional)

 write I/O operations per second during bursts,
in bytes (Since 1.7)

=item C<'bps_max_length'> (optional)

 maximum length of the C<bps_max> burst
period, in seconds. It must only
be set if C<bps_max> is set as well.
Defaults to 1. (Since 2.6)

=item C<'bps_rd_max_length'> (optional)

 maximum length of the C<bps_rd_max>
burst period, in seconds. It must only
be set if C<bps_rd_max> is set as well.
Defaults to 1. (Since 2.6)

=item C<'bps_wr_max_length'> (optional)

 maximum length of the C<bps_wr_max>
burst period, in seconds. It must only
be set if C<bps_wr_max> is set as well.
Defaults to 1. (Since 2.6)

=item C<'iops_max_length'> (optional)

 maximum length of the C<iops> burst
period, in seconds. It must only
be set if C<iops_max> is set as well.
Defaults to 1. (Since 2.6)

=item C<'iops_rd_max_length'> (optional)

 maximum length of the C<iops_rd_max>
burst period, in seconds. It must only
be set if C<iops_rd_max> is set as well.
Defaults to 1. (Since 2.6)

=item C<'iops_wr_max_length'> (optional)

 maximum length of the C<iops_wr_max>
burst period, in seconds. It must only
be set if C<iops_wr_max> is set as well.
Defaults to 1. (Since 2.6)

=item C<'iops_size'> (optional)

 an I/O size in bytes (Since 1.7)

=item C<'group'> (optional)

 throttle group name (Since 2.4)

=back



B<Since:>
1.1






B<block-stream>  (Command)
Copy data from a backing file into a block device.

The block streaming operation is performed in the background until the entire
backing file has been copied.  This command returns immediately once streaming
has started.  The status of ongoing block streaming operations can be checked
with query-block-jobs.  The operation can be stopped before it has completed
using the block-job-cancel command.

The node that receives the data is called the top image, can be located in
any part of the chain (but always above the base image; see below) and can be
specified using its device or node name. Earlier qemu versions only allowed
'device' to name the top level node; presence of the 'base-node' parameter
during introspection can be used as a witness of the enhanced semantics
of 'device'.

If a base file is specified then sectors are not copied from that base file and
its backing chain.  When streaming completes the image file will have the base
file as its backing file.  This can be used to stream a subset of the backing
file chain instead of flattening the entire image.

On successful completion the image file is updated to drop the backing file
and the BLOCK_JOB_COMPLETED event is emitted.

=over 4


=item C<'job-id'> (optional)

 identifier for the newly-created block job. If
omitted, the device name will be used. (Since 2.7)

=item C<'device'>

the device or node name of the top image

=item C<'base'> (optional)

 the common backing file name.
It cannot be set if C<base-node> is also set.

=item C<'base-node'> (optional)

 the node name of the backing file.
It cannot be set if C<base> is also set. (Since 2.8)

=item C<'backing-file'> (optional)

 The backing file string to write into the top
image. This filename is not validated.

If a pathname string is such that it cannot be
resolved by QEMU, that means that subsequent QMP or
HMP commands must use node-names for the image in
question, as filename lookup methods will fail.

If not specified, QEMU will automatically determine
the backing file string to use, or error out if there
is no obvious choice.  Care should be taken when
specifying the string, to specify a valid filename or
protocol.
(Since 2.1)

=item C<'speed'> (optional)

 the maximum speed, in bytes per second

=item C<'on-error'> (optional)

 the action to take on an error (default report).
'stop' and 'enospc' can only be used if the block device
supports io-status (see BlockInfo).  Since 1.3.

=back



B<Returns:>
Nothing on success. If C<device> does not exist, DeviceNotFound.

B<Since:>
1.1

B<Example:>
	
	-> { "execute": "block-stream",
	     "arguments": { "device": "virtio0",
	                    "base": "/tmp/master.qcow2" } }
	<- { "return": {} }








B<block-job-set-speed>  (Command)
Set maximum speed for a background block operation.

This command can only be issued when there is an active block job.

Throttling can be disabled by setting the speed to 0.

=over 4


=item C<'device'>

The job identifier. This used to be a device name (hence
the name of the parameter), but since QEMU 2.7 it can have
other values.

=item C<'speed'>

the maximum speed, in bytes per second, or 0 for unlimited.
Defaults to 0.

=back



B<Returns:>
Nothing on success
If no background operation is active on this device, DeviceNotActive

B<Since:>
1.1






B<block-job-cancel>  (Command)
Stop an active background block operation.

This command returns immediately after marking the active background block
operation for cancellation.  It is an error to call this command if no
operation is in progress.

The operation will cancel as soon as possible and then emit the
BLOCK_JOB_CANCELLED event.  Before that happens the job is still visible when
enumerated using query-block-jobs.

For streaming, the image file retains its backing file unless the streaming
operation happens to complete just as it is being cancelled.  A new streaming
operation can be started at a later time to finish copying all data from the
backing file.

=over 4


=item C<'device'>

The job identifier. This used to be a device name (hence
the name of the parameter), but since QEMU 2.7 it can have
other values.

=item C<'force'> (optional)

 whether to allow cancellation of a paused job (default
false).  Since 1.3.

=back



B<Returns:>
Nothing on success
If no background operation is active on this device, DeviceNotActive

B<Since:>
1.1






B<block-job-pause>  (Command)
Pause an active background block operation.

This command returns immediately after marking the active background block
operation for pausing.  It is an error to call this command if no
operation is in progress.  Pausing an already paused job has no cumulative
effect; a single block-job-resume command will resume the job.

The operation will pause as soon as possible.  No event is emitted when
the operation is actually paused.  Cancelling a paused job automatically
resumes it.

=over 4


=item C<'device'>

The job identifier. This used to be a device name (hence
the name of the parameter), but since QEMU 2.7 it can have
other values.

=back



B<Returns:>
Nothing on success
If no background operation is active on this device, DeviceNotActive

B<Since:>
1.3






B<block-job-resume>  (Command)
Resume an active background block operation.

This command returns immediately after resuming a paused background block
operation.  It is an error to call this command if no operation is in
progress.  Resuming an already running job is not an error.

This command also clears the error status of the job.

=over 4


=item C<'device'>

The job identifier. This used to be a device name (hence
the name of the parameter), but since QEMU 2.7 it can have
other values.

=back



B<Returns:>
Nothing on success
If no background operation is active on this device, DeviceNotActive

B<Since:>
1.3






B<block-job-complete>  (Command)
Manually trigger completion of an active background block operation.  This
is supported for drive mirroring, where it also switches the device to
write to the target path only.  The ability to complete is signaled with
a BLOCK_JOB_READY event.

This command completes an active background block operation synchronously.
The ordering of this command's return with the BLOCK_JOB_COMPLETED event
is not defined.  Note that if an I/O error occurs during the processing of
this command: 1) the command itself will fail; 2) the error will be processed
according to the rerror/werror arguments that were specified when starting
the operation.

A cancelled or paused job cannot be completed.

=over 4


=item C<'device'>

The job identifier. This used to be a device name (hence
the name of the parameter), but since QEMU 2.7 it can have
other values.

=back



B<Returns:>
Nothing on success
If no background operation is active on this device, DeviceNotActive

B<Since:>
1.3






B<BlockdevDiscardOptions> (Enum)


Determines how to handle discard requests.

=over 4


=item C<'ignore'>

Ignore the request

=item C<'unmap'>

Forward as an unmap request

=back



B<Since:>
1.7






B<BlockdevDetectZeroesOptions> (Enum)


Describes the operation mode for the automatic conversion of plain
zero writes by the OS to driver specific optimized zero write commands.

=over 4


=item C<'off'>

Disabled (default)

=item C<'on'>

Enabled

=item C<'unmap'>

Enabled and even try to unmap blocks if possible. This requires
also that C<BlockdevDiscardOptions> is set to unmap for this device.

=back



B<Since:>
2.1






B<BlockdevAioOptions> (Enum)


Selects the AIO backend to handle I/O requests

=over 4


=item C<'threads'>

Use qemu's thread pool

=item C<'native'>

Use native AIO backend (only Linux and Windows)

=back



B<Since:>
1.7






B<BlockdevCacheOptions> (Struct)


Includes cache-related options for block devices

=over 4


=item C<'direct'> (optional)

 enables use of O_DIRECT (bypass the host page cache;
default: false)

=item C<'no-flush'> (optional)

 ignore any flush requests for the device (default:
false)

=back



B<Since:>
1.7






B<BlockdevDriver> (Enum)


Drivers that are supported in block device operations.

=over 4


=item C<'host_device'>

Since 2.1

=item C<'host_cdrom'>

Since 2.1

=item C<'gluster'>

Since 2.7

=item C<'nbd'>

Since 2.8

=item C<'nfs'>

Since 2.8

=item C<'replication'>

Since 2.8

=item C<'ssh'>

Since 2.8

=item C<'iscsi'>

Since 2.9

=item C<'archipelago'>



=item C<'blkdebug'>



=item C<'blkverify'>



=item C<'bochs'>



=item C<'cloop'>



=item C<'dmg'>



=item C<'file'>



=item C<'ftp'>



=item C<'ftps'>



=item C<'http'>



=item C<'https'>



=item C<'luks'>



=item C<'null-aio'>



=item C<'null-co'>



=item C<'parallels'>



=item C<'qcow'>



=item C<'qcow2'>



=item C<'qed'>



=item C<'quorum'>



=item C<'raw'>



=item C<'vdi'>



=item C<'vhdx'>



=item C<'vmdk'>



=item C<'vpc'>



=item C<'vvfat'>



=back



B<Since:>
2.0






B<BlockdevOptionsFile> (Struct)


Driver specific block device options for the file backend.

=over 4


=item C<'filename'>

path to the image file

=item C<'aio'> (optional)

 AIO backend (default: threads) (since: 2.8)

=back



B<Since:>
1.7






B<BlockdevOptionsNull> (Struct)


Driver specific block device options for the null backend.

=over 4


=item C<'size'> (optional)

 size of the device in bytes.

=item C<'latency-ns'> (optional)

 emulated latency (in nanoseconds) in processing
requests. Default to zero which completes requests immediately.
(Since 2.4)

=back



B<Since:>
2.2






B<BlockdevOptionsVVFAT> (Struct)


Driver specific block device options for the vvfat protocol.

=over 4


=item C<'dir'>

directory to be exported as FAT image

=item C<'fat-type'> (optional)

 FAT type: 12, 16 or 32

=item C<'floppy'> (optional)

 whether to export a floppy image (true) or
partitioned hard disk (false; default)

=item C<'label'> (optional)

 set the volume label, limited to 11 bytes. FAT16 and
FAT32 traditionally have some restrictions on labels, which are
ignored by most operating systems. Defaults to "QEMU VVFAT".
(since 2.4)

=item C<'rw'> (optional)

 whether to allow write operations (default: false)

=back



B<Since:>
1.7






B<BlockdevOptionsGenericFormat> (Struct)


Driver specific block device options for image format that have no option
besides their data source.

=over 4


=item C<'file'>

reference to or definition of the data source block device

=back



B<Since:>
1.7






B<BlockdevOptionsLUKS> (Struct)


Driver specific block device options for LUKS.

=over 4


=item C<'key-secret'> (optional)

 the ID of a QCryptoSecret object providing
the decryption key (since 2.6). Mandatory except when
doing a metadata-only probe of the image.

=back



B<Since:>
2.6






B<BlockdevOptionsGenericCOWFormat> (Struct)


Driver specific block device options for image format that have no option
besides their data source and an optional backing file.

=over 4


=item C<'backing'> (optional)

 reference to or definition of the backing file block
device (if missing, taken from the image file content). It is
allowed to pass an empty string here in order to disable the
default backing file.

=back



B<Since:>
1.7






B<Qcow2OverlapCheckMode> (Enum)


General overlap check modes.

=over 4


=item C<'none'>

Do not perform any checks

=item C<'constant'>

Perform only checks which can be done in constant time and
without reading anything from disk

=item C<'cached'>

Perform only checks which can be done without reading anything
from disk

=item C<'all'>

Perform all available overlap checks

=back



B<Since:>
2.2






B<Qcow2OverlapCheckFlags> (Struct)


Structure of flags for each metadata structure. Setting a field to 'true'
makes qemu guard that structure against unintended overwriting. The default
value is chosen according to the template given.

=over 4


=item C<'template'> (optional)

Specifies a template mode which can be adjusted using the other
flags, defaults to 'cached'



=back



B<Since:>
2.2






B<Qcow2OverlapChecks> (Alternate)


Specifies which metadata structures should be guarded against unintended
overwriting.

=over 4


=item C<'flags'>

set of flags for separate specification of each metadata structure
type

=item C<'mode'>

named mode which chooses a specific set of flags

=back



B<Since:>
2.2






B<BlockdevOptionsQcow2> (Struct)


Driver specific block device options for qcow2.

=over 4


=item C<'lazy-refcounts'> (optional)

 whether to enable the lazy refcounts
feature (default is taken from the image file)

=item C<'pass-discard-request'> (optional)

 whether discard requests to the qcow2
device should be forwarded to the data source

=item C<'pass-discard-snapshot'> (optional)

 whether discard requests for the data source
should be issued when a snapshot operation (e.g.
deleting a snapshot) frees clusters in the qcow2 file

=item C<'pass-discard-other'> (optional)

 whether discard requests for the data source
should be issued on other occasions where a cluster
gets freed

=item C<'overlap-check'> (optional)

 which overlap checks to perform for writes
to the image, defaults to 'cached' (since 2.2)

=item C<'cache-size'> (optional)

 the maximum total size of the L2 table and
refcount block caches in bytes (since 2.2)

=item C<'l2-cache-size'> (optional)

 the maximum size of the L2 table cache in
bytes (since 2.2)

=item C<'refcount-cache-size'> (optional)

 the maximum size of the refcount block cache
in bytes (since 2.2)

=item C<'cache-clean-interval'> (optional)

 clean unused entries in the L2 and refcount
caches. The interval is in seconds. The default value
is 0 and it disables this feature (since 2.5)

=back



B<Since:>
1.7






B<BlockdevOptionsArchipelago> (Struct)


Driver specific block device options for Archipelago.

=over 4


=item C<'volume'>

Name of the Archipelago volume image

=item C<'mport'> (optional)

 The port number on which mapperd is
listening. This is optional
and if not specified, QEMU will make Archipelago
use the default port (1001).

=item C<'vport'> (optional)

 The port number on which vlmcd is
listening. This is optional
and if not specified, QEMU will make Archipelago
use the default port (501).

=item C<'segment'> (optional)

 The name of the shared memory segment
Archipelago stack is using. This is optional
and if not specified, QEMU will make Archipelago
use the default value, 'archipelago'.

=back



B<Since:>
2.2






B<BlockdevOptionsSsh> (Struct)




=over 4


=item C<'server'>

host address

=item C<'path'>

path to the image on the host

=item C<'user'> (optional)

 user as which to connect, defaults to current
local user name

=back



B<TODO:>
Expose the host_key_check option in QMP

B<Since:>
2.8






B<BlkdebugEvent> (Enum)


Trigger events supported by blkdebug.

=over 4


=item C<'l1_update'>



=item C<'l1_grow_alloc_table'>



=item C<'l1_grow_write_table'>



=item C<'l1_grow_activate_table'>



=item C<'l2_load'>



=item C<'l2_update'>



=item C<'l2_update_compressed'>



=item C<'l2_alloc_cow_read'>



=item C<'l2_alloc_write'>



=item C<'read_aio'>



=item C<'read_backing_aio'>



=item C<'read_compressed'>



=item C<'write_aio'>



=item C<'write_compressed'>



=item C<'vmstate_load'>



=item C<'vmstate_save'>



=item C<'cow_read'>



=item C<'cow_write'>



=item C<'reftable_load'>



=item C<'reftable_grow'>



=item C<'reftable_update'>



=item C<'refblock_load'>



=item C<'refblock_update'>



=item C<'refblock_update_part'>



=item C<'refblock_alloc'>



=item C<'refblock_alloc_hookup'>



=item C<'refblock_alloc_write'>



=item C<'refblock_alloc_write_blocks'>



=item C<'refblock_alloc_write_table'>



=item C<'refblock_alloc_switch_table'>



=item C<'cluster_alloc'>



=item C<'cluster_alloc_bytes'>



=item C<'cluster_free'>



=item C<'flush_to_os'>



=item C<'flush_to_disk'>



=item C<'pwritev_rmw_head'>



=item C<'pwritev_rmw_after_head'>



=item C<'pwritev_rmw_tail'>



=item C<'pwritev_rmw_after_tail'>



=item C<'pwritev'>



=item C<'pwritev_zero'>



=item C<'pwritev_done'>



=item C<'empty_image_prepare'>



=back



B<Since:>
2.0






B<BlkdebugInjectErrorOptions> (Struct)


Describes a single error injection for blkdebug.

=over 4


=item C<'event'>

trigger event

=item C<'state'> (optional)

 the state identifier blkdebug needs to be in to
actually trigger the event; defaults to "any"

=item C<'errno'> (optional)

 error identifier (errno) to be returned; defaults to
EIO

=item C<'sector'> (optional)

 specifies the sector index which has to be affected
in order to actually trigger the event; defaults to "any
sector"

=item C<'once'> (optional)

 disables further events after this one has been
triggered; defaults to false

=item C<'immediately'> (optional)

 fail immediately; defaults to false

=back



B<Since:>
2.0






B<BlkdebugSetStateOptions> (Struct)


Describes a single state-change event for blkdebug.

=over 4


=item C<'event'>

trigger event

=item C<'state'> (optional)

 the current state identifier blkdebug needs to be in;
defaults to "any"

=item C<'new_state'>

the state identifier blkdebug is supposed to assume if
this event is triggered

=back



B<Since:>
2.0






B<BlockdevOptionsBlkdebug> (Struct)


Driver specific block device options for blkdebug.

=over 4


=item C<'image'>

underlying raw block device (or image file)

=item C<'config'> (optional)

 filename of the configuration file

=item C<'align'> (optional)

 required alignment for requests in bytes,
must be power of 2, or 0 for default

=item C<'inject-error'> (optional)

 array of error injection descriptions

=item C<'set-state'> (optional)

 array of state-change descriptions

=back



B<Since:>
2.0






B<BlockdevOptionsBlkverify> (Struct)


Driver specific block device options for blkverify.

=over 4


=item C<'test'>

block device to be tested

=item C<'raw'>

raw image used for verification

=back



B<Since:>
2.0






B<QuorumReadPattern> (Enum)


An enumeration of quorum read patterns.

=over 4


=item C<'quorum'>

read all the children and do a quorum vote on reads

=item C<'fifo'>

read only from the first child that has not failed

=back



B<Since:>
2.2






B<BlockdevOptionsQuorum> (Struct)


Driver specific block device options for Quorum

=over 4


=item C<'blkverify'> (optional)

 true if the driver must print content mismatch
set to false by default

=item C<'children'>

the children block devices to use

=item C<'vote-threshold'>

the vote limit under which a read will fail

=item C<'rewrite-corrupted'> (optional)

 rewrite corrupted data when quorum is reached
(Since 2.1)

=item C<'read-pattern'> (optional)

 choose read pattern and set to quorum by default
(Since 2.2)

=back



B<Since:>
2.0






B<GlusterTransport> (Enum)


An enumeration of Gluster transport types

=over 4


=item C<'tcp'>

TCP   - Transmission Control Protocol

=item C<'unix'>

UNIX  - Unix domain socket

=back



B<Since:>
2.7






B<Union> (Flat)


Captures the address of a socket

Details for connecting to a gluster server

=over 4


=item C<'type'>

Transport type used for gluster connection

=back

This is similar to SocketAddress, only distinction:


=over 4


=item 1.

GlusterServer is a flat union, SocketAddress is a simple union.
A flat union is nicer than simple because it avoids nesting
(i.e. more {}) on the wire.


=item 2.

GlusterServer lacks case 'fd', since gluster doesn't let you
pass in a file descriptor.


=back


GlusterServer is actually not Gluster-specific, its a
compatibility evolved into an alternate for SocketAddress.

B<Since:>
2.7






B<BlockdevOptionsGluster> (Struct)


Driver specific block device options for Gluster

=over 4


=item C<'volume'>

name of gluster volume where VM image resides

=item C<'path'>

absolute path to image file in gluster volume

=item C<'server'>

gluster servers description

=item C<'debug'> (optional)

 libgfapi log level (default '4' which is Error)
(Since 2.8)

=item C<'logfile'> (optional)

 libgfapi log file (default /dev/stderr) (Since 2.8)

=back



B<Since:>
2.7






B<IscsiTransport> (Enum)


An enumeration of libiscsi transport types

=over 4


=item C<'tcp'>



=item C<'iser'>



=back



B<Since:>
2.9






B<IscsiHeaderDigest> (Enum)


An enumeration of header digests supported by libiscsi

=over 4


=item C<'crc32c'>



=item C<'none'>



=item C<'crc32c-none'>



=item C<'none-crc32c'>



=back



B<Since:>
2.9






B<BlockdevOptionsIscsi> (Struct)


C<transport>        The iscsi transport type

C<portal>           The address of the iscsi portal

C<target>           The target iqn name

C<lun>              #optional LUN to connect to. Defaults to 0.

C<user>             #optional User name to log in with. If omitted, no CHAP
authentication is performed.

C<password-secret>  #optional The ID of a QCryptoSecret object providing
the password for the login. This option is required if
C<user> is specified.

C<initiator-name>   #optional The iqn name we want to identify to the target
as. If this option is not specified, an initiator name is
generated automatically.

C<header-digest>    #optional The desired header digest. Defaults to
none-crc32c.

C<timeout>          #optional Timeout in seconds after which a request will
timeout. 0 means no timeout and is the default.

Driver specific block device options for iscsi


B<Since:>
2.9






B<ReplicationMode> (Enum)


An enumeration of replication modes.

=over 4


=item C<'primary'>

Primary mode, the vm's state will be sent to secondary QEMU.

=item C<'secondary'>

Secondary mode, receive the vm's state from primary QEMU.

=back



B<Since:>
2.8






B<BlockdevOptionsReplication> (Struct)


Driver specific block device options for replication

=over 4


=item C<'mode'>

the replication mode

=item C<'top-id'> (optional)

 In secondary mode, node name or device ID of the root
node who owns the replication node chain. Must not be given in
primary mode.

=back



B<Since:>
2.8






B<NFSTransport> (Enum)


An enumeration of NFS transport types

=over 4


=item C<'inet'>

TCP transport

=back



B<Since:>
2.8






B<NFSServer> (Struct)


Captures the address of the socket

=over 4


=item C<'type'>

transport type used for NFS (only TCP supported)

=item C<'host'>

host address for NFS server

=back



B<Since:>
2.8






B<BlockdevOptionsNfs> (Struct)


Driver specific block device option for NFS

=over 4


=item C<'server'>

host address

=item C<'path'>

path of the image on the host

=item C<'user'> (optional)

 UID value to use when talking to the
server (defaults to 65534 on Windows and getuid()
on unix)

=item C<'group'> (optional)

 GID value to use when talking to the
server (defaults to 65534 on Windows and getgid()
in unix)

=item C<'tcp-syn-count'> (optional)

 number of SYNs during the session
establishment (defaults to libnfs default)

=item C<'readahead-size'> (optional)

 set the readahead size in bytes (defaults
to libnfs default)

=item C<'page-cache-size'> (optional)

 set the pagecache size in bytes (defaults
to libnfs default)

=item C<'debug'> (optional)

 set the NFS debug level (max 2) (defaults
to libnfs default)

=back



B<Since:>
2.8






B<BlockdevOptionsCurl> (Struct)


Driver specific block device options for the curl backend.

=over 4


=item C<'filename'>

path to the image file

=back



B<Since:>
1.7






B<BlockdevOptionsNbd> (Struct)


Driver specific block device options for NBD.

=over 4


=item C<'server'>

NBD server address

=item C<'export'> (optional)

 export name

=item C<'tls-creds'> (optional)

 TLS credentials ID

=back



B<Since:>
2.8






B<BlockdevOptionsRaw> (Struct)


Driver specific block device options for the raw driver.

=over 4


=item C<'offset'> (optional)

 position where the block device starts

=item C<'size'> (optional)

 the assumed size of the device

=back



B<Since:>
2.8






B<Union> (Flat)


Options for creating a block device.  Many options are available for all
block devices, independent of the block driver:

=over 4


=item C<'driver'>

block driver name

=item C<'node-name'> (optional)

 the node name of the new node (Since 2.0).
This option is required on the top level of blockdev-add.

=item C<'discard'> (optional)

 discard-related options (default: ignore)

=item C<'cache'> (optional)

 cache-related options

=item C<'read-only'> (optional)

 whether the block device should be read-only
(default: false)

=item C<'detect-zeroes'> (optional)

 detect and optimize zero writes (Since 2.1)
(default: off)

=back

Remaining options are determined by the block driver.

B<Since:>
1.7






B<BlockdevRef> (Alternate)


Reference to a block device.

=over 4


=item C<'definition'>

defines a new block device inline

=item C<'reference'>

references the ID of an existing block device. An
empty string means that no block device should be
referenced.

=back



B<Since:>
1.7






B<blockdev-add>  (Command)
Creates a new block device. If the C<id> option is given at the top level, a
BlockBackend will be created; otherwise, C<node-name> is mandatory at the top
level and no BlockBackend will be created.

For the arguments, see the documentation of BlockdevOptions.


B<Note:>
This command is still a work in progress.  It doesn't support all
block drivers among other things.  Stay away from it unless you want
to help with its development.

B<Since:>
1.7

B<Example:>
	
	1.
	-> { "execute": "blockdev-add",
	     "arguments": {
	          "driver": "qcow2",
	          "node-name": "test1",
	          "file": {
	              "driver": "file",
	              "filename": "test.qcow2"
	           }
	      }
	    }
	<- { "return": {} }
	
	2.
	-> { "execute": "blockdev-add",
	     "arguments": {
	          "driver": "qcow2",
	          "node-name": "node0",
	          "discard": "unmap",
	          "cache": {
	             "direct": true
	           },
	           "file": {
	             "driver": "file",
	             "filename": "/tmp/test.qcow2"
	           },
	           "backing": {
	              "driver": "raw",
	              "file": {
	                 "driver": "file",
	                 "filename": "/dev/fdset/4"
	               }
	           }
	       }
	     }
	
	<- { "return": {} }








B<x-blockdev-del>  (Command)
Deletes a block device that has been added using blockdev-add.
The command will fail if the node is attached to a device or is
otherwise being used.

=over 4


=item C<'node-name'>

Name of the graph node to delete.

=back



B<Note:>
This command is still a work in progress and is considered
experimental. Stay away from it unless you want to help with its
development.

B<Since:>
2.5

B<Example:>
	
	-> { "execute": "blockdev-add",
	     "arguments": {
	          "driver": "qcow2",
	          "node-name": "node0",
	          "file": {
	              "driver": "file",
	              "filename": "test.qcow2"
	          }
	     }
	   }
	<- { "return": {} }
	
	-> { "execute": "x-blockdev-del",
	     "arguments": { "node-name": "node0" }
	   }
	<- { "return": {} }








B<blockdev-open-tray>  (Command)
Opens a block device's tray. If there is a block driver state tree inserted as
a medium, it will become inaccessible to the guest (but it will remain
associated to the block device, so closing the tray will make it accessible
again).

If the tray was already open before, this will be a no-op.

Once the tray opens, a DEVICE_TRAY_MOVED event is emitted. There are cases in
which no such event will be generated, these include:

=over 4


=item -

if the guest has locked the tray, C<force> is false and the guest does not
respond to the eject request

=item -

if the BlockBackend denoted by C<device> does not have a guest device attached
to it

=item -

if the guest device does not have an actual tray

=back



=over 4


=item C<'device'> (optional)

 Block device name (deprecated, use C<id> instead)

=item C<'id'> (optional)

 The name or QOM path of the guest device (since: 2.8)

=item C<'force'> (optional)

 if false (the default), an eject request will be sent to
the guest if it has locked the tray (and the tray will not be opened
immediately); if true, the tray will be opened regardless of whether
it is locked

=back



B<Since:>
2.5

B<Example:>
	
	-> { "execute": "blockdev-open-tray",
	     "arguments": { "id": "ide0-1-0" } }
	
	<- { "timestamp": { "seconds": 1418751016,
	                    "microseconds": 716996 },
	     "event": "DEVICE_TRAY_MOVED",
	     "data": { "device": "ide1-cd0",
	               "id": "ide0-1-0",
	               "tray-open": true } }
	
	<- { "return": {} }








B<blockdev-close-tray>  (Command)
Closes a block device's tray. If there is a block driver state tree associated
with the block device (which is currently ejected), that tree will be loaded
as the medium.

If the tray was already closed before, this will be a no-op.

=over 4


=item C<'device'> (optional)

 Block device name (deprecated, use C<id> instead)

=item C<'id'> (optional)

 The name or QOM path of the guest device (since: 2.8)

=back



B<Since:>
2.5

B<Example:>
	
	-> { "execute": "blockdev-close-tray",
	     "arguments": { "id": "ide0-1-0" } }
	
	<- { "timestamp": { "seconds": 1418751345,
	                    "microseconds": 272147 },
	     "event": "DEVICE_TRAY_MOVED",
	     "data": { "device": "ide1-cd0",
	               "id": "ide0-1-0",
	               "tray-open": false } }
	
	<- { "return": {} }








B<x-blockdev-remove-medium>  (Command)
Removes a medium (a block driver state tree) from a block device. That block
device's tray must currently be open (unless there is no attached guest
device).

If the tray is open and there is no medium inserted, this will be a no-op.

=over 4


=item C<'device'> (optional)

 Block device name (deprecated, use C<id> instead)

=item C<'id'> (optional)

 The name or QOM path of the guest device (since: 2.8)

=back



B<Note:>
This command is still a work in progress and is considered experimental.
Stay away from it unless you want to help with its development.

B<Since:>
2.5

B<Example:>
	
	-> { "execute": "x-blockdev-remove-medium",
	     "arguments": { "id": "ide0-1-0" } }
	
	<- { "error": { "class": "GenericError",
	                "desc": "Tray of device 'ide0-1-0' is not open" } }
	
	-> { "execute": "blockdev-open-tray",
	     "arguments": { "id": "ide0-1-0" } }
	
	<- { "timestamp": { "seconds": 1418751627,
	                    "microseconds": 549958 },
	     "event": "DEVICE_TRAY_MOVED",
	     "data": { "device": "ide1-cd0",
	               "id": "ide0-1-0",
	               "tray-open": true } }
	
	<- { "return": {} }
	
	-> { "execute": "x-blockdev-remove-medium",
	     "arguments": { "device": "ide0-1-0" } }
	
	<- { "return": {} }








B<x-blockdev-insert-medium>  (Command)
Inserts a medium (a block driver state tree) into a block device. That block
device's tray must currently be open (unless there is no attached guest
device) and there must be no medium inserted already.

=over 4


=item C<'device'> (optional)

 Block device name (deprecated, use C<id> instead)

=item C<'id'> (optional)

 The name or QOM path of the guest device (since: 2.8)

=item C<'node-name'>

name of a node in the block driver state graph

=back



B<Note:>
This command is still a work in progress and is considered experimental.
Stay away from it unless you want to help with its development.

B<Since:>
2.5

B<Example:>
	
	-> { "execute": "blockdev-add",
	     "arguments": {
	         "options": { "node-name": "node0",
	                      "driver": "raw",
	                      "file": { "driver": "file",
	                                "filename": "fedora.iso" } } } }
	<- { "return": {} }
	
	-> { "execute": "x-blockdev-insert-medium",
	     "arguments": { "id": "ide0-1-0",
	                    "node-name": "node0" } }
	
	<- { "return": {} }








B<BlockdevChangeReadOnlyMode> (Enum)


Specifies the new read-only mode of a block device subject to the
C<blockdev-change-medium> command.

=over 4


=item C<'retain'>

Retains the current read-only mode

=item C<'read-only'>

Makes the device read-only

=item C<'read-write'>

Makes the device writable

=back



B<Since:>
2.3






B<blockdev-change-medium>  (Command)
Changes the medium inserted into a block device by ejecting the current medium
and loading a new image file which is inserted as the new medium (this command
combines blockdev-open-tray, x-blockdev-remove-medium,
x-blockdev-insert-medium and blockdev-close-tray).

=over 4


=item C<'device'> (optional)

 Block device name (deprecated, use C<id> instead)

=item C<'id'> (optional)

 The name or QOM path of the guest device
(since: 2.8)

=item C<'filename'>

filename of the new image to be loaded

=item C<'format'> (optional)

 format to open the new image with (defaults to
the probed format)

=item C<'read-only-mode'> (optional)

 change the read-only mode of the device; defaults
to 'retain'

=back



B<Since:>
2.5

B<Examples:>
	
	1. Change a removable medium
	
	-> { "execute": "blockdev-change-medium",
	     "arguments": { "id": "ide0-1-0",
	                    "filename": "/srv/images/Fedora-12-x86_64-DVD.iso",
	                    "format": "raw" } }
	<- { "return": {} }
	
	2. Load a read-only medium into a writable drive
	
	-> { "execute": "blockdev-change-medium",
	     "arguments": { "id": "floppyA",
	                    "filename": "/srv/images/ro.img",
	                    "format": "raw",
	                    "read-only-mode": "retain" } }
	
	<- { "error":
	     { "class": "GenericError",
	       "desc": "Could not open '/srv/images/ro.img': Permission denied" } }
	
	-> { "execute": "blockdev-change-medium",
	     "arguments": { "id": "floppyA",
	                    "filename": "/srv/images/ro.img",
	                    "format": "raw",
	                    "read-only-mode": "read-only" } }
	
	<- { "return": {} }








B<BlockErrorAction> (Enum)


An enumeration of action that has been taken when a DISK I/O occurs

=over 4


=item C<'ignore'>

error has been ignored

=item C<'report'>

error has been reported to the device

=item C<'stop'>

error caused VM to be stopped

=back



B<Since:>
2.1






B<BLOCK_IMAGE_CORRUPTED>  (Event)
Emitted when a disk image is being marked corrupt. The image can be
identified by its device or node name. The 'device' field is always
present for compatibility reasons, but it can be empty ("") if the
image does not have a device name associated.

=over 4


=item C<'device'>

device name. This is always present for compatibility
reasons, but it can be empty ("") if the image does not
have a device name associated.

=item C<'node-name'> (optional)

 node name (Since: 2.4)

=item C<'msg'>

informative message for human consumption, such as the kind of
corruption being detected. It should not be parsed by machine as it is
not guaranteed to be stable

=item C<'offset'> (optional)

 if the corruption resulted from an image access, this is
the host's access offset into the image

=item C<'size'> (optional)

 if the corruption resulted from an image access, this is
the access size

=item C<'fatal'>

if set, the image is marked corrupt and therefore unusable after this
event and must be repaired (Since 2.2; before, every
BLOCK_IMAGE_CORRUPTED event was fatal)

=back



B<Note:>
If action is "stop", a STOP event will eventually follow the
BLOCK_IO_ERROR event.

B<Example:>
	
	<- { "event": "BLOCK_IMAGE_CORRUPTED",
	     "data": { "device": "ide0-hd0", "node-name": "node0",
	               "msg": "Prevented active L1 table overwrite", "offset": 196608,
	               "size": 65536 },
	     "timestamp": { "seconds": 1378126126, "microseconds": 966463 } }



B<Since:>
1.7






B<BLOCK_IO_ERROR>  (Event)
Emitted when a disk I/O error occurs

=over 4


=item C<'device'>

device name. This is always present for compatibility
reasons, but it can be empty ("") if the image does not
have a device name associated.

=item C<'node-name'>

node name. Note that errors may be reported for the root node
that is directly attached to a guest device rather than for the
node where the error occurred. (Since: 2.8)

=item C<'operation'>

I/O operation

=item C<'action'>

action that has been taken

=item C<'nospace'> (optional)

 true if I/O error was caused due to a no-space
condition. This key is only present if query-block's
io-status is present, please see query-block documentation
for more information (since: 2.2)

=item C<'reason'>

human readable string describing the error cause.
(This field is a debugging aid for humans, it should not
be parsed by applications) (since: 2.2)

=back



B<Note:>
If action is "stop", a STOP event will eventually follow the
BLOCK_IO_ERROR event

B<Since:>
0.13.0

B<Example:>
	
	<- { "event": "BLOCK_IO_ERROR",
	     "data": { "device": "ide0-hd1",
	               "node-name": "#block212",
	               "operation": "write",
	               "action": "stop" },
	     "timestamp": { "seconds": 1265044230, "microseconds": 450486 } }








B<BLOCK_JOB_COMPLETED>  (Event)
Emitted when a block job has completed

=over 4


=item C<'type'>

job type

=item C<'device'>

The job identifier. Originally the device name but other
values are allowed since QEMU 2.7

=item C<'len'>

maximum progress value

=item C<'offset'>

current progress value. On success this is equal to len.
On failure this is less than len

=item C<'speed'>

rate limit, bytes per second

=item C<'error'> (optional)

 error message. Only present on failure. This field
contains a human-readable error message. There are no semantics
other than that streaming has failed and clients should not try to
interpret the error string

=back



B<Since:>
1.1

B<Example:>
	
	<- { "event": "BLOCK_JOB_COMPLETED",
	     "data": { "type": "stream", "device": "virtio-disk0",
	               "len": 10737418240, "offset": 10737418240,
	               "speed": 0 },
	     "timestamp": { "seconds": 1267061043, "microseconds": 959568 } }








B<BLOCK_JOB_CANCELLED>  (Event)
Emitted when a block job has been cancelled

=over 4


=item C<'type'>

job type

=item C<'device'>

The job identifier. Originally the device name but other
values are allowed since QEMU 2.7

=item C<'len'>

maximum progress value

=item C<'offset'>

current progress value. On success this is equal to len.
On failure this is less than len

=item C<'speed'>

rate limit, bytes per second

=back



B<Since:>
1.1

B<Example:>
	
	<- { "event": "BLOCK_JOB_CANCELLED",
	     "data": { "type": "stream", "device": "virtio-disk0",
	               "len": 10737418240, "offset": 134217728,
	               "speed": 0 },
	     "timestamp": { "seconds": 1267061043, "microseconds": 959568 } }








B<BLOCK_JOB_ERROR>  (Event)
Emitted when a block job encounters an error

=over 4


=item C<'device'>

The job identifier. Originally the device name but other
values are allowed since QEMU 2.7

=item C<'operation'>

I/O operation

=item C<'action'>

action that has been taken

=back



B<Since:>
1.3

B<Example:>
	
	<- { "event": "BLOCK_JOB_ERROR",
	     "data": { "device": "ide0-hd1",
	               "operation": "write",
	               "action": "stop" },
	     "timestamp": { "seconds": 1265044230, "microseconds": 450486 } }








B<BLOCK_JOB_READY>  (Event)
Emitted when a block job is ready to complete

=over 4


=item C<'type'>

job type

=item C<'device'>

The job identifier. Originally the device name but other
values are allowed since QEMU 2.7

=item C<'len'>

maximum progress value

=item C<'offset'>

current progress value. On success this is equal to len.
On failure this is less than len

=item C<'speed'>

rate limit, bytes per second

=back



B<Note:>
The "ready to complete" status is always reset by a C<BLOCK_JOB_ERROR>
event

B<Since:>
1.3

B<Example:>
	
	<- { "event": "BLOCK_JOB_READY",
	     "data": { "device": "drive0", "type": "mirror", "speed": 0,
	               "len": 2097152, "offset": 2097152 }
	     "timestamp": { "seconds": 1265044230, "microseconds": 450486 } }








B<PreallocMode> (Enum)


Preallocation mode of QEMU image file

=over 4


=item C<'off'>

no preallocation

=item C<'metadata'>

preallocate only for metadata

=item C<'falloc'>

like C<full> preallocation but allocate disk space by
posix_fallocate() rather than writing zeros.

=item C<'full'>

preallocate all data by writing zeros to device to ensure disk
space is really available. C<full> preallocation also sets up
metadata correctly.

=back



B<Since:>
2.2






B<BLOCK_WRITE_THRESHOLD>  (Event)
Emitted when writes on block device reaches or exceeds the
configured write threshold. For thin-provisioned devices, this
means the device should be extended to avoid pausing for
disk exhaustion.
The event is one shot. Once triggered, it needs to be
re-registered with another block-set-threshold command.

=over 4


=item C<'node-name'>

graph node name on which the threshold was exceeded.

=item C<'amount-exceeded'>

amount of data which exceeded the threshold, in bytes.

=item C<'write-threshold'>

last configured threshold, in bytes.

=back



B<Since:>
2.3






B<block-set-write-threshold>  (Command)
Change the write threshold for a block drive. An event will be
delivered if a write to this block drive crosses the configured
threshold.  The threshold is an offset, thus must be
non-negative. Default is no write threshold. Setting the threshold
to zero disables it.

This is useful to transparently resize thin-provisioned drives without
the guest OS noticing.

=over 4


=item C<'node-name'>

graph node name on which the threshold must be set.

=item C<'write-threshold'>

configured threshold for the block device, bytes.
Use 0 to disable the threshold.

=back



B<Since:>
2.3

B<Example:>
	
	-> { "execute": "block-set-write-threshold",
	     "arguments": { "node-name": "mydev",
	                    "write-threshold": 17179869184 } }
	<- { "return": {} }








B<x-blockdev-change>  (Command)
Dynamically reconfigure the block driver state graph. It can be used
to add, remove, insert or replace a graph node. Currently only the
Quorum driver implements this feature to add or remove its child. This
is useful to fix a broken quorum child.

If C<node> is specified, it will be inserted under C<parent>. C<child>
may not be specified in this case. If both C<parent> and C<child> are
specified but C<node> is not, C<child> will be detached from C<parent>.

=over 4


=item C<'parent'>

the id or name of the parent node.

=item C<'child'> (optional)

 the name of a child under the given parent node.

=item C<'node'> (optional)

 the name of the node that will be added.

=back



B<Note:>
this command is experimental, and its API is not stable. It
does not support all kinds of operations, all kinds of children, nor
all block drivers.

Warning: The data in a new quorum child MUST be consistent with that of
the rest of the array.

B<Since:>
2.7

B<Example:>
	
	1. Add a new node to a quorum
	-> { "execute": "blockdev-add",
	     "arguments": {
	         "options": { "driver": "raw",
	                      "node-name": "new_node",
	                       "file": { "driver": "file",
	                                 "filename": "test.raw" } } } }
	<- { "return": {} }
	-> { "execute": "x-blockdev-change",
	     "arguments": { "parent": "disk1",
	                    "node": "new_node" } }
	<- { "return": {} }
	
	2. Delete a quorum's node
	-> { "execute": "x-blockdev-change",
	     "arguments": { "parent": "disk1",
	                    "child": "children.1" } }
	<- { "return": {} }







=head3 QAPI block definitions (vm unrelated)




B<BiosAtaTranslation> (Enum)


Policy that BIOS should use to interpret cylinder/head/sector
addresses.  Note that Bochs BIOS and SeaBIOS will not actually
translate logical CHS to physical; instead, they will use logical
block addressing.

=over 4


=item C<'auto'>

If cylinder/heads/sizes are passed, choose between none and LBA
depending on the size of the disk.  If they are not passed,
choose none if QEMU can guess that the disk had 16 or fewer
heads, large if QEMU can guess that the disk had 131072 or
fewer tracks across all heads (i.e. cylinders*headsE<lt>131072),
otherwise LBA.

=item C<'none'>

The physical disk geometry is equal to the logical geometry.

=item C<'lba'>

Assume 63 sectors per track and one of 16, 32, 64, 128 or 255
heads (if fewer than 255 are enough to cover the whole disk
with 1024 cylinders/head).  The number of cylinders/head is
then computed based on the number of sectors and heads.

=item C<'large'>

The number of cylinders per head is scaled down to 1024
by correspondingly scaling up the number of heads.

=item C<'rechs'>

Same as C<large>, but first convert a 16-head geometry to
15-head, by proportionally scaling up the number of
cylinders/head.

=back



B<Since:>
2.0






B<FloppyDriveType> (Enum)


Type of Floppy drive to be emulated by the Floppy Disk Controller.

=over 4


=item C<'144'>

1.44MB 3.5" drive

=item C<'288'>

2.88MB 3.5" drive

=item C<'120'>

1.2MB 5.25" drive

=item C<'none'>

No drive connected

=item C<'auto'>

Automatically determined by inserted media at boot

=back



B<Since:>
2.6






B<BlockdevSnapshotInternal> (Struct)




=over 4


=item C<'device'>

the device name or node-name of a root node to generate the snapshot
from

=item C<'name'>

the name of the internal snapshot to be created

=back



B<Notes:>
In transaction, if C<name> is empty, or any snapshot matching C<name>
exists, the operation will fail. Only some image formats support it,
for example, qcow2, rbd, and sheepdog.

B<Since:>
1.7






B<blockdev-snapshot-internal-sync>  (Command)
Synchronously take an internal snapshot of a block device, when the
format of the image used supports it. If the name is an empty
string, or a snapshot with name already exists, the operation will
fail.

For the arguments, see the documentation of BlockdevSnapshotInternal.


B<Returns:>
nothing on success

If C<device> is not a valid block device, GenericError

If any snapshot matching C<name> exists, or C<name> is empty,
GenericError

If the format of the image used does not support it,
BlockFormatFeatureNotSupported

B<Since:>
1.7

B<Example:>
	
	-> { "execute": "blockdev-snapshot-internal-sync",
	     "arguments": { "device": "ide-hd0",
	                    "name": "snapshot0" }
	   }
	<- { "return": {} }








B<blockdev-snapshot-delete-internal-sync>  (Command)
Synchronously delete an internal snapshot of a block device, when the format
of the image used support it. The snapshot is identified by name or id or
both. One of the name or id is required. Return SnapshotInfo for the
successfully deleted snapshot.

=over 4


=item C<'device'>

the device name or node-name of a root node to delete the snapshot
from

=item C<'id'> (optional)

optional the snapshot's ID to be deleted



=item C<'name'> (optional)

optional the snapshot's name to be deleted



=back



B<Returns:>
SnapshotInfo on success
If C<device> is not a valid block device, GenericError
If snapshot not found, GenericError
If the format of the image used does not support it,
BlockFormatFeatureNotSupported
If C<id> and C<name> are both not specified, GenericError

B<Since:>
1.7

B<Example:>
	
	-> { "execute": "blockdev-snapshot-delete-internal-sync",
	     "arguments": { "device": "ide-hd0",
	                    "name": "snapshot0" }
	   }
	<- { "return": {
	                   "id": "1",
	                   "name": "snapshot0",
	                   "vm-state-size": 0,
	                   "date-sec": 1000012,
	                   "date-nsec": 10,
	                   "vm-clock-sec": 100,
	                   "vm-clock-nsec": 20
	     }
	   }








B<eject>  (Command)
Ejects a device from a removable drive.

=over 4


=item C<'device'> (optional)

 Block device name (deprecated, use C<id> instead)

=item C<'id'> (optional)

 The name or QOM path of the guest device (since: 2.8)

=item C<'force'> (optional)

 If true, eject regardless of whether the drive is locked.
If not specified, the default value is false.

=back



B<Returns:>
Nothing on success

If C<device> is not a valid block device, DeviceNotFound

B<Notes:>
Ejecting a device with no media results in success

B<Since:>
0.14.0

B<Example:>
	
	-> { "execute": "eject", "arguments": { "device": "ide1-0-1" } }
	<- { "return": {} }








B<nbd-server-start>  (Command)
Start an NBD server listening on the given host and port.  Block
devices can then be exported using C<nbd-server-add>.  The NBD
server will present them as named exports; for example, another
QEMU instance could refer to them as "nbd:HOST:PORT:exportname=NAME".

=over 4


=item C<'addr'>

Address on which to listen.

=item C<'tls-creds'> (optional)

(optional) ID of the TLS credentials object. Since 2.6



=back



B<Returns:>
error if the server is already running.

B<Since:>
1.3.0






B<nbd-server-add>  (Command)
Export a block node to QEMU's embedded NBD server.

=over 4


=item C<'device'>

The device name or node name of the node to be exported

=item C<'writable'> (optional)

Whether clients should be able to write to the device via the
NBD connection (default false). 

=back



B<Returns:>
error if the device is already marked for export.

B<Since:>
1.3.0






B<nbd-server-stop>  (Command)
Stop QEMU's embedded NBD server, and unregister all devices previously
added via C<nbd-server-add>.


B<Since:>
1.3.0






B<DEVICE_TRAY_MOVED>  (Event)
Emitted whenever the tray of a removable device is moved by the guest or by
HMP/QMP commands

=over 4


=item C<'device'>

Block device name. This is always present for compatibility
reasons, but it can be empty ("") if the image does not
have a device name associated.

=item C<'id'>

The name or QOM path of the guest device (since 2.8)

=item C<'tray-open'>

true if the tray has been opened or false if it has been closed

=back



B<Since:>
1.1

B<Example:>
	
	<- { "event": "DEVICE_TRAY_MOVED",
	     "data": { "device": "ide1-cd0",
	               "id": "/machine/unattached/device[22]",
	               "tray-open": true
	     },
	     "timestamp": { "seconds": 1265044230, "microseconds": 450486 } }








B<QuorumOpType> (Enum)


An enumeration of the quorum operation types

=over 4


=item C<'read'>

read operation

=item C<'write'>

write operation

=item C<'flush'>

flush operation

=back



B<Since:>
2.6





=head2 Other events




B<SHUTDOWN>  (Event)
Emitted when the virtual machine has shut down, indicating that qemu is
about to exit.


B<Note:>
If the command-line option "-no-shutdown" has been specified, qemu will
not exit, and a STOP event will eventually follow the SHUTDOWN event

B<Since:>
0.12.0

B<Example:>
	
	<- { "event": "SHUTDOWN",
	     "timestamp": { "seconds": 1267040730, "microseconds": 682951 } }








B<POWERDOWN>  (Event)
Emitted when the virtual machine is powered down through the power control
system, such as via ACPI.


B<Since:>
0.12.0

B<Example:>
	
	<- { "event": "POWERDOWN",
	     "timestamp": { "seconds": 1267040730, "microseconds": 682951 } }








B<RESET>  (Event)
Emitted when the virtual machine is reset


B<Since:>
0.12.0

B<Example:>
	
	<- { "event": "RESET",
	     "timestamp": { "seconds": 1267041653, "microseconds": 9518 } }








B<STOP>  (Event)
Emitted when the virtual machine is stopped


B<Since:>
0.12.0

B<Example:>
	
	<- { "event": "STOP",
	     "timestamp": { "seconds": 1267041730, "microseconds": 281295 } }








B<RESUME>  (Event)
Emitted when the virtual machine resumes execution


B<Since:>
0.12.0

B<Example:>
	
	<- { "event": "RESUME",
	     "timestamp": { "seconds": 1271770767, "microseconds": 582542 } }








B<SUSPEND>  (Event)
Emitted when guest enters a hardware suspension state, for example, S3 state,
which is sometimes called standby state


B<Since:>
1.1

B<Example:>
	
	<- { "event": "SUSPEND",
	     "timestamp": { "seconds": 1344456160, "microseconds": 309119 } }








B<SUSPEND_DISK>  (Event)
Emitted when guest enters a hardware suspension state with data saved on
disk, for example, S4 state, which is sometimes called hibernate state


B<Note:>
QEMU shuts down (similar to event C<SHUTDOWN>) when entering this state

B<Since:>
1.2

B<Example:>
	
	<-   { "event": "SUSPEND_DISK",
	       "timestamp": { "seconds": 1344456160, "microseconds": 309119 } }








B<WAKEUP>  (Event)
Emitted when the guest has woken up from suspend state and is running


B<Since:>
1.1

B<Example:>
	
	<- { "event": "WAKEUP",
	     "timestamp": { "seconds": 1344522075, "microseconds": 745528 } }








B<RTC_CHANGE>  (Event)
Emitted when the guest changes the RTC time.

=over 4


=item C<'offset'>

offset between base RTC clock (as specified by -rtc base), and
new RTC clock value

=back



B<Note:>
This event is rate-limited.

B<Since:>
0.13.0

B<Example:>
	
	<-   { "event": "RTC_CHANGE",
	       "data": { "offset": 78 },
	       "timestamp": { "seconds": 1267020223, "microseconds": 435656 } }








B<WATCHDOG>  (Event)
Emitted when the watchdog device's timer is expired

=over 4


=item C<'action'>

action that has been taken

=back



B<Note:>
If action is "reset", "shutdown", or "pause" the WATCHDOG event is
followed respectively by the RESET, SHUTDOWN, or STOP events

B<Note:>
This event is rate-limited.

B<Since:>
0.13.0

B<Example:>
	
	<- { "event": "WATCHDOG",
	     "data": { "action": "reset" },
	     "timestamp": { "seconds": 1267061043, "microseconds": 959568 } }








B<DEVICE_DELETED>  (Event)
Emitted whenever the device removal completion is acknowledged by the guest.
At this point, it's safe to reuse the specified device ID. Device removal can
be initiated by the guest or by HMP/QMP commands.

=over 4


=item C<'device'> (optional)

 device name

=item C<'path'>

device path

=back



B<Since:>
1.5

B<Example:>
	
	<- { "event": "DEVICE_DELETED",
	     "data": { "device": "virtio-net-pci-0",
	               "path": "/machine/peripheral/virtio-net-pci-0" },
	     "timestamp": { "seconds": 1265044230, "microseconds": 450486 } }








B<NIC_RX_FILTER_CHANGED>  (Event)
Emitted once until the 'query-rx-filter' command is executed, the first event
will always be emitted

=over 4


=item C<'name'> (optional)

 net client name

=item C<'path'>

device path

=back



B<Since:>
1.6

B<Example:>
	
	<- { "event": "NIC_RX_FILTER_CHANGED",
	     "data": { "name": "vnet0",
	               "path": "/machine/peripheral/vnet0/virtio-backend" },
	     "timestamp": { "seconds": 1368697518, "microseconds": 326866 } }
	   }








B<VNC_CONNECTED>  (Event)
Emitted when a VNC client establishes a connection

=over 4


=item C<'server'>

server information

=item C<'client'>

client information

=back



B<Note:>
This event is emitted before any authentication takes place, thus
the authentication ID is not provided

B<Since:>
0.13.0

B<Example:>
	
	<- { "event": "VNC_CONNECTED",
	     "data": {
	           "server": { "auth": "sasl", "family": "ipv4",
	                       "service": "5901", "host": "0.0.0.0" },
	           "client": { "family": "ipv4", "service": "58425",
	                       "host": "127.0.0.1" } },
	     "timestamp": { "seconds": 1262976601, "microseconds": 975795 } }








B<VNC_INITIALIZED>  (Event)
Emitted after authentication takes place (if any) and the VNC session is
made active

=over 4


=item C<'server'>

server information

=item C<'client'>

client information

=back



B<Since:>
0.13.0

B<Example:>
	
	<-  { "event": "VNC_INITIALIZED",
	      "data": {
	           "server": { "auth": "sasl", "family": "ipv4",
	                       "service": "5901", "host": "0.0.0.0"},
	           "client": { "family": "ipv4", "service": "46089",
	                       "host": "127.0.0.1", "sasl_username": "luiz" } },
	      "timestamp": { "seconds": 1263475302, "microseconds": 150772 } }








B<VNC_DISCONNECTED>  (Event)
Emitted when the connection is closed

=over 4


=item C<'server'>

server information

=item C<'client'>

client information

=back



B<Since:>
0.13.0

B<Example:>
	
	<- { "event": "VNC_DISCONNECTED",
	     "data": {
	           "server": { "auth": "sasl", "family": "ipv4",
	                       "service": "5901", "host": "0.0.0.0" },
	           "client": { "family": "ipv4", "service": "58425",
	                       "host": "127.0.0.1", "sasl_username": "luiz" } },
	     "timestamp": { "seconds": 1262976601, "microseconds": 975795 } }








B<SPICE_CONNECTED>  (Event)
Emitted when a SPICE client establishes a connection

=over 4


=item C<'server'>

server information

=item C<'client'>

client information

=back



B<Since:>
0.14.0

B<Example:>
	
	<- { "timestamp": {"seconds": 1290688046, "microseconds": 388707},
	     "event": "SPICE_CONNECTED",
	     "data": {
	       "server": { "port": "5920", "family": "ipv4", "host": "127.0.0.1"},
	       "client": {"port": "52873", "family": "ipv4", "host": "127.0.0.1"}
	   }}








B<SPICE_INITIALIZED>  (Event)
Emitted after initial handshake and authentication takes place (if any)
and the SPICE channel is up and running

=over 4


=item C<'server'>

server information

=item C<'client'>

client information

=back



B<Since:>
0.14.0

B<Example:>
	
	<- { "timestamp": {"seconds": 1290688046, "microseconds": 417172},
	     "event": "SPICE_INITIALIZED",
	     "data": {"server": {"auth": "spice", "port": "5921",
	                         "family": "ipv4", "host": "127.0.0.1"},
	              "client": {"port": "49004", "family": "ipv4", "channel-type": 3,
	                         "connection-id": 1804289383, "host": "127.0.0.1",
	                         "channel-id": 0, "tls": true}
	   }}








B<SPICE_DISCONNECTED>  (Event)
Emitted when the SPICE connection is closed

=over 4


=item C<'server'>

server information

=item C<'client'>

client information

=back



B<Since:>
0.14.0

B<Example:>
	
	<- { "timestamp": {"seconds": 1290688046, "microseconds": 388707},
	     "event": "SPICE_DISCONNECTED",
	     "data": {
	       "server": { "port": "5920", "family": "ipv4", "host": "127.0.0.1"},
	       "client": {"port": "52873", "family": "ipv4", "host": "127.0.0.1"}
	   }}








B<SPICE_MIGRATE_COMPLETED>  (Event)
Emitted when SPICE migration has completed


B<Since:>
1.3

B<Example:>
	
	<- { "timestamp": {"seconds": 1290688046, "microseconds": 417172},
	     "event": "SPICE_MIGRATE_COMPLETED" }








B<MIGRATION>  (Event)
Emitted when a migration event happens

=over 4


=item C<'status'>

C<MigrationStatus> describing the current migration status.

=back



B<Since:>
2.4

B<Example:>
	
	<- {"timestamp": {"seconds": 1432121972, "microseconds": 744001},
	    "event": "MIGRATION",
	    "data": {"status": "completed"} }








B<MIGRATION_PASS>  (Event)
Emitted from the source side of a migration at the start of each pass
(when it syncs the dirty bitmap)

=over 4


=item C<'pass'>

An incrementing count (starting at 1 on the first pass)

=back



B<Since:>
2.6

B<Example:>
	
	{ "timestamp": {"seconds": 1449669631, "microseconds": 239225},
	  "event": "MIGRATION_PASS", "data": {"pass": 2} }








B<ACPI_DEVICE_OST>  (Event)
Emitted when guest executes ACPI _OST method.

=over 4


=item C<'info'>

ACPIOSTInfo type as described in qapi-schema.json

=back



B<Since:>
2.1

B<Example:>
	
	<- { "event": "ACPI_DEVICE_OST",
	     "data": { "device": "d1", "slot": "0",
	               "slot-type": "DIMM", "source": 1, "status": 0 } }








B<BALLOON_CHANGE>  (Event)
Emitted when the guest changes the actual BALLOON level. This value is
equivalent to the C<actual> field return by the 'query-balloon' command

=over 4


=item C<'actual'>

actual level of the guest memory balloon in bytes

=back



B<Note:>
this event is rate-limited.

B<Since:>
1.2

B<Example:>
	
	<- { "event": "BALLOON_CHANGE",
	     "data": { "actual": 944766976 },
	     "timestamp": { "seconds": 1267020223, "microseconds": 435656 } }








B<GUEST_PANICKED>  (Event)
Emitted when guest OS panic is detected

=over 4


=item C<'action'>

action that has been taken, currently always "pause"

=item C<'info'> (optional)

optional information about a panic



=back



B<Since:>
1.5 (C<info> since 2.9)

B<Example:>
	
	<- { "event": "GUEST_PANICKED",
	     "data": { "action": "pause" } }








B<QUORUM_FAILURE>  (Event)
Emitted by the Quorum block driver if it fails to establish a quorum

=over 4


=item C<'reference'>

device name if defined else node name

=item C<'sector-num'>

number of the first sector of the failed read operation

=item C<'sectors-count'>

failed read operation sector count

=back



B<Note:>
This event is rate-limited.

B<Since:>
2.0

B<Example:>
	
	<- { "event": "QUORUM_FAILURE",
	     "data": { "reference": "usr1", "sector-num": 345435, "sectors-count": 5 },
	     "timestamp": { "seconds": 1344522075, "microseconds": 745528 } }








B<QUORUM_REPORT_BAD>  (Event)
Emitted to report a corruption of a Quorum file

=over 4


=item C<'type'>

quorum operation type (Since 2.6)

=item C<'error'> (optional)

 error message. Only present on failure. This field
contains a human-readable error message. There are no semantics other
than that the block layer reported an error and clients should not
try to interpret the error string.

=item C<'node-name'>

the graph node name of the block driver state

=item C<'sector-num'>

number of the first sector of the failed read operation

=item C<'sectors-count'>

failed read operation sector count

=back



B<Note:>
This event is rate-limited.

B<Since:>
2.0

B<Example:>
	
	1. Read operation
	
	{ "event": "QUORUM_REPORT_BAD",
	     "data": { "node-name": "node0", "sector-num": 345435, "sectors-count": 5,
	               "type": "read" },
	     "timestamp": { "seconds": 1344522075, "microseconds": 745528 } }
	
	2. Flush operation
	
	{ "event": "QUORUM_REPORT_BAD",
	     "data": { "node-name": "node0", "sector-num": 0, "sectors-count": 2097120,
	               "type": "flush", "error": "Broken pipe" },
	     "timestamp": { "seconds": 1456406829, "microseconds": 291763 } }








B<VSERPORT_CHANGE>  (Event)
Emitted when the guest opens or closes a virtio-serial port.

=over 4


=item C<'id'>

device identifier of the virtio-serial port

=item C<'open'>

true if the guest has opened the virtio-serial port

=back



B<Since:>
2.1

B<Example:>
	
	<- { "event": "VSERPORT_CHANGE",
	     "data": { "id": "channel0", "open": true },
	     "timestamp": { "seconds": 1401385907, "microseconds": 422329 } }








B<MEM_UNPLUG_ERROR>  (Event)
Emitted when memory hot unplug error occurs.

=over 4


=item C<'device'>

device name

=item C<'msg'>

Informative message

=back



B<Since:>
2.4

B<Example:>
	
	<- { "event": "MEM_UNPLUG_ERROR"
	     "data": { "device": "dimm1",
	               "msg": "acpi: device unplug for unsupported device"
	     },
	     "timestamp": { "seconds": 1265044230, "microseconds": 450486 } }








B<DUMP_COMPLETED>  (Event)
Emitted when background dump has completed

=over 4


=item C<'result'>

DumpQueryResult type described in qapi-schema.json.

=item C<'error'> (optional)

 human-readable error string that provides
hint on why dump failed. Only presents on failure. The
user should not try to interpret the error string.

=back



B<Since:>
2.6

B<Example:>
	
	{ "event": "DUMP_COMPLETED",
	  "data": {"result": {"total": 1090650112, "status": "completed",
	                      "completed": 1090650112} } }







=head2 Tracing commands




B<TraceEventState> (Enum)


State of a tracing event.

=over 4


=item C<'unavailable'>

The event is statically disabled.

=item C<'disabled'>

The event is dynamically disabled.

=item C<'enabled'>

The event is dynamically enabled.

=back



B<Since:>
2.2






B<TraceEventInfo> (Struct)


Information of a tracing event.

=over 4


=item C<'name'>

Event name.

=item C<'state'>

Tracing state.

=item C<'vcpu'>

Whether this is a per-vCPU event (since 2.7).

=back

An event is per-vCPU if it has the "vcpu" property in the "trace-events"
files.

B<Since:>
2.2






B<trace-event-get-state>  (Command)
Query the state of events.

=over 4


=item C<'name'>

Event name pattern (case-sensitive glob).

=item C<'vcpu'> (optional)

 The vCPU to query (any by default; since 2.7).

=back



B<Returns:>
a list of C<TraceEventInfo> for the matching events

An event is returned if:

=over 4


=item -

its name matches the C<name> pattern, and

=item -

if C<vcpu> is given, the event has the "vcpu" property.


=back


Therefore, if C<vcpu> is given, the operation will only match per-vCPU events,
returning their state on the specified vCPU. Special case: if C<name> is an
exact match, C<vcpu> is given and the event does not have the "vcpu" property,
an error is returned.

B<Since:>
2.2

B<Example:>
	
	-> { "execute": "trace-event-get-state",
	     "arguments": { "name": "qemu_memalign" } }
	<- { "return": [ { "name": "qemu_memalign", "state": "disabled" } ] }








B<trace-event-set-state>  (Command)
Set the dynamic tracing state of events.

=over 4


=item C<'name'>

Event name pattern (case-sensitive glob).

=item C<'enable'>

Whether to enable tracing.

=item C<'ignore-unavailable'> (optional)

 Do not match unavailable events with C<name>.

=item C<'vcpu'> (optional)

 The vCPU to act upon (all by default; since 2.7).

=back

An event's state is modified if:

=over 4


=item -

its name matches the C<name> pattern, and

=item -

if C<vcpu> is given, the event has the "vcpu" property.


=back


Therefore, if C<vcpu> is given, the operation will only match per-vCPU events,
setting their state on the specified vCPU. Special case: if C<name> is an exact
match, C<vcpu> is given and the event does not have the "vcpu" property, an
error is returned.

B<Since:>
2.2

B<Example:>
	
	-> { "execute": "trace-event-set-state",
	     "arguments": { "name": "qemu_memalign", "enable": "true" } }
	<- { "return": {} }








B<query-qmp-schema>  (Command)
Command query-qmp-schema exposes the QMP wire ABI as an array of
SchemaInfo.  This lets QMP clients figure out what commands and
events are available in this QEMU, and their parameters and results.

However, the SchemaInfo can't reflect all the rules and restrictions
that apply to QMP.  It's interface introspection (figuring out
what's there), not interface specification.  The specification is in
the QAPI schema.

Furthermore, while we strive to keep the QMP wire format
backwards-compatible across qemu versions, the introspection output
is not guaranteed to have the same stability.  For example, one
version of qemu may list an object member as an optional
non-variant, while another lists the same member only through the
object's variants; or the type of a member may change from a generic
string into a specific enum or from one specific type into an
alternate that includes the original type alongside something else.


B<Returns:>
array of C<SchemaInfo>, where each element describes an
entity in the ABI: command, event, type, ...

The order of the various SchemaInfo is unspecified; however, all
names are guaranteed to be unique (no name will be duplicated with
different meta-types).

B<Note:>
the QAPI schema is also used to help define I<internal>
interfaces, by defining QAPI types.  These are not part of the QMP
wire ABI, and therefore not returned by this command.

B<Since:>
2.5






B<SchemaMetaType> (Enum)


This is a C<SchemaInfo>'s meta type, i.e. the kind of entity it
describes.

=over 4


=item C<'builtin'>

a predefined type such as 'int' or 'bool'.

=item C<'enum'>

an enumeration type

=item C<'array'>

an array type

=item C<'object'>

an object type (struct or union)

=item C<'alternate'>

an alternate type

=item C<'command'>

a QMP command

=item C<'event'>

a QMP event

=back



B<Since:>
2.5






B<Union> (Flat)




=over 4


=item C<'name'>

the entity's name, inherited from C<base>.
The SchemaInfo is always referenced by this name.
Commands and events have the name defined in the QAPI schema.
Unlike command and event names, type names are not part of
the wire ABI.  Consequently, type names are meaningless
strings here, although they are still guaranteed unique
regardless of C<meta-type>.

=item C<'meta-type'>

the entity's meta type, inherited from C<base>.

=back

Additional members depend on the value of C<meta-type>.

B<Since:>
2.5






B<SchemaInfoBuiltin> (Struct)


Additional SchemaInfo members for meta-type 'builtin'.

=over 4


=item C<'json-type'>

the JSON type used for this type on the wire.

=back



B<Since:>
2.5






B<JSONType> (Enum)


The four primitive and two structured types according to RFC 7159
section 1, plus 'int' (split off 'number'), plus the obvious top
type 'value'.

=over 4


=item C<'string'>



=item C<'number'>



=item C<'int'>



=item C<'boolean'>



=item C<'null'>



=item C<'object'>



=item C<'array'>



=item C<'value'>



=back



B<Since:>
2.5






B<SchemaInfoEnum> (Struct)


Additional SchemaInfo members for meta-type 'enum'.

=over 4


=item C<'values'>

the enumeration type's values, in no particular order.

=back

Values of this type are JSON string on the wire.

B<Since:>
2.5






B<SchemaInfoArray> (Struct)


Additional SchemaInfo members for meta-type 'array'.

=over 4


=item C<'element-type'>

the array type's element type.

=back

Values of this type are JSON array on the wire.

B<Since:>
2.5






B<SchemaInfoObject> (Struct)


Additional SchemaInfo members for meta-type 'object'.

=over 4


=item C<'members'>

the object type's (non-variant) members, in no particular order.

=item C<'tag'> (optional)

 the name of the member serving as type tag.
An element of C<members> with this name must exist.

=item C<'variants'> (optional)

 variant members, i.e. additional members that
depend on the type tag's value.  Present exactly when
C<tag> is present.  The variants are in no particular order,
and may even differ from the order of the values of the
enum type of the C<tag>.

=back

Values of this type are JSON object on the wire.

B<Since:>
2.5






B<SchemaInfoObjectMember> (Struct)


An object member.

=over 4


=item C<'name'>

the member's name, as defined in the QAPI schema.

=item C<'type'>

the name of the member's type.

=item C<'default'> (optional)

 default when used as command parameter.
If absent, the parameter is mandatory.
If present, the value must be null.  The parameter is
optional, and behavior when it's missing is not specified
here.
Future extension: if present and non-null, the parameter
is optional, and defaults to this value.

=back



B<Since:>
2.5






B<SchemaInfoObjectVariant> (Struct)


The variant members for a value of the type tag.

=over 4


=item C<'case'>

a value of the type tag.

=item C<'type'>

the name of the object type that provides the variant members
when the type tag has value C<case>.

=back



B<Since:>
2.5






B<SchemaInfoAlternate> (Struct)


Additional SchemaInfo members for meta-type 'alternate'.

=over 4


=item C<'members'>

the alternate type's members, in no particular order.
The members' wire encoding is distinct, see
docs/qapi-code-gen.txt section Alternate types.

=back

On the wire, this can be any of the members.

B<Since:>
2.5






B<SchemaInfoAlternateMember> (Struct)


An alternate member.

=over 4


=item C<'type'>

the name of the member's type.

=back



B<Since:>
2.5






B<SchemaInfoCommand> (Struct)


Additional SchemaInfo members for meta-type 'command'.

=over 4


=item C<'arg-type'>

the name of the object type that provides the command's
parameters.

=item C<'ret-type'>

the name of the command's result type.

=back



B<TODO:>
C<success-response> (currently irrelevant, because it's QGA, not QMP)

B<Since:>
2.5






B<SchemaInfoEvent> (Struct)


Additional SchemaInfo members for meta-type 'event'.

=over 4


=item C<'arg-type'>

the name of the object type that provides the event's
parameters.

=back



B<Since:>
2.5





=head2 QMP commands




B<qmp_capabilities>  (Command)
Enable QMP capabilities.

Arguments: None.


B<Example:>
	
	-> { "execute": "qmp_capabilities" }
	<- { "return": {} }



B<Notes:>
This command is valid exactly when first connecting: it must be
issued before any other command will be accepted, and will fail once the
monitor is accepting other commands. (see qemu docs/qmp-spec.txt)

B<Since:>
0.13






B<LostTickPolicy> (Enum)


Policy for handling lost ticks in timer devices.

=over 4


=item C<'discard'>

throw away the missed tick(s) and continue with future injection
normally.  Guest time may be delayed, unless the OS has explicit
handling of lost ticks

=item C<'delay'>

continue to deliver ticks at the normal rate.  Guest time will be
delayed due to the late tick

=item C<'merge'>

merge the missed tick(s) into one tick and inject.  Guest time
may be delayed, depending on how the OS reacts to the merging
of ticks

=item C<'slew'>

deliver ticks at a higher rate to catch up with the missed tick. The
guest time should not be delayed once catchup is complete.

=back



B<Since:>
2.0






B<add_client>  (Command)
Allow client connections for VNC, Spice and socket based
character devices to be passed in to QEMU via SCM_RIGHTS.

=over 4


=item C<'protocol'>

protocol name. Valid names are "vnc", "spice" or the
name of a character device (eg. from -chardev id=XXXX)

=item C<'fdname'>

file descriptor name previously passed via 'getfd' command

=item C<'skipauth'> (optional)

 whether to skip authentication. Only applies
to "vnc" and "spice" protocols

=item C<'tls'> (optional)

 whether to perform TLS. Only applies to the "spice"
protocol

=back



B<Returns:>
nothing on success.

B<Since:>
0.14.0

B<Example:>
	
	-> { "execute": "add_client", "arguments": { "protocol": "vnc",
	                                             "fdname": "myclient" } }
	<- { "return": {} }








B<NameInfo> (Struct)


Guest name information.

=over 4


=item C<'name'> (optional)

 The name of the guest

=back



B<Since:>
0.14.0






B<query-name>  (Command)
Return the name information of a guest.


B<Returns:>
C<NameInfo> of the guest

B<Since:>
0.14.0

B<Example:>
	
	-> { "execute": "query-name" }
	<- { "return": { "name": "qemu-name" } }








B<KvmInfo> (Struct)


Information about support for KVM acceleration

=over 4


=item C<'enabled'>

true if KVM acceleration is active

=item C<'present'>

true if KVM acceleration is built into this executable

=back



B<Since:>
0.14.0






B<query-kvm>  (Command)
Returns information about KVM acceleration


B<Returns:>
C<KvmInfo>

B<Since:>
0.14.0

B<Example:>
	
	-> { "execute": "query-kvm" }
	<- { "return": { "enabled": true, "present": true } }








B<RunState> (Enum)


An enumeration of VM run states.

=over 4


=item C<'debug'>

QEMU is running on a debugger

=item C<'finish-migrate'>

guest is paused to finish the migration process

=item C<'inmigrate'>

guest is paused waiting for an incoming migration.  Note
that this state does not tell whether the machine will start at the
end of the migration.  This depends on the command-line -S option and
any invocation of 'stop' or 'cont' that has happened since QEMU was
started.

=item C<'internal-error'>

An internal error that prevents further guest execution
has occurred

=item C<'io-error'>

the last IOP has failed and the device is configured to pause
on I/O errors

=item C<'paused'>

guest has been paused via the 'stop' command

=item C<'postmigrate'>

guest is paused following a successful 'migrate'

=item C<'prelaunch'>

QEMU was started with -S and guest has not started

=item C<'restore-vm'>

guest is paused to restore VM state

=item C<'running'>

guest is actively running

=item C<'save-vm'>

guest is paused to save the VM state

=item C<'shutdown'>

guest is shut down (and -no-shutdown is in use)

=item C<'suspended'>

guest is suspended (ACPI S3)

=item C<'watchdog'>

the watchdog action is configured to pause and has been triggered

=item C<'guest-panicked'>

guest has been panicked as a result of guest OS panic

=item C<'colo'>

guest is paused to save/restore VM state under colo checkpoint,
VM can not get into this state unless colo capability is enabled
for migration. (since 2.8)

=back








B<StatusInfo> (Struct)


Information about VCPU run state

=over 4


=item C<'running'>

true if all VCPUs are runnable, false if not runnable

=item C<'singlestep'>

true if VCPUs are in single-step mode

=item C<'status'>

the virtual machine C<RunState>

=back



B<Since:>
0.14.0

B<Notes:>
C<singlestep> is enabled through the GDB stub






B<query-status>  (Command)
Query the run status of all VCPUs


B<Returns:>
C<StatusInfo> reflecting all VCPUs

B<Since:>
0.14.0

B<Example:>
	
	-> { "execute": "query-status" }
	<- { "return": { "running": true,
	                 "singlestep": false,
	                 "status": "running" } }








B<UuidInfo> (Struct)


Guest UUID information (Universally Unique Identifier).

=over 4


=item C<'UUID'>

the UUID of the guest

=back



B<Since:>
0.14.0

B<Notes:>
If no UUID was specified for the guest, a null UUID is returned.






B<query-uuid>  (Command)
Query the guest UUID information.


B<Returns:>
The C<UuidInfo> for the guest

B<Since:>
0.14.0

B<Example:>
	
	-> { "execute": "query-uuid" }
	<- { "return": { "UUID": "550e8400-e29b-41d4-a716-446655440000" } }








B<ChardevInfo> (Struct)


Information about a character device.

=over 4


=item C<'label'>

the label of the character device

=item C<'filename'>

the filename of the character device

=item C<'frontend-open'>

shows whether the frontend device attached to this backend
(eg. with the chardev=... option) is in open or closed state
(since 2.1)

=back



B<Notes:>
C<filename> is encoded using the QEMU command line character device
encoding.  See the QEMU man page for details.

B<Since:>
0.14.0






B<query-chardev>  (Command)
Returns information about current character devices.


B<Returns:>
a list of C<ChardevInfo>

B<Since:>
0.14.0

B<Example:>
	
	-> { "execute": "query-chardev" }
	<- {
	      "return": [
	         {
	            "label": "charchannel0",
	            "filename": "unix:/var/lib/libvirt/qemu/seabios.rhel6.agent,server",
	            "frontend-open": false
	         },
	         {
	            "label": "charmonitor",
	            "filename": "unix:/var/lib/libvirt/qemu/seabios.rhel6.monitor,server",
	            "frontend-open": true
	         },
	         {
	            "label": "charserial0",
	            "filename": "pty:/dev/pts/2",
	            "frontend-open": true
	         }
	      ]
	   }








B<ChardevBackendInfo> (Struct)


Information about a character device backend

=over 4


=item C<'name'>

The backend name

=back



B<Since:>
2.0






B<query-chardev-backends>  (Command)
Returns information about character device backends.


B<Returns:>
a list of C<ChardevBackendInfo>

B<Since:>
2.0

B<Example:>
	
	-> { "execute": "query-chardev-backends" }
	<- {
	      "return":[
	         {
	            "name":"udp"
	         },
	         {
	            "name":"tcp"
	         },
	         {
	            "name":"unix"
	         },
	         {
	            "name":"spiceport"
	         }
	      ]
	   }








B<DataFormat> (Enum)


An enumeration of data format.

=over 4


=item C<'utf8'>

Data is a UTF-8 string (RFC 3629)

=item C<'base64'>

Data is Base64 encoded binary (RFC 3548)

=back



B<Since:>
1.4






B<ringbuf-write>  (Command)
Write to a ring buffer character device.

=over 4


=item C<'device'>

the ring buffer character device name

=item C<'data'>

data to write

=item C<'format'> (optional)

 data encoding (default 'utf8').

=over 4


=item -

base64: data must be base64 encoded text.  Its binary
decoding gets written.

=item -

utf8: data's UTF-8 encoding is written

=item -

data itself is always Unicode regardless of format, like
any other string.

=back



=back



B<Returns:>
Nothing on success

B<Since:>
1.4

B<Example:>
	
	-> { "execute": "ringbuf-write",
	     "arguments": { "device": "foo",
	                    "data": "abcdefgh",
	                    "format": "utf8" } }
	<- { "return": {} }








B<ringbuf-read>  (Command)
Read from a ring buffer character device.

=over 4


=item C<'device'>

the ring buffer character device name

=item C<'size'>

how many bytes to read at most

=item C<'format'> (optional)

 data encoding (default 'utf8').

=over 4


=item -

base64: the data read is returned in base64 encoding.

=item -

utf8: the data read is interpreted as UTF-8.
Bug: can screw up when the buffer contains invalid UTF-8
sequences, NUL characters, after the ring buffer lost
data, and when reading stops because the size limit is
reached.

=item -

The return value is always Unicode regardless of format,
like any other string.

=back



=back



B<Returns:>
data read from the device

B<Since:>
1.4

B<Example:>
	
	-> { "execute": "ringbuf-read",
	     "arguments": { "device": "foo",
	                    "size": 1000,
	                    "format": "utf8" } }
	<- { "return": "abcdefgh" }








B<EventInfo> (Struct)


Information about a QMP event

=over 4


=item C<'name'>

The event name

=back



B<Since:>
1.2.0






B<query-events>  (Command)
Return a list of supported QMP events by this server


B<Returns:>
A list of C<EventInfo> for all supported events

B<Since:>
1.2.0

B<Example:>
	
	-> { "execute": "query-events" }
	<- {
	     "return": [
	         {
	            "name":"SHUTDOWN"
	         },
	         {
	            "name":"RESET"
	         }
	      ]
	   }



B<Note:>
This example has been shortened as the real response is too long.






B<MigrationStats> (Struct)


Detailed migration status.

=over 4


=item C<'transferred'>

amount of bytes already transferred to the target VM

=item C<'remaining'>

amount of bytes remaining to be transferred to the target VM

=item C<'total'>

total amount of bytes involved in the migration process

=item C<'duplicate'>

number of duplicate (zero) pages (since 1.2)

=item C<'skipped'>

number of skipped zero pages (since 1.5)

=item C<'normal'>

number of normal pages (since 1.2)

=item C<'normal-bytes'>

number of normal bytes sent (since 1.2)

=item C<'dirty-pages-rate'>

number of pages dirtied by second by the
guest (since 1.3)

=item C<'mbps'>

throughput in megabits/sec. (since 1.6)

=item C<'dirty-sync-count'>

number of times that dirty ram was synchronized (since 2.1)

=item C<'postcopy-requests'>

The number of page requests received from the destination
(since 2.7)

=back



B<Since:>
0.14.0






B<XBZRLECacheStats> (Struct)


Detailed XBZRLE migration cache statistics

=over 4


=item C<'cache-size'>

XBZRLE cache size

=item C<'bytes'>

amount of bytes already transferred to the target VM

=item C<'pages'>

amount of pages transferred to the target VM

=item C<'cache-miss'>

number of cache miss

=item C<'cache-miss-rate'>

rate of cache miss (since 2.1)

=item C<'overflow'>

number of overflows

=back



B<Since:>
1.2






B<MigrationStatus> (Enum)


An enumeration of migration status.

=over 4


=item C<'none'>

no migration has ever happened.

=item C<'setup'>

migration process has been initiated.

=item C<'cancelling'>

in the process of cancelling migration.

=item C<'cancelled'>

cancelling migration is finished.

=item C<'active'>

in the process of doing migration.

=item C<'postcopy-active'>

like active, but now in postcopy mode. (since 2.5)

=item C<'completed'>

migration is finished.

=item C<'failed'>

some error occurred during migration process.

=item C<'colo'>

VM is in the process of fault tolerance, VM can not get into this
state unless colo capability is enabled for migration. (since 2.8)

=back



B<Since:>
2.3






B<MigrationInfo> (Struct)


Information about current migration process.

=over 4


=item C<'status'> (optional)

 C<MigrationStatus> describing the current migration status.
If this field is not returned, no migration process
has been initiated

=item C<'ram'> (optional)

 C<MigrationStats> containing detailed migration
status, only returned if status is 'active' or
'completed'(since 1.2)

=item C<'disk'> (optional)

 C<MigrationStats> containing detailed disk migration
status, only returned if status is 'active' and it is a block
migration

=item C<'xbzrle-cache'> (optional)

 C<XBZRLECacheStats> containing detailed XBZRLE
migration statistics, only returned if XBZRLE feature is on and
status is 'active' or 'completed' (since 1.2)

=item C<'total-time'> (optional)

 total amount of milliseconds since migration started.
If migration has ended, it returns the total migration
time. (since 1.2)

=item C<'downtime'> (optional)

 only present when migration finishes correctly
total downtime in milliseconds for the guest.
(since 1.3)

=item C<'expected-downtime'> (optional)

 only present while migration is active
expected downtime in milliseconds for the guest in last walk
of the dirty bitmap. (since 1.3)

=item C<'setup-time'> (optional)

 amount of setup time in milliseconds  I<before>  the
iterations begin but  I<after>  the QMP command is issued. This is designed
to provide an accounting of any activities (such as RDMA pinning) which
may be expensive, but do not actually occur during the iterative
migration rounds themselves. (since 1.6)

=item C<'cpu-throttle-percentage'> (optional)

 percentage of time guest cpus are being
throttled during auto-converge. This is only present when auto-converge
has started throttling guest cpus. (Since 2.7)

=item C<'error-desc'> (optional)

 the human readable error description string, when
C<status> is 'failed'. Clients should not attempt to parse the
error strings. (Since 2.7)

=back



B<Since:>
0.14.0






B<query-migrate>  (Command)
Returns information about current migration process. If migration
is active there will be another json-object with RAM migration
status and if block migration is active another one with block
migration status.


B<Returns:>
C<MigrationInfo>

B<Since:>
0.14.0

B<Example:>
	
	1. Before the first migration
	
	-> { "execute": "query-migrate" }
	<- { "return": {} }
	
	2. Migration is done and has succeeded
	
	-> { "execute": "query-migrate" }
	<- { "return": {
	        "status": "completed",
	        "ram":{
	          "transferred":123,
	          "remaining":123,
	          "total":246,
	          "total-time":12345,
	          "setup-time":12345,
	          "downtime":12345,
	          "duplicate":123,
	          "normal":123,
	          "normal-bytes":123456,
	          "dirty-sync-count":15
	        }
	     }
	   }
	
	3. Migration is done and has failed
	
	-> { "execute": "query-migrate" }
	<- { "return": { "status": "failed" } }
	
	4. Migration is being performed and is not a block migration:
	
	-> { "execute": "query-migrate" }
	<- {
	      "return":{
	         "status":"active",
	         "ram":{
	            "transferred":123,
	            "remaining":123,
	            "total":246,
	            "total-time":12345,
	            "setup-time":12345,
	            "expected-downtime":12345,
	            "duplicate":123,
	            "normal":123,
	            "normal-bytes":123456,
	            "dirty-sync-count":15
	         }
	      }
	   }
	
	5. Migration is being performed and is a block migration:
	
	-> { "execute": "query-migrate" }
	<- {
	      "return":{
	         "status":"active",
	         "ram":{
	            "total":1057024,
	            "remaining":1053304,
	            "transferred":3720,
	            "total-time":12345,
	            "setup-time":12345,
	            "expected-downtime":12345,
	            "duplicate":123,
	            "normal":123,
	            "normal-bytes":123456,
	            "dirty-sync-count":15
	         },
	         "disk":{
	            "total":20971520,
	            "remaining":20880384,
	            "transferred":91136
	         }
	      }
	   }
	
	6. Migration is being performed and XBZRLE is active:
	
	-> { "execute": "query-migrate" }
	<- {
	      "return":{
	         "status":"active",
	         "capabilities" : [ { "capability": "xbzrle", "state" : true } ],
	         "ram":{
	            "total":1057024,
	            "remaining":1053304,
	            "transferred":3720,
	            "total-time":12345,
	            "setup-time":12345,
	            "expected-downtime":12345,
	            "duplicate":10,
	            "normal":3333,
	            "normal-bytes":3412992,
	            "dirty-sync-count":15
	         },
	         "xbzrle-cache":{
	            "cache-size":67108864,
	            "bytes":20971520,
	            "pages":2444343,
	            "cache-miss":2244,
	            "cache-miss-rate":0.123,
	            "overflow":34434
	         }
	      }
	   }








B<MigrationCapability> (Enum)


Migration capabilities enumeration

=over 4


=item C<'xbzrle'>

Migration supports xbzrle (Xor Based Zero Run Length Encoding).
This feature allows us to minimize migration traffic for certain work
loads, by sending compressed difference of the pages

=item C<'rdma-pin-all'>

Controls whether or not the entire VM memory footprint is
mlock()'d on demand or all at once. Refer to docs/rdma.txt for usage.
Disabled by default. (since 2.0)

=item C<'zero-blocks'>

During storage migration encode blocks of zeroes efficiently. This
essentially saves 1MB of zeroes per block on the wire. Enabling requires
source and target VM to support this feature. To enable it is sufficient
to enable the capability on the source VM. The feature is disabled by
default. (since 1.6)

=item C<'compress'>

Use multiple compression threads to accelerate live migration.
This feature can help to reduce the migration traffic, by sending
compressed pages. Please note that if compress and xbzrle are both
on, compress only takes effect in the ram bulk stage, after that,
it will be disabled and only xbzrle takes effect, this can help to
minimize migration traffic. The feature is disabled by default.
(since 2.4 )

=item C<'events'>

generate events for each migration state change
(since 2.4 )

=item C<'auto-converge'>

If enabled, QEMU will automatically throttle down the guest
to speed up convergence of RAM migration. (since 1.6)

=item C<'postcopy-ram'>

Start executing on the migration target before all of RAM has
been migrated, pulling the remaining pages along as needed. NOTE: If
the migration fails during postcopy the VM will fail.  (since 2.6)

=item C<'x-colo'>

If enabled, migration will never end, and the state of the VM on the
primary side will be migrated continuously to the VM on secondary
side, this process is called COarse-Grain LOck Stepping (COLO) for
Non-stop Service. (since 2.8)

=item C<'release-ram'>

if enabled, qemu will free the migrated ram pages on the source
during postcopy-ram migration. (since 2.9)

=back



B<Since:>
1.2






B<MigrationCapabilityStatus> (Struct)


Migration capability information

=over 4


=item C<'capability'>

capability enum

=item C<'state'>

capability state bool

=back



B<Since:>
1.2






B<migrate-set-capabilities>  (Command)
Enable/Disable the following migration capabilities (like xbzrle)

=over 4


=item C<'capabilities'>

json array of capability modifications to make

=back



B<Since:>
1.2

B<Example:>
	
	-> { "execute": "migrate-set-capabilities" , "arguments":
	     { "capabilities": [ { "capability": "xbzrle", "state": true } ] } }








B<query-migrate-capabilities>  (Command)
Returns information about the current migration capabilities status


B<Returns:>
C<MigrationCapabilitiesStatus>

B<Since:>
1.2

B<Example:>
	
	-> { "execute": "query-migrate-capabilities" }
	<- { "return": [
	      {"state": false, "capability": "xbzrle"},
	      {"state": false, "capability": "rdma-pin-all"},
	      {"state": false, "capability": "auto-converge"},
	      {"state": false, "capability": "zero-blocks"},
	      {"state": false, "capability": "compress"},
	      {"state": true, "capability": "events"},
	      {"state": false, "capability": "postcopy-ram"},
	      {"state": false, "capability": "x-colo"}
	   ]}








B<MigrationParameter> (Enum)


Migration parameters enumeration

=over 4


=item C<'compress-level'>

Set the compression level to be used in live migration,
the compression level is an integer between 0 and 9, where 0 means
no compression, 1 means the best compression speed, and 9 means best
compression ratio which will consume more CPU.

=item C<'compress-threads'>

Set compression thread count to be used in live migration,
the compression thread count is an integer between 1 and 255.

=item C<'decompress-threads'>

Set decompression thread count to be used in live
migration, the decompression thread count is an integer between 1
and 255. Usually, decompression is at least 4 times as fast as
compression, so set the decompress-threads to the number about 1/4
of compress-threads is adequate.

=item C<'cpu-throttle-initial'>

Initial percentage of time guest cpus are throttled
when migration auto-converge is activated. The
default value is 20. (Since 2.7)

=item C<'cpu-throttle-increment'>

throttle percentage increase each time
auto-converge detects that migration is not making
progress. The default value is 10. (Since 2.7)

=item C<'tls-creds'>

ID of the 'tls-creds' object that provides credentials for
establishing a TLS connection over the migration data channel.
On the outgoing side of the migration, the credentials must
be for a 'client' endpoint, while for the incoming side the
credentials must be for a 'server' endpoint. Setting this
will enable TLS for all migrations. The default is unset,
resulting in unsecured migration at the QEMU level. (Since 2.7)

=item C<'tls-hostname'>

hostname of the target host for the migration. This is
required when using x509 based TLS credentials and the
migration URI does not already include a hostname. For
example if using fd: or exec: based migration, the
hostname must be provided so that the server's x509
certificate identity can be validated. (Since 2.7)

=item C<'max-bandwidth'>

to set maximum speed for migration. maximum speed in
bytes per second. (Since 2.8)

=item C<'downtime-limit'>

set maximum tolerated downtime for migration. maximum
downtime in milliseconds (Since 2.8)

=item C<'x-checkpoint-delay'>

The delay time (in ms) between two COLO checkpoints in
periodic mode. (Since 2.8)

=back



B<Since:>
2.4






B<migrate-set-parameters>  (Command)
Set various migration parameters.  See MigrationParameters for details.


B<Since:>
2.4

B<Example:>
	
	-> { "execute": "migrate-set-parameters" ,
	     "arguments": { "compress-level": 1 } }








B<MigrationParameters> (Struct)


Optional members can be omitted on input ('migrate-set-parameters')
but most members will always be present on output
('query-migrate-parameters'), with the exception of tls-creds and
tls-hostname.

=over 4


=item C<'compress-level'> (optional)

 compression level

=item C<'compress-threads'> (optional)

 compression thread count

=item C<'decompress-threads'> (optional)

 decompression thread count

=item C<'cpu-throttle-initial'> (optional)

 Initial percentage of time guest cpus are
throttledwhen migration auto-converge is activated.
The default value is 20. (Since 2.7)

=item C<'cpu-throttle-increment'> (optional)

 throttle percentage increase each time
auto-converge detects that migration is not making
progress. The default value is 10. (Since 2.7)

=item C<'tls-creds'> (optional)

 ID of the 'tls-creds' object that provides credentials
for establishing a TLS connection over the migration data
channel. On the outgoing side of the migration, the credentials
must be for a 'client' endpoint, while for the incoming side the
credentials must be for a 'server' endpoint. Setting this
will enable TLS for all migrations. The default is unset,
resulting in unsecured migration at the QEMU level. (Since 2.7)

=item C<'tls-hostname'> (optional)

 hostname of the target host for the migration. This
is required when using x509 based TLS credentials and the
migration URI does not already include a hostname. For
example if using fd: or exec: based migration, the
hostname must be provided so that the server's x509
certificate identity can be validated. (Since 2.7)

=item C<'max-bandwidth'> (optional)

to set maximum speed for migration. maximum speed in
bytes per second. (Since 2.8)



=item C<'downtime-limit'> (optional)

set maximum tolerated downtime for migration. maximum
downtime in milliseconds (Since 2.8)



=item C<'x-checkpoint-delay'> (optional)

the delay time between two COLO checkpoints. (Since 2.8)



=back



B<Since:>
2.4






B<query-migrate-parameters>  (Command)
Returns information about the current migration parameters


B<Returns:>
C<MigrationParameters>

B<Since:>
2.4

B<Example:>
	
	-> { "execute": "query-migrate-parameters" }
	<- { "return": {
	         "decompress-threads": 2,
	         "cpu-throttle-increment": 10,
	         "compress-threads": 8,
	         "compress-level": 1,
	         "cpu-throttle-initial": 20,
	         "max-bandwidth": 33554432,
	         "downtime-limit": 300
	      }
	   }








B<client_migrate_info>  (Command)
Set migration information for remote display.  This makes the server
ask the client to automatically reconnect using the new parameters
once migration finished successfully.  Only implemented for SPICE.

=over 4


=item C<'protocol'>

must be "spice"

=item C<'hostname'>

migration target hostname

=item C<'port'> (optional)

 spice tcp port for plaintext channels

=item C<'tls-port'> (optional)

 spice tcp port for tls-secured channels

=item C<'cert-subject'> (optional)

 server certificate subject

=back



B<Since:>
0.14.0

B<Example:>
	
	-> { "execute": "client_migrate_info",
	     "arguments": { "protocol": "spice",
	                    "hostname": "virt42.lab.kraxel.org",
	                    "port": 1234 } }
	<- { "return": {} }








B<migrate-start-postcopy>  (Command)
Followup to a migration command to switch the migration to postcopy mode.
The postcopy-ram capability must be set before the original migration
command.


B<Since:>
2.5

B<Example:>
	
	-> { "execute": "migrate-start-postcopy" }
	<- { "return": {} }








B<COLOMessage> (Enum)


The message transmission between Primary side and Secondary side.

=over 4


=item C<'checkpoint-ready'>

Secondary VM (SVM) is ready for checkpointing

=item C<'checkpoint-request'>

Primary VM (PVM) tells SVM to prepare for checkpointing

=item C<'checkpoint-reply'>

SVM gets PVM's checkpoint request

=item C<'vmstate-send'>

VM's state will be sent by PVM.

=item C<'vmstate-size'>

The total size of VMstate.

=item C<'vmstate-received'>

VM's state has been received by SVM.

=item C<'vmstate-loaded'>

VM's state has been loaded by SVM.

=back



B<Since:>
2.8






B<COLOMode> (Enum)


The colo mode

=over 4


=item C<'unknown'>

unknown mode

=item C<'primary'>

master side

=item C<'secondary'>

slave side

=back



B<Since:>
2.8






B<FailoverStatus> (Enum)


An enumeration of COLO failover status

=over 4


=item C<'none'>

no failover has ever happened

=item C<'require'>

got failover requirement but not handled

=item C<'active'>

in the process of doing failover

=item C<'completed'>

finish the process of failover

=item C<'relaunch'>

restart the failover process, from 'none' -E<gt> 'completed' (Since 2.9)

=back



B<Since:>
2.8






B<x-colo-lost-heartbeat>  (Command)
Tell qemu that heartbeat is lost, request it to do takeover procedures.
If this command is sent to the PVM, the Primary side will exit COLO mode.
If sent to the Secondary, the Secondary side will run failover work,
then takes over server operation to become the service VM.


B<Since:>
2.8

B<Example:>
	
	-> { "execute": "x-colo-lost-heartbeat" }
	<- { "return": {} }








B<MouseInfo> (Struct)


Information about a mouse device.

=over 4


=item C<'name'>

the name of the mouse device

=item C<'index'>

the index of the mouse device

=item C<'current'>

true if this device is currently receiving mouse events

=item C<'absolute'>

true if this device supports absolute coordinates as input

=back



B<Since:>
0.14.0






B<query-mice>  (Command)
Returns information about each active mouse device


B<Returns:>
a list of C<MouseInfo> for each device

B<Since:>
0.14.0

B<Example:>
	
	-> { "execute": "query-mice" }
	<- { "return": [
	         {
	            "name":"QEMU Microsoft Mouse",
	            "index":0,
	            "current":false,
	            "absolute":false
	         },
	         {
	            "name":"QEMU PS/2 Mouse",
	            "index":1,
	            "current":true,
	            "absolute":true
	         }
	      ]
	   }








B<CpuInfoArch> (Enum)


An enumeration of cpu types that enable additional information during
C<query-cpus>.

=over 4


=item C<'x86'>



=item C<'sparc'>



=item C<'ppc'>



=item C<'mips'>



=item C<'tricore'>



=item C<'other'>



=back



B<Since:>
2.6






B<Union> (Flat)


Information about a virtual CPU

=over 4


=item C<'CPU'>

the index of the virtual CPU

=item C<'current'>

this only exists for backwards compatibility and should be ignored

=item C<'halted'>

true if the virtual CPU is in the halt state.  Halt usually refers
to a processor specific low power mode.

=item C<'qom_path'>

path to the CPU object in the QOM tree (since 2.4)

=item C<'thread_id'>

ID of the underlying host thread

=item C<'arch'>

architecture of the cpu, which determines which additional fields
will be listed (since 2.6)

=back



B<Since:>
0.14.0

B<Notes:>
C<halted> is a transient state that changes frequently.  By the time the
data is sent to the client, the guest may no longer be halted.






B<CpuInfoX86> (Struct)


Additional information about a virtual i386 or x86_64 CPU

=over 4


=item C<'pc'>

the 64-bit instruction pointer

=back



B<Since:>
2.6






B<CpuInfoSPARC> (Struct)


Additional information about a virtual SPARC CPU

=over 4


=item C<'pc'>

the PC component of the instruction pointer

=item C<'npc'>

the NPC component of the instruction pointer

=back



B<Since:>
2.6






B<CpuInfoPPC> (Struct)


Additional information about a virtual PPC CPU

=over 4


=item C<'nip'>

the instruction pointer

=back



B<Since:>
2.6






B<CpuInfoMIPS> (Struct)


Additional information about a virtual MIPS CPU

=over 4


=item C<'PC'>

the instruction pointer

=back



B<Since:>
2.6






B<CpuInfoTricore> (Struct)


Additional information about a virtual Tricore CPU

=over 4


=item C<'PC'>

the instruction pointer

=back



B<Since:>
2.6






B<CpuInfoOther> (Struct)


No additional information is available about the virtual CPU


B<Since:>
2.6






B<query-cpus>  (Command)
Returns a list of information about each virtual CPU.


B<Returns:>
a list of C<CpuInfo> for each virtual CPU

B<Since:>
0.14.0

B<Example:>
	
	-> { "execute": "query-cpus" }
	<- { "return": [
	         {
	            "CPU":0,
	            "current":true,
	            "halted":false,
	            "qom_path":"/machine/unattached/device[0]",
	            "arch":"x86",
	            "pc":3227107138,
	            "thread_id":3134
	         },
	         {
	            "CPU":1,
	            "current":false,
	            "halted":true,
	            "qom_path":"/machine/unattached/device[2]",
	            "arch":"x86",
	            "pc":7108165,
	            "thread_id":3135
	         }
	      ]
	   }








B<IOThreadInfo> (Struct)


Information about an iothread

=over 4


=item C<'id'>

the identifier of the iothread

=item C<'thread-id'>

ID of the underlying host thread

=item C<'poll-max-ns'>

maximum polling time in ns, 0 means polling is disabled
(since 2.9)

=item C<'poll-grow'>

how many ns will be added to polling time, 0 means that it's not
configured (since 2.9)

=item C<'poll-shrink'>

how many ns will be removed from polling time, 0 means that
it's not configured (since 2.9)

=back



B<Since:>
2.0






B<query-iothreads>  (Command)
Returns a list of information about each iothread.


B<Note:>
this list excludes the QEMU main loop thread, which is not declared
using the -object iothread command-line option.  It is always the main thread
of the process.

B<Returns:>
a list of C<IOThreadInfo> for each iothread

B<Since:>
2.0

B<Example:>
	
	-> { "execute": "query-iothreads" }
	<- { "return": [
	         {
	            "id":"iothread0",
	            "thread-id":3134
	         },
	         {
	            "id":"iothread1",
	            "thread-id":3135
	         }
	      ]
	   }








B<NetworkAddressFamily> (Enum)


The network address family

=over 4


=item C<'ipv4'>

IPV4 family

=item C<'ipv6'>

IPV6 family

=item C<'unix'>

unix socket

=item C<'vsock'>

vsock family (since 2.8)

=item C<'unknown'>

otherwise

=back



B<Since:>
2.1






B<VncBasicInfo> (Struct)


The basic information for vnc network connection

=over 4


=item C<'host'>

IP address

=item C<'service'>

The service name of the vnc port. This may depend on the host
system's service database so symbolic names should not be relied
on.

=item C<'family'>

address family

=item C<'websocket'>

true in case the socket is a websocket (since 2.3).

=back



B<Since:>
2.1






B<VncServerInfo> (Struct)


The network connection information for server

=over 4


=item C<'auth'> (optional)

 authentication method used for
the plain (non-websocket) VNC server

=back



B<Since:>
2.1






B<VncClientInfo> (Struct)


Information about a connected VNC client.

=over 4


=item C<'x509_dname'> (optional)

 If x509 authentication is in use, the Distinguished
Name of the client.

=item C<'sasl_username'> (optional)

 If SASL authentication is in use, the SASL username
used for authentication.

=back



B<Since:>
0.14.0






B<VncInfo> (Struct)


Information about the VNC session.

=over 4


=item C<'enabled'>

true if the VNC server is enabled, false otherwise

=item C<'host'> (optional)

 The hostname the VNC server is bound to.  This depends on
the name resolution on the host and may be an IP address.

=item C<'family'> (optional)

 'ipv6' if the host is listening for IPv6 connections
'ipv4' if the host is listening for IPv4 connections
'unix' if the host is listening on a unix domain socket
'unknown' otherwise

=item C<'service'> (optional)

 The service name of the server's port.  This may depends
on the host system's service database so symbolic names should not
be relied on.

=item C<'auth'> (optional)

 the current authentication type used by the server
'none' if no authentication is being used
'vnc' if VNC authentication is being used
'vencrypt+plain' if VEncrypt is used with plain text authentication
'vencrypt+tls+none' if VEncrypt is used with TLS and no authentication
'vencrypt+tls+vnc' if VEncrypt is used with TLS and VNC authentication
'vencrypt+tls+plain' if VEncrypt is used with TLS and plain text auth
'vencrypt+x509+none' if VEncrypt is used with x509 and no auth
'vencrypt+x509+vnc' if VEncrypt is used with x509 and VNC auth
'vencrypt+x509+plain' if VEncrypt is used with x509 and plain text auth
'vencrypt+tls+sasl' if VEncrypt is used with TLS and SASL auth
'vencrypt+x509+sasl' if VEncrypt is used with x509 and SASL auth

=item C<'clients'> (optional)

a list of C<VncClientInfo> of all currently connected clients



=back



B<Since:>
0.14.0






B<VncPrimaryAuth> (Enum)


vnc primary authentication method.

=over 4


=item C<'none'>



=item C<'vnc'>



=item C<'ra2'>



=item C<'ra2ne'>



=item C<'tight'>



=item C<'ultra'>



=item C<'tls'>



=item C<'vencrypt'>



=item C<'sasl'>



=back



B<Since:>
2.3






B<VncVencryptSubAuth> (Enum)


vnc sub authentication method with vencrypt.

=over 4


=item C<'plain'>



=item C<'tls-none'>



=item C<'x509-none'>



=item C<'tls-vnc'>



=item C<'x509-vnc'>



=item C<'tls-plain'>



=item C<'x509-plain'>



=item C<'tls-sasl'>



=item C<'x509-sasl'>



=back



B<Since:>
2.3






B<VncServerInfo2> (Struct)


The network connection information for server

=over 4


=item C<'auth'>

The current authentication type used by the servers

=item C<'vencrypt'> (optional)

 The vencrypt sub authentication type used by the
servers, only specified in case auth == vencrypt.

=back



B<Since:>
2.9






B<VncInfo2> (Struct)


Information about a vnc server

=over 4


=item C<'id'>

vnc server name.

=item C<'server'>

A list of C<VncBasincInfo> describing all listening sockets.
The list can be empty (in case the vnc server is disabled).
It also may have multiple entries: normal + websocket,
possibly also ipv4 + ipv6 in the future.

=item C<'clients'>

A list of C<VncClientInfo> of all currently connected clients.
The list can be empty, for obvious reasons.

=item C<'auth'>

The current authentication type used by the non-websockets servers

=item C<'vencrypt'> (optional)

 The vencrypt authentication type used by the servers,
only specified in case auth == vencrypt.

=item C<'display'> (optional)

 The display device the vnc server is linked to.

=back



B<Since:>
2.3






B<query-vnc>  (Command)
Returns information about the current VNC server


B<Returns:>
C<VncInfo>

B<Since:>
0.14.0

B<Example:>
	
	-> { "execute": "query-vnc" }
	<- { "return": {
	         "enabled":true,
	         "host":"0.0.0.0",
	         "service":"50402",
	         "auth":"vnc",
	         "family":"ipv4",
	         "clients":[
	            {
	               "host":"127.0.0.1",
	               "service":"50401",
	               "family":"ipv4"
	            }
	         ]
	      }
	   }








B<query-vnc-servers>  (Command)
Returns a list of vnc servers.  The list can be empty.


B<Returns:>
a list of C<VncInfo2>

B<Since:>
2.3






B<SpiceBasicInfo> (Struct)


The basic information for SPICE network connection

=over 4


=item C<'host'>

IP address

=item C<'port'>

port number

=item C<'family'>

address family

=back



B<Since:>
2.1






B<SpiceServerInfo> (Struct)


Information about a SPICE server

=over 4


=item C<'auth'> (optional)

 authentication method

=back



B<Since:>
2.1






B<SpiceChannel> (Struct)


Information about a SPICE client channel.

=over 4


=item C<'connection-id'>

SPICE connection id number.  All channels with the same id
belong to the same SPICE session.

=item C<'channel-type'>

SPICE channel type number.  "1" is the main control
channel, filter for this one if you want to track spice
sessions only

=item C<'channel-id'>

SPICE channel ID number.  Usually "0", might be different when
multiple channels of the same type exist, such as multiple
display channels in a multihead setup

=item C<'tls'>

true if the channel is encrypted, false otherwise.

=back



B<Since:>
0.14.0






B<SpiceQueryMouseMode> (Enum)


An enumeration of Spice mouse states.

=over 4


=item C<'client'>

Mouse cursor position is determined by the client.

=item C<'server'>

Mouse cursor position is determined by the server.

=item C<'unknown'>

No information is available about mouse mode used by
the spice server.

=back



B<Note:>
spice/enums.h has a SpiceMouseMode already, hence the name.

B<Since:>
1.1






B<SpiceInfo> (Struct)


Information about the SPICE session.

=over 4


=item C<'enabled'>

true if the SPICE server is enabled, false otherwise

=item C<'migrated'>

true if the last guest migration completed and spice
migration had completed as well. false otherwise. (since 1.4)

=item C<'host'> (optional)

 The hostname the SPICE server is bound to.  This depends on
the name resolution on the host and may be an IP address.

=item C<'port'> (optional)

 The SPICE server's port number.

=item C<'compiled-version'> (optional)

 SPICE server version.

=item C<'tls-port'> (optional)

 The SPICE server's TLS port number.

=item C<'auth'> (optional)

 the current authentication type used by the server
'none'  if no authentication is being used
'spice' uses SASL or direct TLS authentication, depending on command
line options

=item C<'mouse-mode'>

The mode in which the mouse cursor is displayed currently. Can
be determined by the client or the server, or unknown if spice
server doesn't provide this information. (since: 1.1)

=item C<'channels'> (optional)

a list of C<SpiceChannel> for each active spice channel



=back



B<Since:>
0.14.0






B<query-spice>  (Command)
Returns information about the current SPICE server


B<Returns:>
C<SpiceInfo>

B<Since:>
0.14.0

B<Example:>
	
	-> { "execute": "query-spice" }
	<- { "return": {
	         "enabled": true,
	         "auth": "spice",
	         "port": 5920,
	         "tls-port": 5921,
	         "host": "0.0.0.0",
	         "channels": [
	            {
	               "port": "54924",
	               "family": "ipv4",
	               "channel-type": 1,
	               "connection-id": 1804289383,
	               "host": "127.0.0.1",
	               "channel-id": 0,
	               "tls": true
	            },
	            {
	               "port": "36710",
	               "family": "ipv4",
	               "channel-type": 4,
	               "connection-id": 1804289383,
	               "host": "127.0.0.1",
	               "channel-id": 0,
	               "tls": false
	            },
	            [ ... more channels follow ... ]
	         ]
	      }
	   }








B<BalloonInfo> (Struct)


Information about the guest balloon device.

=over 4


=item C<'actual'>

the number of bytes the balloon currently contains

=back



B<Since:>
0.14.0






B<query-balloon>  (Command)
Return information about the balloon device.


B<Returns:>
C<BalloonInfo> on success

If the balloon driver is enabled but not functional because the KVM
kernel module cannot support it, KvmMissingCap

If no balloon device is present, DeviceNotActive

B<Since:>
0.14.0

B<Example:>
	
	-> { "execute": "query-balloon" }
	<- { "return": {
	         "actual": 1073741824,
	      }
	   }








B<PciMemoryRange> (Struct)


A PCI device memory region

=over 4


=item C<'base'>

the starting address (guest physical)

=item C<'limit'>

the ending address (guest physical)

=back



B<Since:>
0.14.0






B<PciMemoryRegion> (Struct)


Information about a PCI device I/O region.

=over 4


=item C<'bar'>

the index of the Base Address Register for this region

=item C<'type'>

'io' if the region is a PIO region
'memory' if the region is a MMIO region

=item C<'size'>

memory size

=item C<'prefetch'> (optional)

 if C<type> is 'memory', true if the memory is prefetchable

=item C<'mem_type_64'> (optional)

 if C<type> is 'memory', true if the BAR is 64-bit

=back



B<Since:>
0.14.0






B<PciBusInfo> (Struct)


Information about a bus of a PCI Bridge device

=over 4


=item C<'number'>

primary bus interface number.  This should be the number of the
bus the device resides on.

=item C<'secondary'>

secondary bus interface number.  This is the number of the
main bus for the bridge

=item C<'subordinate'>

This is the highest number bus that resides below the
bridge.

=item C<'io_range'>

The PIO range for all devices on this bridge

=item C<'memory_range'>

The MMIO range for all devices on this bridge

=item C<'prefetchable_range'>

The range of prefetchable MMIO for all devices on
this bridge

=back



B<Since:>
2.4






B<PciBridgeInfo> (Struct)


Information about a PCI Bridge device

=over 4


=item C<'bus'>

information about the bus the device resides on

=item C<'devices'> (optional)

a list of C<PciDeviceInfo> for each device on this bridge



=back



B<Since:>
0.14.0






B<PciDeviceClass> (Struct)


Information about the Class of a PCI device

=over 4


=item C<'desc'> (optional)

 a string description of the device's class

=item C<'class'>

the class code of the device

=back



B<Since:>
2.4






B<PciDeviceId> (Struct)


Information about the Id of a PCI device

=over 4


=item C<'device'>

the PCI device id

=item C<'vendor'>

the PCI vendor id

=back



B<Since:>
2.4






B<PciDeviceInfo> (Struct)


Information about a PCI device

=over 4


=item C<'bus'>

the bus number of the device

=item C<'slot'>

the slot the device is located in

=item C<'function'>

the function of the slot used by the device

=item C<'class_info'>

the class of the device

=item C<'id'>

the PCI device id

=item C<'irq'> (optional)

 if an IRQ is assigned to the device, the IRQ number

=item C<'qdev_id'>

the device name of the PCI device

=item C<'pci_bridge'> (optional)

if the device is a PCI bridge, the bridge information



=item C<'regions'>

a list of the PCI I/O regions associated with the device

=back



B<Notes:>
the contents of C<class_info>.desc are not stable and should only be
treated as informational.

B<Since:>
0.14.0






B<PciInfo> (Struct)


Information about a PCI bus

=over 4


=item C<'bus'>

the bus index

=item C<'devices'>

a list of devices on this bus

=back



B<Since:>
0.14.0






B<query-pci>  (Command)
Return information about the PCI bus topology of the guest.


B<Returns:>
a list of C<PciInfo> for each PCI bus. Each bus is
represented by a json-object, which has a key with a json-array of
all PCI devices attached to it. Each device is represented by a
json-object.

B<Since:>
0.14.0

B<Example:>
	
	-> { "execute": "query-pci" }
	<- { "return": [
	         {
	            "bus": 0,
	            "devices": [
	               {
	                  "bus": 0,
	                  "qdev_id": "",
	                  "slot": 0,
	                  "class_info": {
	                     "class": 1536,
	                     "desc": "Host bridge"
	                  },
	                  "id": {
	                     "device": 32902,
	                     "vendor": 4663
	                  },
	                  "function": 0,
	                  "regions": [
	                  ]
	               },
	               {
	                  "bus": 0,
	                  "qdev_id": "",
	                  "slot": 1,
	                  "class_info": {
	                     "class": 1537,
	                     "desc": "ISA bridge"
	                  },
	                  "id": {
	                     "device": 32902,
	                     "vendor": 28672
	                  },
	                  "function": 0,
	                  "regions": [
	                  ]
	               },
	               {
	                  "bus": 0,
	                  "qdev_id": "",
	                  "slot": 1,
	                  "class_info": {
	                     "class": 257,
	                     "desc": "IDE controller"
	                  },
	                  "id": {
	                     "device": 32902,
	                     "vendor": 28688
	                  },
	                  "function": 1,
	                  "regions": [
	                     {
	                        "bar": 4,
	                        "size": 16,
	                        "address": 49152,
	                        "type": "io"
	                     }
	                  ]
	               },
	               {
	                  "bus": 0,
	                  "qdev_id": "",
	                  "slot": 2,
	                  "class_info": {
	                     "class": 768,
	                     "desc": "VGA controller"
	                  },
	                  "id": {
	                     "device": 4115,
	                     "vendor": 184
	                  },
	                  "function": 0,
	                  "regions": [
	                     {
	                        "prefetch": true,
	                        "mem_type_64": false,
	                        "bar": 0,
	                        "size": 33554432,
	                        "address": 4026531840,
	                        "type": "memory"
	                     },
	                     {
	                        "prefetch": false,
	                        "mem_type_64": false,
	                        "bar": 1,
	                        "size": 4096,
	                        "address": 4060086272,
	                        "type": "memory"
	                     },
	                     {
	                        "prefetch": false,
	                        "mem_type_64": false,
	                        "bar": 6,
	                        "size": 65536,
	                        "address": -1,
	                        "type": "memory"
	                     }
	                  ]
	               },
	               {
	                  "bus": 0,
	                  "qdev_id": "",
	                  "irq": 11,
	                  "slot": 4,
	                  "class_info": {
	                     "class": 1280,
	                     "desc": "RAM controller"
	                  },
	                  "id": {
	                     "device": 6900,
	                     "vendor": 4098
	                  },
	                  "function": 0,
	                  "regions": [
	                     {
	                        "bar": 0,
	                        "size": 32,
	                        "address": 49280,
	                        "type": "io"
	                     }
	                  ]
	               }
	            ]
	         }
	      ]
	   }



B<Note:>
This example has been shortened as the real response is too long.






B<quit>  (Command)
This command will cause the QEMU process to exit gracefully.  While every
attempt is made to send the QMP response before terminating, this is not
guaranteed.  When using this interface, a premature EOF would not be
unexpected.


B<Since:>
0.14.0

B<Example:>
	
	-> { "execute": "quit" }
	<- { "return": {} }








B<stop>  (Command)
Stop all guest VCPU execution.


B<Since:>
0.14.0

B<Notes:>
This function will succeed even if the guest is already in the stopped
state.  In "inmigrate" state, it will ensure that the guest
remains paused once migration finishes, as if the -S option was
passed on the command line.

B<Example:>
	
	-> { "execute": "stop" }
	<- { "return": {} }








B<system_reset>  (Command)
Performs a hard reset of a guest.


B<Since:>
0.14.0

B<Example:>
	
	-> { "execute": "system_reset" }
	<- { "return": {} }








B<system_powerdown>  (Command)
Requests that a guest perform a powerdown operation.


B<Since:>
0.14.0

B<Notes:>
A guest may or may not respond to this command.  This command
returning does not indicate that a guest has accepted the request or
that it has shut down.  Many guests will respond to this command by
prompting the user in some way.

B<Example:>
	
	-> { "execute": "system_powerdown" }
	<- { "return": {} }








B<cpu>  (Command)
This command is a nop that is only provided for the purposes of compatibility.


B<Since:>
0.14.0

B<Notes:>
Do not use this command.






B<cpu-add>  (Command)
Adds CPU with specified ID

=over 4


=item C<'id'>

ID of CPU to be created, valid values [0..max_cpus)

=back



B<Returns:>
Nothing on success

B<Since:>
1.5

B<Example:>
	
	-> { "execute": "cpu-add", "arguments": { "id": 2 } }
	<- { "return": {} }








B<memsave>  (Command)
Save a portion of guest memory to a file.

=over 4


=item C<'val'>

the virtual address of the guest to start from

=item C<'size'>

the size of memory region to save

=item C<'filename'>

the file to save the memory to as binary data

=item C<'cpu-index'> (optional)

 the index of the virtual CPU to use for translating the
virtual address (defaults to CPU 0)

=back



B<Returns:>
Nothing on success

B<Since:>
0.14.0

B<Notes:>
Errors were not reliably returned until 1.1

B<Example:>
	
	-> { "execute": "memsave",
	     "arguments": { "val": 10,
	                    "size": 100,
	                    "filename": "/tmp/virtual-mem-dump" } }
	<- { "return": {} }








B<pmemsave>  (Command)
Save a portion of guest physical memory to a file.

=over 4


=item C<'val'>

the physical address of the guest to start from

=item C<'size'>

the size of memory region to save

=item C<'filename'>

the file to save the memory to as binary data

=back



B<Returns:>
Nothing on success

B<Since:>
0.14.0

B<Notes:>
Errors were not reliably returned until 1.1

B<Example:>
	
	-> { "execute": "pmemsave",
	     "arguments": { "val": 10,
	                    "size": 100,
	                    "filename": "/tmp/physical-mem-dump" } }
	<- { "return": {} }








B<cont>  (Command)
Resume guest VCPU execution.


B<Since:>
0.14.0

B<Returns:>
If successful, nothing
If QEMU was started with an encrypted block device and a key has
not yet been set, DeviceEncrypted.

B<Notes:>
This command will succeed if the guest is currently running.  It
will also succeed if the guest is in the "inmigrate" state; in
this case, the effect of the command is to make sure the guest
starts once migration finishes, removing the effect of the -S
command line option if it was passed.

B<Example:>
	
	-> { "execute": "cont" }
	<- { "return": {} }








B<system_wakeup>  (Command)
Wakeup guest from suspend.  Does nothing in case the guest isn't suspended.


B<Since:>
1.1

B<Returns:>
nothing.

B<Example:>
	
	-> { "execute": "system_wakeup" }
	<- { "return": {} }








B<inject-nmi>  (Command)
Injects a Non-Maskable Interrupt into the default CPU (x86/s390) or all CPUs (ppc64).
The command fails when the guest doesn't support injecting.


B<Returns:>
If successful, nothing

B<Since:>
0.14.0

B<Note:>
prior to 2.1, this command was only supported for x86 and s390 VMs

B<Example:>
	
	-> { "execute": "inject-nmi" }
	<- { "return": {} }








B<set_link>  (Command)
Sets the link status of a virtual network adapter.

=over 4


=item C<'name'>

the device name of the virtual network adapter

=item C<'up'>

true to set the link status to be up

=back



B<Returns:>
Nothing on success
If C<name> is not a valid network device, DeviceNotFound

B<Since:>
0.14.0

B<Notes:>
Not all network adapters support setting link status.  This command
will succeed even if the network adapter does not support link status
notification.

B<Example:>
	
	-> { "execute": "set_link",
	     "arguments": { "name": "e1000.0", "up": false } }
	<- { "return": {} }








B<balloon>  (Command)
Request the balloon driver to change its balloon size.

=over 4


=item C<'value'>

the target size of the balloon in bytes

=back



B<Returns:>
Nothing on success
If the balloon driver is enabled but not functional because the KVM
kernel module cannot support it, KvmMissingCap
If no balloon device is present, DeviceNotActive

B<Notes:>
This command just issues a request to the guest.  When it returns,
the balloon size may not have changed.  A guest can change the balloon
size independent of this command.

B<Since:>
0.14.0

B<Example:>
	
	-> { "execute": "balloon", "arguments": { "value": 536870912 } }
	<- { "return": {} }








B<Abort> (Struct)


This action can be used to test transaction failure.


B<Since:>
1.6






B<ActionCompletionMode> (Enum)


An enumeration of Transactional completion modes.

=over 4


=item C<'individual'>

Do not attempt to cancel any other Actions if any Actions fail
after the Transaction request succeeds. All Actions that
can complete successfully will do so without waiting on others.
This is the default.

=item C<'grouped'>

If any Action fails after the Transaction succeeds, cancel all
Actions. Actions do not complete until all Actions are ready to
complete. May be rejected by Actions that do not support this
completion mode.

=back



B<Since:>
2.5






B<Union> (Simple)


A discriminated record of operations that can be performed with
C<transaction>. Action C<type> can be:


=over 4


=item -

C<abort>: since 1.6

=item -

C<block-dirty-bitmap-add>: since 2.5

=item -

C<block-dirty-bitmap-clear>: since 2.5

=item -

C<blockdev-backup>: since 2.3

=item -

C<blockdev-snapshot>: since 2.5

=item -

C<blockdev-snapshot-internal-sync>: since 1.7

=item -

C<blockdev-snapshot-sync>: since 1.1

=item -

C<drive-backup>: since 1.6

=back




B<Since:>
1.1






B<TransactionProperties> (Struct)


Optional arguments to modify the behavior of a Transaction.

=over 4


=item C<'completion-mode'> (optional)

 Controls how jobs launched asynchronously by
Actions will complete or fail as a group.
See C<ActionCompletionMode> for details.

=back



B<Since:>
2.5






B<transaction>  (Command)
Executes a number of transactionable QMP commands atomically. If any
operation fails, then the entire set of actions will be abandoned and the
appropriate error returned.

For external snapshots, the dictionary contains the device, the file to use for
the new snapshot, and the format.  The default format, if not specified, is
qcow2.

Each new snapshot defaults to being created by QEMU (wiping any
contents if the file already exists), but it is also possible to reuse
an externally-created file.  In the latter case, you should ensure that
the new image file has the same contents as the current one; QEMU cannot
perform any meaningful check.  Typically this is achieved by using the
current image file as the backing file for the new image.

On failure, the original disks pre-snapshot attempt will be used.

For internal snapshots, the dictionary contains the device and the snapshot's
name.  If an internal snapshot matching name already exists, the request will
be rejected.  Only some image formats support it, for example, qcow2, rbd,
and sheepdog.

On failure, qemu will try delete the newly created internal snapshot in the
transaction.  When an I/O error occurs during deletion, the user needs to fix
it later with qemu-img or other command.

=over 4


=item C<'actions'>

List of C<TransactionAction>;
information needed for the respective operations.

=item C<'properties'> (optional)

 structure of additional options to control the
execution of the transaction. See C<TransactionProperties>
for additional detail.

=back



B<Returns:>
nothing on success

Errors depend on the operations of the transaction

B<Note:>
The transaction aborts on the first failure.  Therefore, there will be
information on only one failed operation returned in an error condition, and
subsequent actions will not have been attempted.

B<Since:>
1.1

B<Example:>
	
	-> { "execute": "transaction",
	     "arguments": { "actions": [
	         { "type": "blockdev-snapshot-sync", "data" : { "device": "ide-hd0",
	                                     "snapshot-file": "/some/place/my-image",
	                                     "format": "qcow2" } },
	         { "type": "blockdev-snapshot-sync", "data" : { "node-name": "myfile",
	                                     "snapshot-file": "/some/place/my-image2",
	                                     "snapshot-node-name": "node3432",
	                                     "mode": "existing",
	                                     "format": "qcow2" } },
	         { "type": "blockdev-snapshot-sync", "data" : { "device": "ide-hd1",
	                                     "snapshot-file": "/some/place/my-image2",
	                                     "mode": "existing",
	                                     "format": "qcow2" } },
	         { "type": "blockdev-snapshot-internal-sync", "data" : {
	                                     "device": "ide-hd2",
	                                     "name": "snapshot0" } } ] } }
	<- { "return": {} }








B<human-monitor-command>  (Command)
Execute a command on the human monitor and return the output.

=over 4


=item C<'command-line'>

the command to execute in the human monitor

=item C<'cpu-index'> (optional)

 The CPU to use for commands that require an implicit CPU

=back



B<Returns:>
the output of the command as a string

B<Since:>
0.14.0

B<Notes:>
This command only exists as a stop-gap.  Its use is highly
discouraged.  The semantics of this command are not
guaranteed: this means that command names, arguments and
responses can change or be removed at ANY time.  Applications
that rely on long term stability guarantees should NOT
use this command.

Known limitations:


=over 4


=item *

This command is stateless, this means that commands that depend
on state information (such as getfd) might not work


=item *

Commands that prompt the user for data (eg. 'cont' when the block
device is encrypted) don't currently work

=back



B<Example:>
	
	-> { "execute": "human-monitor-command",
	     "arguments": { "command-line": "info kvm" } }
	<- { "return": "kvm support: enabled\r\n" }








B<migrate_cancel>  (Command)
Cancel the current executing migration process.


B<Returns:>
nothing on success

B<Notes:>
This command succeeds even if there is no migration process running.

B<Since:>
0.14.0

B<Example:>
	
	-> { "execute": "migrate_cancel" }
	<- { "return": {} }








B<migrate_set_downtime>  (Command)
Set maximum tolerated downtime for migration.

=over 4


=item C<'value'>

maximum downtime in seconds

=back



B<Returns:>
nothing on success

B<Notes:>
This command is deprecated in favor of 'migrate-set-parameters'

B<Since:>
0.14.0

B<Example:>
	
	-> { "execute": "migrate_set_downtime", "arguments": { "value": 0.1 } }
	<- { "return": {} }








B<migrate_set_speed>  (Command)
Set maximum speed for migration.

=over 4


=item C<'value'>

maximum speed in bytes per second.

=back



B<Returns:>
nothing on success

B<Notes:>
This command is deprecated in favor of 'migrate-set-parameters'

B<Since:>
0.14.0

B<Example:>
	
	-> { "execute": "migrate_set_speed", "arguments": { "value": 1024 } }
	<- { "return": {} }








B<migrate-set-cache-size>  (Command)
Set cache size to be used by XBZRLE migration

=over 4


=item C<'value'>

cache size in bytes

=back

The size will be rounded down to the nearest power of 2.
The cache size can be modified before and during ongoing migration

B<Returns:>
nothing on success

B<Since:>
1.2

B<Example:>
	
	-> { "execute": "migrate-set-cache-size",
	     "arguments": { "value": 536870912 } }
	<- { "return": {} }








B<query-migrate-cache-size>  (Command)
Query migration XBZRLE cache size


B<Returns:>
XBZRLE cache size in bytes

B<Since:>
1.2

B<Example:>
	
	-> { "execute": "query-migrate-cache-size" }
	<- { "return": 67108864 }








B<ObjectPropertyInfo> (Struct)




=over 4


=item C<'name'>

the name of the property

=item C<'type'>

the type of the property.  This will typically come in one of four
forms:

1) A primitive type such as 'u8', 'u16', 'bool', 'str', or 'double'.
These types are mapped to the appropriate JSON type.

2) A child type in the form 'childE<lt>subtypeE<gt>' where subtype is a qdev
device type name.  Child properties create the composition tree.

3) A link type in the form 'linkE<lt>subtypeE<gt>' where subtype is a qdev
device type name.  Link properties form the device model graph.

=back



B<Since:>
1.2






B<qom-list>  (Command)
This command will list any properties of a object given a path in the object
model.

=over 4


=item C<'path'>

the path within the object model.  See C<qom-get> for a description of
this parameter.

=back



B<Returns:>
a list of C<ObjectPropertyInfo> that describe the properties of the
object.

B<Since:>
1.2






B<qom-get>  (Command)
This command will get a property from a object model path and return the
value.

=over 4


=item C<'path'>

The path within the object model.  There are two forms of supported
paths--absolute and partial paths.

Absolute paths are derived from the root object and can follow childE<lt>E<gt>
or linkE<lt>E<gt> properties.  Since they can follow linkE<lt>E<gt> properties, they
can be arbitrarily long.  Absolute paths look like absolute filenames
and are prefixed  with a leading slash.

Partial paths look like relative filenames.  They do not begin
with a prefix.  The matching rules for partial paths are subtle but
designed to make specifying objects easy.  At each level of the
composition tree, the partial path is matched as an absolute path.
The first match is not returned.  At least two matches are searched
for.  A successful result is only returned if only one match is
found.  If more than one match is found, a flag is return to
indicate that the match was ambiguous.

=item C<'property'>

The property name to read

=back



B<Returns:>
The property value.  The type depends on the property
type. childE<lt>E<gt> and linkE<lt>E<gt> properties are returned as #str
pathnames.  All integer property types (u8, u16, etc) are
returned as #int.

B<Since:>
1.2






B<qom-set>  (Command)
This command will set a property from a object model path.

=over 4


=item C<'path'>

see C<qom-get> for a description of this parameter

=item C<'property'>

the property name to set

=item C<'value'>

a value who's type is appropriate for the property type.  See C<qom-get>
for a description of type mapping.

=back



B<Since:>
1.2






B<set_password>  (Command)
Sets the password of a remote display session.

=over 4


=item C<'protocol'>

`vnc' to modify the VNC server password
`spice' to modify the Spice server password

=item C<'password'>

the new password

=item C<'connected'> (optional)

 how to handle existing clients when changing the
password.  If nothing is specified, defaults to `keep'
`fail' to fail the command if clients are connected
`disconnect' to disconnect existing clients
`keep' to maintain existing clients

=back



B<Returns:>
Nothing on success
If Spice is not enabled, DeviceNotFound

B<Since:>
0.14.0

B<Example:>
	
	-> { "execute": "set_password", "arguments": { "protocol": "vnc",
	                                               "password": "secret" } }
	<- { "return": {} }








B<expire_password>  (Command)
Expire the password of a remote display server.

=over 4


=item C<'protocol'>

the name of the remote display protocol `vnc' or `spice'

=item C<'time'>

when to expire the password.
`now' to expire the password immediately
`never' to cancel password expiration
`+INT' where INT is the number of seconds from now (integer)
`INT' where INT is the absolute time in seconds

=back



B<Returns:>
Nothing on success
If C<protocol> is `spice' and Spice is not active, DeviceNotFound

B<Since:>
0.14.0

B<Notes:>
Time is relative to the server and currently there is no way to
coordinate server time with client time.  It is not recommended to
use the absolute time version of the C<time> parameter unless you're
sure you are on the same machine as the QEMU instance.

B<Example:>
	
	-> { "execute": "expire_password", "arguments": { "protocol": "vnc",
	                                                  "time": "+60" } }
	<- { "return": {} }








B<change-vnc-password>  (Command)
Change the VNC server password.

=over 4


=item C<'password'>

the new password to use with VNC authentication

=back



B<Since:>
1.1

B<Notes:>
An empty password in this command will set the password to the empty
string.  Existing clients are unaffected by executing this command.






B<change>  (Command)
This command is multiple commands multiplexed together.

=over 4


=item C<'device'>

This is normally the name of a block device but it may also be 'vnc'.
when it's 'vnc', then sub command depends on C<target>

=item C<'target'>

If C<device> is a block device, then this is the new filename.
If C<device> is 'vnc', then if the value 'password' selects the vnc
change password command.   Otherwise, this specifies a new server URI
address to listen to for VNC connections.

=item C<'arg'> (optional)

If C<device> is a block device, then this is an optional format to open
the device with.
If C<device> is 'vnc' and C<target> is 'password', this is the new VNC
password to set.  If this argument is an empty string, then no future
logins will be allowed.



=back



B<Returns:>
Nothing on success.
If C<device> is not a valid block device, DeviceNotFound
If the new block device is encrypted, DeviceEncrypted.  Note that
if this error is returned, the device has been opened successfully
and an additional call to C<block_passwd> is required to set the
device's password.  The behavior of reads and writes to the block
device between when these calls are executed is undefined.

B<Notes:>
This interface is deprecated, and it is strongly recommended that you
avoid using it.  For changing block devices, use
blockdev-change-medium; for changing VNC parameters, use
change-vnc-password.

B<Since:>
0.14.0

B<Example:>
	
	1. Change a removable medium
	
	-> { "execute": "change",
	     "arguments": { "device": "ide1-cd0",
	                    "target": "/srv/images/Fedora-12-x86_64-DVD.iso" } }
	<- { "return": {} }
	
	2. Change VNC password
	
	-> { "execute": "change",
	     "arguments": { "device": "vnc", "target": "password",
	                    "arg": "foobar1" } }
	<- { "return": {} }








B<ObjectTypeInfo> (Struct)


This structure describes a search result from C<qom-list-types>

=over 4


=item C<'name'>

the type name found in the search

=back



B<Since:>
1.1

B<Notes:>
This command is experimental and may change syntax in future releases.






B<qom-list-types>  (Command)
This command will return a list of types given search parameters

=over 4


=item C<'implements'> (optional)

if specified, only return types that implement this type name



=item C<'abstract'> (optional)

if true, include abstract types in the results



=back



B<Returns:>
a list of C<ObjectTypeInfo> or an empty list if no results are found

B<Since:>
1.1






B<DevicePropertyInfo> (Struct)


Information about device properties.

=over 4


=item C<'name'>

the name of the property

=item C<'type'>

the typename of the property

=item C<'description'> (optional)

 if specified, the description of the property.
(since 2.2)

=back



B<Since:>
1.2






B<device-list-properties>  (Command)
List properties associated with a device.

=over 4


=item C<'typename'>

the type name of a device

=back



B<Returns:>
a list of DevicePropertyInfo describing a devices properties

B<Since:>
1.2






B<migrate>  (Command)
Migrates the current running guest to another Virtual Machine.

=over 4


=item C<'uri'>

the Uniform Resource Identifier of the destination VM

=item C<'blk'> (optional)

 do block migration (full disk copy)

=item C<'inc'> (optional)

 incremental disk copy migration

=item C<'detach'> (optional)

this argument exists only for compatibility reasons and
is ignored by QEMU



=back



B<Returns:>
nothing on success

B<Since:>
0.14.0

B<Notes:>

=over 4


=item 1.

The 'query-migrate' command should be used to check migration's progress
and final result (this information is provided by the 'status' member)


=item 2.

All boolean arguments default to false


=item 3.

The user Monitor's "detach" argument is invalid in QMP and should not
be used

=back



B<Example:>
	
	-> { "execute": "migrate", "arguments": { "uri": "tcp:0:4446" } }
	<- { "return": {} }








B<migrate-incoming>  (Command)
Start an incoming migration, the qemu must have been started
with -incoming defer

=over 4


=item C<'uri'>

The Uniform Resource Identifier identifying the source or
address to listen on

=back



B<Returns:>
nothing on success

B<Since:>
2.3

B<Notes:>

=over 4


=item 1.

It's a bad idea to use a string for the uri, but it needs to stay
compatible with -incoming and the format of the uri is already exposed
above libvirt.


=item 2.

QEMU must be started with -incoming defer to allow migrate-incoming to
be used.


=item 3.

The uri format is the same as for -incoming

=back



B<Example:>
	
	-> { "execute": "migrate-incoming",
	     "arguments": { "uri": "tcp::4446" } }
	<- { "return": {} }








B<xen-save-devices-state>  (Command)
Save the state of all devices to file. The RAM and the block devices
of the VM are not saved by this command.

=over 4


=item C<'filename'>

the file to save the state of the devices to as binary
data. See xen-save-devices-state.txt for a description of the binary
format.

=back



B<Returns:>
Nothing on success

B<Since:>
1.1

B<Example:>
	
	-> { "execute": "xen-save-devices-state",
	     "arguments": { "filename": "/tmp/save" } }
	<- { "return": {} }








B<xen-set-global-dirty-log>  (Command)
Enable or disable the global dirty log mode.

=over 4


=item C<'enable'>

true to enable, false to disable.

=back



B<Returns:>
nothing

B<Since:>
1.3

B<Example:>
	
	-> { "execute": "xen-set-global-dirty-log",
	     "arguments": { "enable": true } }
	<- { "return": {} }








B<device_add>  (Command)


=over 4


=item C<'driver'>

the name of the new device's driver

=item C<'bus'> (optional)

 the device's parent bus (device tree path)

=item C<'id'> (optional)

 the device's ID, must be unique

=back

Additional arguments depend on the type.

Add a device.

B<Notes:>

=over 4


=item 1.

For detailed information about this command, please refer to the
'docs/qdev-device-use.txt' file.


=item 2.

It's possible to list device properties by running QEMU with the
"-device DEVICE,help" command-line argument, where DEVICE is the
device's name

=back



B<Example:>
	
	-> { "execute": "device_add",
	     "arguments": { "driver": "e1000", "id": "net1",
	                    "bus": "pci.0",
	                    "mac": "52:54:00:12:34:56" } }
	<- { "return": {} }



B<TODO:>
This command effectively bypasses QAPI completely due to its
"additional arguments" business.  It shouldn't have been added to
the schema in this form.  It should be qapified properly, or
replaced by a properly qapified command.

B<Since:>
0.13






B<device_del>  (Command)
Remove a device from a guest

=over 4


=item C<'id'>

the device's ID or QOM path

=back



B<Returns:>
Nothing on success
If C<id> is not a valid device, DeviceNotFound

B<Notes:>
When this command completes, the device may not be removed from the
guest.  Hot removal is an operation that requires guest cooperation.
This command merely requests that the guest begin the hot removal
process.  Completion of the device removal process is signaled with a
DEVICE_DELETED event. Guest reset will automatically complete removal
for all devices.

B<Since:>
0.14.0

B<Example:>
	
	-> { "execute": "device_del",
	     "arguments": { "id": "net1" } }
	<- { "return": {} }
	
	-> { "execute": "device_del",
	     "arguments": { "id": "/machine/peripheral-anon/device[0]" } }
	<- { "return": {} }








B<DumpGuestMemoryFormat> (Enum)


An enumeration of guest-memory-dump's format.

=over 4


=item C<'elf'>

elf format

=item C<'kdump-zlib'>

kdump-compressed format with zlib-compressed

=item C<'kdump-lzo'>

kdump-compressed format with lzo-compressed

=item C<'kdump-snappy'>

kdump-compressed format with snappy-compressed

=back



B<Since:>
2.0






B<dump-guest-memory>  (Command)
Dump guest's memory to vmcore. It is a synchronous operation that can take
very long depending on the amount of guest memory.

=over 4


=item C<'paging'>

if true, do paging to get guest's memory mapping. This allows
using gdb to process the core file.

IMPORTANT: this option can make QEMU allocate several gigabytes
of RAM. This can happen for a large guest, or a
malicious guest pretending to be large.

Also, paging=true has the following limitations:


=over 4


=item 1.

The guest may be in a catastrophic state or can have corrupted
memory, which cannot be trusted

=item 2.

The guest can be in real-mode even if paging is enabled. For
example, the guest uses ACPI to sleep, and ACPI sleep state
goes in real-mode

=item 3.

Currently only supported on i386 and x86_64.

=back



=item C<'protocol'>

the filename or file descriptor of the vmcore. The supported
protocols are:


=over 4


=item 1.

file: the protocol starts with "file:", and the following
string is the file's path.

=item 2.

fd: the protocol starts with "fd:", and the following string
is the fd's name.

=back



=item C<'detach'> (optional)

 if true, QMP will return immediately rather than
waiting for the dump to finish. The user can track progress
using "query-dump". (since 2.6).

=item C<'begin'> (optional)

 if specified, the starting physical address.

=item C<'length'> (optional)

 if specified, the memory size, in bytes. If you don't
want to dump all guest's memory, please specify the start C<begin>
and C<length>

=item C<'format'> (optional)

 if specified, the format of guest memory dump. But non-elf
format is conflict with paging and filter, ie. C<paging>, C<begin> and
C<length> is not allowed to be specified with non-elf C<format> at the
same time (since 2.0)

=back



B<Note:>
All boolean arguments default to false

B<Returns:>
nothing on success

B<Since:>
1.2

B<Example:>
	
	-> { "execute": "dump-guest-memory",
	     "arguments": { "protocol": "fd:dump" } }
	<- { "return": {} }








B<DumpStatus> (Enum)


Describe the status of a long-running background guest memory dump.

=over 4


=item C<'none'>

no dump-guest-memory has started yet.

=item C<'active'>

there is one dump running in background.

=item C<'completed'>

the last dump has finished successfully.

=item C<'failed'>

the last dump has failed.

=back



B<Since:>
2.6






B<DumpQueryResult> (Struct)


The result format for 'query-dump'.

=over 4


=item C<'status'>

enum of C<DumpStatus>, which shows current dump status

=item C<'completed'>

bytes written in latest dump (uncompressed)

=item C<'total'>

total bytes to be written in latest dump (uncompressed)

=back



B<Since:>
2.6






B<query-dump>  (Command)
Query latest dump status.


B<Returns:>
A C<DumpStatus> object showing the dump status.

B<Since:>
2.6

B<Example:>
	
	-> { "execute": "query-dump" }
	<- { "return": { "status": "active", "completed": 1024000,
	                 "total": 2048000 } }








B<DumpGuestMemoryCapability> (Struct)


A list of the available formats for dump-guest-memory


B<Since:>
2.0






B<query-dump-guest-memory-capability>  (Command)
Returns the available formats for dump-guest-memory


B<Returns:>
A C<DumpGuestMemoryCapability> object listing available formats for
dump-guest-memory

B<Since:>
2.0

B<Example:>
	
	-> { "execute": "query-dump-guest-memory-capability" }
	<- { "return": { "formats":
	                 ["elf", "kdump-zlib", "kdump-lzo", "kdump-snappy"] }








B<dump-skeys>  (Command)
Dump guest's storage keys

=over 4


=item C<'filename'>

the path to the file to dump to

=back

This command is only supported on s390 architecture.

B<Since:>
2.5

B<Example:>
	
	-> { "execute": "dump-skeys",
	     "arguments": { "filename": "/tmp/skeys" } }
	<- { "return": {} }








B<netdev_add>  (Command)
Add a network backend.

=over 4


=item C<'type'>

the type of network backend.  Current valid values are 'user', 'tap',
'vde', 'socket', 'dump' and 'bridge'

=item C<'id'>

the name of the new network backend

=back

Additional arguments depend on the type.

B<TODO:>
This command effectively bypasses QAPI completely due to its
"additional arguments" business.  It shouldn't have been added to
the schema in this form.  It should be qapified properly, or
replaced by a properly qapified command.

B<Since:>
0.14.0

B<Returns:>
Nothing on success
If C<type> is not a valid network backend, DeviceNotFound

B<Example:>
	
	-> { "execute": "netdev_add",
	     "arguments": { "type": "user", "id": "netdev1",
	                    "dnssearch": "example.org" } }
	<- { "return": {} }








B<netdev_del>  (Command)
Remove a network backend.

=over 4


=item C<'id'>

the name of the network backend to remove

=back



B<Returns:>
Nothing on success
If C<id> is not a valid network backend, DeviceNotFound

B<Since:>
0.14.0

B<Example:>
	
	-> { "execute": "netdev_del", "arguments": { "id": "netdev1" } }
	<- { "return": {} }








B<object-add>  (Command)
Create a QOM object.

=over 4


=item C<'qom-type'>

the class name for the object to be created

=item C<'id'>

the name of the new object

=item C<'props'> (optional)

 a dictionary of properties to be passed to the backend

=back



B<Returns:>
Nothing on success
Error if C<qom-type> is not a valid class name

B<Since:>
2.0

B<Example:>
	
	-> { "execute": "object-add",
	     "arguments": { "qom-type": "rng-random", "id": "rng1",
	                    "props": { "filename": "/dev/hwrng" } } }
	<- { "return": {} }








B<object-del>  (Command)
Remove a QOM object.

=over 4


=item C<'id'>

the name of the QOM object to remove

=back



B<Returns:>
Nothing on success
Error if C<id> is not a valid id for a QOM object

B<Since:>
2.0

B<Example:>
	
	-> { "execute": "object-del", "arguments": { "id": "rng1" } }
	<- { "return": {} }








B<NetdevNoneOptions> (Struct)


Use it alone to have zero network devices.


B<Since:>
1.2






B<NetLegacyNicOptions> (Struct)


Create a new Network Interface Card.

=over 4


=item C<'netdev'> (optional)

 id of -netdev to connect to

=item C<'macaddr'> (optional)

 MAC address

=item C<'model'> (optional)

 device model (e1000, rtl8139, virtio etc.)

=item C<'addr'> (optional)

 PCI device address

=item C<'vectors'> (optional)

 number of MSI-x vectors, 0 to disable MSI-X

=back



B<Since:>
1.2






B<String> (Struct)


A fat type wrapping 'str', to be embedded in lists.


B<Since:>
1.2






B<NetdevUserOptions> (Struct)


Use the user mode network stack which requires no administrator privilege to
run.

=over 4


=item C<'hostname'> (optional)

 client hostname reported by the builtin DHCP server

=item C<'restrict'> (optional)

 isolate the guest from the host

=item C<'ipv4'> (optional)

 whether to support IPv4, default true for enabled
(since 2.6)

=item C<'ipv6'> (optional)

 whether to support IPv6, default true for enabled
(since 2.6)

=item C<'ip'> (optional)

 legacy parameter, use net= instead

=item C<'net'> (optional)

 IP network address that the guest will see, in the
form addr[/netmask] The netmask is optional, and can be
either in the form a.b.c.d or as a number of valid top-most
bits. Default is 10.0.2.0/24.

=item C<'host'> (optional)

 guest-visible address of the host

=item C<'tftp'> (optional)

 root directory of the built-in TFTP server

=item C<'bootfile'> (optional)

 BOOTP filename, for use with tftp=

=item C<'dhcpstart'> (optional)

 the first of the 16 IPs the built-in DHCP server can
assign

=item C<'dns'> (optional)

 guest-visible address of the virtual nameserver

=item C<'dnssearch'> (optional)

 list of DNS suffixes to search, passed as DHCP option
to the guest

=item C<'ipv6-prefix'> (optional)

 IPv6 network prefix (default is fec0::) (since
2.6). The network prefix is given in the usual
hexadecimal IPv6 address notation.

=item C<'ipv6-prefixlen'> (optional)

 IPv6 network prefix length (default is 64)
(since 2.6)

=item C<'ipv6-host'> (optional)

 guest-visible IPv6 address of the host (since 2.6)

=item C<'ipv6-dns'> (optional)

 guest-visible IPv6 address of the virtual
nameserver (since 2.6)

=item C<'smb'> (optional)

 root directory of the built-in SMB server

=item C<'smbserver'> (optional)

 IP address of the built-in SMB server

=item C<'hostfwd'> (optional)

 redirect incoming TCP or UDP host connections to guest
endpoints

=item C<'guestfwd'> (optional)

 forward guest TCP connections

=back



B<Since:>
1.2






B<NetdevTapOptions> (Struct)


Connect the host TAP network interface name to the VLAN.

=over 4


=item C<'ifname'> (optional)

 interface name

=item C<'fd'> (optional)

 file descriptor of an already opened tap

=item C<'fds'> (optional)

 multiple file descriptors of already opened multiqueue capable
tap

=item C<'script'> (optional)

 script to initialize the interface

=item C<'downscript'> (optional)

 script to shut down the interface

=item C<'br'> (optional)

 bridge name (since 2.8)

=item C<'helper'> (optional)

 command to execute to configure bridge

=item C<'sndbuf'> (optional)

 send buffer limit. Understands [TGMKkb] suffixes.

=item C<'vnet_hdr'> (optional)

 enable the IFF_VNET_HDR flag on the tap interface

=item C<'vhost'> (optional)

 enable vhost-net network accelerator

=item C<'vhostfd'> (optional)

 file descriptor of an already opened vhost net device

=item C<'vhostfds'> (optional)

 file descriptors of multiple already opened vhost net
devices

=item C<'vhostforce'> (optional)

 vhost on for non-MSIX virtio guests

=item C<'queues'> (optional)

 number of queues to be created for multiqueue capable tap

=item C<'poll-us'> (optional)

 maximum number of microseconds that could
be spent on busy polling for tap (since 2.7)

=back



B<Since:>
1.2






B<NetdevSocketOptions> (Struct)


Connect the VLAN to a remote VLAN in another QEMU virtual machine using a TCP
socket connection.

=over 4


=item C<'fd'> (optional)

 file descriptor of an already opened socket

=item C<'listen'> (optional)

 port number, and optional hostname, to listen on

=item C<'connect'> (optional)

 port number, and optional hostname, to connect to

=item C<'mcast'> (optional)

 UDP multicast address and port number

=item C<'localaddr'> (optional)

 source address and port for multicast and udp packets

=item C<'udp'> (optional)

 UDP unicast address and port number

=back



B<Since:>
1.2






B<NetdevL2TPv3Options> (Struct)


Connect the VLAN to Ethernet over L2TPv3 Static tunnel

=over 4


=item C<'src'>

source address

=item C<'dst'>

destination address

=item C<'srcport'> (optional)

 source port - mandatory for udp, optional for ip

=item C<'dstport'> (optional)

 destination port - mandatory for udp, optional for ip

=item C<'ipv6'> (optional)

 - force the use of ipv6

=item C<'udp'> (optional)

 - use the udp version of l2tpv3 encapsulation

=item C<'cookie64'> (optional)

 - use 64 bit coookies

=item C<'counter'> (optional)

 have sequence counter

=item C<'pincounter'> (optional)

 pin sequence counter to zero -
workaround for buggy implementations or
networks with packet reorder

=item C<'txcookie'> (optional)

 32 or 64 bit transmit cookie

=item C<'rxcookie'> (optional)

 32 or 64 bit receive cookie

=item C<'txsession'>

32 bit transmit session

=item C<'rxsession'> (optional)

 32 bit receive session - if not specified
set to the same value as transmit

=item C<'offset'> (optional)

 additional offset - allows the insertion of
additional application-specific data before the packet payload

=back



B<Since:>
2.1






B<NetdevVdeOptions> (Struct)


Connect the VLAN to a vde switch running on the host.

=over 4


=item C<'sock'> (optional)

 socket path

=item C<'port'> (optional)

 port number

=item C<'group'> (optional)

 group owner of socket

=item C<'mode'> (optional)

 permissions for socket

=back



B<Since:>
1.2






B<NetdevDumpOptions> (Struct)


Dump VLAN network traffic to a file.

=over 4


=item C<'len'> (optional)

 per-packet size limit (64k default). Understands [TGMKkb]
suffixes.

=item C<'file'> (optional)

 dump file path (default is qemu-vlan0.pcap)

=back



B<Since:>
1.2






B<NetdevBridgeOptions> (Struct)


Connect a host TAP network interface to a host bridge device.

=over 4


=item C<'br'> (optional)

 bridge name

=item C<'helper'> (optional)

 command to execute to configure bridge

=back



B<Since:>
1.2






B<NetdevHubPortOptions> (Struct)


Connect two or more net clients through a software hub.

=over 4


=item C<'hubid'>

hub identifier number

=back



B<Since:>
1.2






B<NetdevNetmapOptions> (Struct)


Connect a client to a netmap-enabled NIC or to a VALE switch port

=over 4


=item C<'ifname'>

Either the name of an existing network interface supported by
netmap, or the name of a VALE port (created on the fly).
A VALE port name is in the form 'valeXXX:YYY', where XXX and
YYY are non-negative integers. XXX identifies a switch and
YYY identifies a port of the switch. VALE ports having the
same XXX are therefore connected to the same switch.

=item C<'devname'> (optional)

 path of the netmap device (default: '/dev/netmap').

=back



B<Since:>
2.0






B<NetdevVhostUserOptions> (Struct)


Vhost-user network backend

=over 4


=item C<'chardev'>

name of a unix socket chardev

=item C<'vhostforce'> (optional)

 vhost on for non-MSIX virtio guests (default: false).

=item C<'queues'> (optional)

 number of queues to be created for multiqueue vhost-user
(default: 1) (Since 2.5)

=back



B<Since:>
2.1






B<NetClientDriver> (Enum)


Available netdev drivers.

=over 4


=item C<'none'>



=item C<'nic'>



=item C<'user'>



=item C<'tap'>



=item C<'l2tpv3'>



=item C<'socket'>



=item C<'vde'>



=item C<'dump'>



=item C<'bridge'>



=item C<'hubport'>



=item C<'netmap'>



=item C<'vhost-user'>



=back



B<Since:>
2.7






B<Union> (Flat)


Captures the configuration of a network device.

=over 4


=item C<'id'>

identifier for monitor commands.

=item C<'type'>

Specify the driver used for interpreting remaining arguments.

=back



B<Since:>
1.2

'l2tpv3' - since 2.1






B<NetLegacy> (Struct)


Captures the configuration of a network device; legacy.

=over 4


=item C<'vlan'> (optional)

 vlan number

=item C<'id'> (optional)

 identifier for monitor commands

=item C<'name'> (optional)

 identifier for monitor commands, ignored if C<id> is present

=item C<'opts'>

device type specific properties (legacy)

=back



B<Since:>
1.2






B<Union> (Simple)


Like Netdev, but for use only by the legacy command line options


B<Since:>
1.2






B<NetFilterDirection> (Enum)


Indicates whether a netfilter is attached to a netdev's transmit queue or
receive queue or both.

=over 4


=item C<'all'>

the filter is attached both to the receive and the transmit
queue of the netdev (default).

=item C<'rx'>

the filter is attached to the receive queue of the netdev,
where it will receive packets sent to the netdev.

=item C<'tx'>

the filter is attached to the transmit queue of the netdev,
where it will receive packets sent by the netdev.

=back



B<Since:>
2.5






B<InetSocketAddress> (Struct)


Captures a socket address or address range in the Internet namespace.

=over 4


=item C<'host'>

host part of the address

=item C<'port'>

port part of the address, or lowest port if C<to> is present

=item C<'numeric'> (optional)

 true if the host/port are guaranteed to be numeric,
false if name resolution should be attempted. Defaults to false.
(Since 2.9)

=item C<'to'> (optional)

highest port to try



=item C<'ipv4'> (optional)

whether to accept IPv4 addresses, default try both IPv4 and IPv6


=item C<'ipv6'> (optional)

whether to accept IPv6 addresses, default try both IPv4 and IPv6


=back



B<Since:>
1.3






B<UnixSocketAddress> (Struct)


Captures a socket address in the local ("Unix socket") namespace.

=over 4


=item C<'path'>

filesystem path to use

=back



B<Since:>
1.3






B<VsockSocketAddress> (Struct)


Captures a socket address in the vsock namespace.

=over 4


=item C<'cid'>

unique host identifier

=item C<'port'>

port

=back



B<Note:>
string types are used to allow for possible future hostname or
service resolution support.

B<Since:>
2.8






B<Union> (Simple)


Captures the address of a socket, which could also be a named file descriptor


B<Since:>
1.3






B<getfd>  (Command)
Receive a file descriptor via SCM rights and assign it a name

=over 4


=item C<'fdname'>

file descriptor name

=back



B<Returns:>
Nothing on success

B<Since:>
0.14.0

B<Notes:>
If C<fdname> already exists, the file descriptor assigned to
it will be closed and replaced by the received file
descriptor.

The 'closefd' command can be used to explicitly close the
file descriptor when it is no longer needed.

B<Example:>
	
	-> { "execute": "getfd", "arguments": { "fdname": "fd1" } }
	<- { "return": {} }








B<closefd>  (Command)
Close a file descriptor previously passed via SCM rights

=over 4


=item C<'fdname'>

file descriptor name

=back



B<Returns:>
Nothing on success

B<Since:>
0.14.0

B<Example:>
	
	-> { "execute": "closefd", "arguments": { "fdname": "fd1" } }
	<- { "return": {} }








B<MachineInfo> (Struct)


Information describing a machine.

=over 4


=item C<'name'>

the name of the machine

=item C<'alias'> (optional)

 an alias for the machine name

=item C<'is-default'> (optional)

 whether the machine is default

=item C<'cpu-max'>

maximum number of CPUs supported by the machine type
(since 1.5.0)

=item C<'hotpluggable-cpus'>

cpu hotplug via -device is supported (since 2.7.0)

=back



B<Since:>
1.2.0






B<query-machines>  (Command)
Return a list of supported machines


B<Returns:>
a list of MachineInfo

B<Since:>
1.2.0






B<CpuDefinitionInfo> (Struct)


Virtual CPU definition.

=over 4


=item C<'name'>

the name of the CPU definition

=item C<'migration-safe'> (optional)

 whether a CPU definition can be safely used for
migration in combination with a QEMU compatibility machine
when migrating between different QMU versions and between
hosts with different sets of (hardware or software)
capabilities. If not provided, information is not available
and callers should not assume the CPU definition to be
migration-safe. (since 2.8)

=item C<'static'>

whether a CPU definition is static and will not change depending on
QEMU version, machine type, machine options and accelerator options.
A static model is always migration-safe. (since 2.8)

=item C<'unavailable-features'> (optional)

 List of properties that prevent
the CPU model from running in the current
host. (since 2.8)

=item C<'typename'>

Type name that can be used as argument to C<device-list-properties>,
to introspect properties configurable using -cpu or -global.
(since 2.9)

=back

C<unavailable-features> is a list of QOM property names that
represent CPU model attributes that prevent the CPU from running.
If the QOM property is read-only, that means there's no known
way to make the CPU model run in the current host. Implementations
that choose not to provide specific information return the
property name "type".
If the property is read-write, it means that it MAY be possible
to run the CPU model in the current host if that property is
changed. Management software can use it as hints to suggest or
choose an alternative for the user, or just to generate meaningful
error messages explaining why the CPU model can't be used.
If C<unavailable-features> is an empty list, the CPU model is
runnable using the current host and machine-type.
If C<unavailable-features> is not present, runnability
information for the CPU is not available.

B<Since:>
1.2.0






B<query-cpu-definitions>  (Command)
Return a list of supported virtual CPU definitions


B<Returns:>
a list of CpuDefInfo

B<Since:>
1.2.0






B<CpuModelInfo> (Struct)


Virtual CPU model.

A CPU model consists of the name of a CPU definition, to which
delta changes are applied (e.g. features added/removed). Most magic values
that an architecture might require should be hidden behind the name.
However, if required, architectures can expose relevant properties.

=over 4


=item C<'name'>

the name of the CPU definition the model is based on

=item C<'props'> (optional)

 a dictionary of QOM properties to be applied

=back



B<Since:>
2.8.0






B<CpuModelExpansionType> (Enum)


An enumeration of CPU model expansion types.

=over 4


=item C<'static'>

Expand to a static CPU model, a combination of a static base
model name and property delta changes. As the static base model will
never change, the expanded CPU model will be the same, independant of
independent of QEMU version, machine type, machine options, and
accelerator options. Therefore, the resulting model can be used by
tooling without having to specify a compatibility machine - e.g. when
displaying the "host" model. static CPU models are migration-safe.

=item C<'full'>

Expand all properties. The produced model is not guaranteed to be
migration-safe, but allows tooling to get an insight and work with
model details.

=back



B<Since:>
2.8.0






B<CpuModelExpansionInfo> (Struct)


The result of a cpu model expansion.

=over 4


=item C<'model'>

the expanded CpuModelInfo.

=back



B<Since:>
2.8.0






B<query-cpu-model-expansion>  (Command)
Expands a given CPU model (or a combination of CPU model + additional options)
to different granularities, allowing tooling to get an understanding what a
specific CPU model looks like in QEMU under a certain configuration.

This interface can be used to query the "host" CPU model.

The data returned by this command may be affected by:


=over 4


=item *

QEMU version: CPU models may look different depending on the QEMU version.
(Except for CPU models reported as "static" in query-cpu-definitions.)

=item *

machine-type: CPU model  may look different depending on the machine-type.
(Except for CPU models reported as "static" in query-cpu-definitions.)

=item *

machine options (including accelerator): in some architectures, CPU models
may look different depending on machine and accelerator options. (Except for
CPU models reported as "static" in query-cpu-definitions.)

=item *

"-cpu" arguments and global properties: arguments to the -cpu option and
global properties may affect expansion of CPU models. Using
query-cpu-model-expansion while using these is not advised.


=back


Some architectures may not support all expansion types. s390x supports
"full" and "static".


B<Returns:>
a CpuModelExpansionInfo. Returns an error if expanding CPU models is
not supported, if the model cannot be expanded, if the model contains
an unknown CPU definition name, unknown properties or properties
with a wrong type. Also returns an error if an expansion type is
not supported.

B<Since:>
2.8.0






B<CpuModelCompareResult> (Enum)


An enumeration of CPU model comparation results. The result is usually
calculated using e.g. CPU features or CPU generations.

=over 4


=item C<'incompatible'>

If model A is incompatible to model B, model A is not
guaranteed to run where model B runs and the other way around.

=item C<'identical'>

If model A is identical to model B, model A is guaranteed to run
where model B runs and the other way around.

=item C<'superset'>

If model A is a superset of model B, model B is guaranteed to run
where model A runs. There are no guarantees about the other way.

=item C<'subset'>

If model A is a subset of model B, model A is guaranteed to run
where model B runs. There are no guarantees about the other way.

=back



B<Since:>
2.8.0






B<CpuModelCompareInfo> (Struct)


The result of a CPU model comparison.

=over 4


=item C<'result'>

The result of the compare operation.

=item C<'responsible-properties'>

List of properties that led to the comparison result
not being identical.

=back

C<responsible-properties> is a list of QOM property names that led to
both CPUs not being detected as identical. For identical models, this
list is empty.
If a QOM property is read-only, that means there's no known way to make the
CPU models identical. If the special property name "type" is included, the
models are by definition not identical and cannot be made identical.

B<Since:>
2.8.0






B<query-cpu-model-comparison>  (Command)
Compares two CPU models, returning how they compare in a specific
configuration. The results indicates how both models compare regarding
runnability. This result can be used by tooling to make decisions if a
certain CPU model will run in a certain configuration or if a compatible
CPU model has to be created by baselining.

Usually, a CPU model is compared against the maximum possible CPU model
of a certain configuration (e.g. the "host" model for KVM). If that CPU
model is identical or a subset, it will run in that configuration.

The result returned by this command may be affected by:


=over 4


=item *

QEMU version: CPU models may look different depending on the QEMU version.
(Except for CPU models reported as "static" in query-cpu-definitions.)

=item *

machine-type: CPU model may look different depending on the machine-type.
(Except for CPU models reported as "static" in query-cpu-definitions.)

=item *

machine options (including accelerator): in some architectures, CPU models
may look different depending on machine and accelerator options. (Except for
CPU models reported as "static" in query-cpu-definitions.)

=item *

"-cpu" arguments and global properties: arguments to the -cpu option and
global properties may affect expansion of CPU models. Using
query-cpu-model-expansion while using these is not advised.


=back


Some architectures may not support comparing CPU models. s390x supports
comparing CPU models.


B<Returns:>
a CpuModelBaselineInfo. Returns an error if comparing CPU models is
not supported, if a model cannot be used, if a model contains
an unknown cpu definition name, unknown properties or properties
with wrong types.

B<Since:>
2.8.0






B<CpuModelBaselineInfo> (Struct)


The result of a CPU model baseline.

=over 4


=item C<'model'>

the baselined CpuModelInfo.

=back



B<Since:>
2.8.0






B<query-cpu-model-baseline>  (Command)
Baseline two CPU models, creating a compatible third model. The created
model will always be a static, migration-safe CPU model (see "static"
CPU model expansion for details).

This interface can be used by tooling to create a compatible CPU model out
two CPU models. The created CPU model will be identical to or a subset of
both CPU models when comparing them. Therefore, the created CPU model is
guaranteed to run where the given CPU models run.

The result returned by this command may be affected by:


=over 4


=item *

QEMU version: CPU models may look different depending on the QEMU version.
(Except for CPU models reported as "static" in query-cpu-definitions.)

=item *

machine-type: CPU model may look different depending on the machine-type.
(Except for CPU models reported as "static" in query-cpu-definitions.)

=item *

machine options (including accelerator): in some architectures, CPU models
may look different depending on machine and accelerator options. (Except for
CPU models reported as "static" in query-cpu-definitions.)

=item *

"-cpu" arguments and global properties: arguments to the -cpu option and
global properties may affect expansion of CPU models. Using
query-cpu-model-expansion while using these is not advised.


=back


Some architectures may not support baselining CPU models. s390x supports
baselining CPU models.


B<Returns:>
a CpuModelBaselineInfo. Returns an error if baselining CPU models is
not supported, if a model cannot be used, if a model contains
an unknown cpu definition name, unknown properties or properties
with wrong types.

B<Since:>
2.8.0






B<AddfdInfo> (Struct)


Information about a file descriptor that was added to an fd set.

=over 4


=item C<'fdset-id'>

The ID of the fd set that C<fd> was added to.

=item C<'fd'>

The file descriptor that was received via SCM rights and
added to the fd set.

=back



B<Since:>
1.2.0






B<add-fd>  (Command)
Add a file descriptor, that was passed via SCM rights, to an fd set.

=over 4


=item C<'fdset-id'> (optional)

 The ID of the fd set to add the file descriptor to.

=item C<'opaque'> (optional)

 A free-form string that can be used to describe the fd.

=back



B<Returns:>
C<AddfdInfo> on success

If file descriptor was not received, FdNotSupplied

If C<fdset-id> is a negative value, InvalidParameterValue

B<Notes:>
The list of fd sets is shared by all monitor connections.

If C<fdset-id> is not specified, a new fd set will be created.

B<Since:>
1.2.0

B<Example:>
	
	-> { "execute": "add-fd", "arguments": { "fdset-id": 1 } }
	<- { "return": { "fdset-id": 1, "fd": 3 } }








B<remove-fd>  (Command)
Remove a file descriptor from an fd set.

=over 4


=item C<'fdset-id'>

The ID of the fd set that the file descriptor belongs to.

=item C<'fd'> (optional)

 The file descriptor that is to be removed.

=back



B<Returns:>
Nothing on success
If C<fdset-id> or C<fd> is not found, FdNotFound

B<Since:>
1.2.0

B<Notes:>
The list of fd sets is shared by all monitor connections.

If C<fd> is not specified, all file descriptors in C<fdset-id>
will be removed.

B<Example:>
	
	-> { "execute": "remove-fd", "arguments": { "fdset-id": 1, "fd": 3 } }
	<- { "return": {} }








B<FdsetFdInfo> (Struct)


Information about a file descriptor that belongs to an fd set.

=over 4


=item C<'fd'>

The file descriptor value.

=item C<'opaque'> (optional)

 A free-form string that can be used to describe the fd.

=back



B<Since:>
1.2.0






B<FdsetInfo> (Struct)


Information about an fd set.

=over 4


=item C<'fdset-id'>

The ID of the fd set.

=item C<'fds'>

A list of file descriptors that belong to this fd set.

=back



B<Since:>
1.2.0






B<query-fdsets>  (Command)
Return information describing all fd sets.


B<Returns:>
A list of C<FdsetInfo>

B<Since:>
1.2.0

B<Note:>
The list of fd sets is shared by all monitor connections.

B<Example:>
	
	-> { "execute": "query-fdsets" }
	<- { "return": [
	       {
	         "fds": [
	           {
	             "fd": 30,
	             "opaque": "rdonly:/path/to/file"
	           },
	           {
	             "fd": 24,
	             "opaque": "rdwr:/path/to/file"
	           }
	         ],
	         "fdset-id": 1
	       },
	       {
	         "fds": [
	           {
	             "fd": 28
	           },
	           {
	             "fd": 29
	           }
	         ],
	         "fdset-id": 0
	       }
	     ]
	   }








B<TargetInfo> (Struct)


Information describing the QEMU target.

=over 4


=item C<'arch'>

the target architecture (eg "x86_64", "i386", etc)

=back



B<Since:>
1.2.0






B<query-target>  (Command)
Return information about the target for this QEMU


B<Returns:>
TargetInfo

B<Since:>
1.2.0






B<QKeyCode> (Enum)


An enumeration of key name.

This is used by the C<send-key> command.

=over 4


=item C<'unmapped'>

since 2.0

=item C<'pause'>

since 2.0

=item C<'ro'>

since 2.4

=item C<'kp_comma'>

since 2.4

=item C<'kp_equals'>

since 2.6

=item C<'power'>

since 2.6

=item C<'hiragana'>

since 2.9

=item C<'henkan'>

since 2.9

=item C<'yen'>

since 2.9

=item C<'shift'>



=item C<'shift_r'>



=item C<'alt'>



=item C<'alt_r'>



=item C<'altgr'>



=item C<'altgr_r'>



=item C<'ctrl'>



=item C<'ctrl_r'>



=item C<'menu'>



=item C<'esc'>



=item C<'1'>



=item C<'2'>



=item C<'3'>



=item C<'4'>



=item C<'5'>



=item C<'6'>



=item C<'7'>



=item C<'8'>



=item C<'9'>



=item C<'0'>



=item C<'minus'>



=item C<'equal'>



=item C<'backspace'>



=item C<'tab'>



=item C<'q'>



=item C<'w'>



=item C<'e'>



=item C<'r'>



=item C<'t'>



=item C<'y'>



=item C<'u'>



=item C<'i'>



=item C<'o'>



=item C<'p'>



=item C<'bracket_left'>



=item C<'bracket_right'>



=item C<'ret'>



=item C<'a'>



=item C<'s'>



=item C<'d'>



=item C<'f'>



=item C<'g'>



=item C<'h'>



=item C<'j'>



=item C<'k'>



=item C<'l'>



=item C<'semicolon'>



=item C<'apostrophe'>



=item C<'grave_accent'>



=item C<'backslash'>



=item C<'z'>



=item C<'x'>



=item C<'c'>



=item C<'v'>



=item C<'b'>



=item C<'n'>



=item C<'m'>



=item C<'comma'>



=item C<'dot'>



=item C<'slash'>



=item C<'asterisk'>



=item C<'spc'>



=item C<'caps_lock'>



=item C<'f1'>



=item C<'f2'>



=item C<'f3'>



=item C<'f4'>



=item C<'f5'>



=item C<'f6'>



=item C<'f7'>



=item C<'f8'>



=item C<'f9'>



=item C<'f10'>



=item C<'num_lock'>



=item C<'scroll_lock'>



=item C<'kp_divide'>



=item C<'kp_multiply'>



=item C<'kp_subtract'>



=item C<'kp_add'>



=item C<'kp_enter'>



=item C<'kp_decimal'>



=item C<'sysrq'>



=item C<'kp_0'>



=item C<'kp_1'>



=item C<'kp_2'>



=item C<'kp_3'>



=item C<'kp_4'>



=item C<'kp_5'>



=item C<'kp_6'>



=item C<'kp_7'>



=item C<'kp_8'>



=item C<'kp_9'>



=item C<'less'>



=item C<'f11'>



=item C<'f12'>



=item C<'print'>



=item C<'home'>



=item C<'pgup'>



=item C<'pgdn'>



=item C<'end'>



=item C<'left'>



=item C<'up'>



=item C<'down'>



=item C<'right'>



=item C<'insert'>



=item C<'delete'>



=item C<'stop'>



=item C<'again'>



=item C<'props'>



=item C<'undo'>



=item C<'front'>



=item C<'copy'>



=item C<'open'>



=item C<'paste'>



=item C<'find'>



=item C<'cut'>



=item C<'lf'>



=item C<'help'>



=item C<'meta_l'>



=item C<'meta_r'>



=item C<'compose'>



=back



B<Since:>
1.3.0






B<Union> (Simple)


Represents a keyboard key.


B<Since:>
1.3.0






B<send-key>  (Command)
Send keys to guest.

=over 4


=item C<'keys'>

An array of C<KeyValue> elements. All C<KeyValues> in this array are
simultaneously sent to the guest. A C<KeyValue>.number value is sent
directly to the guest, while C<KeyValue>.qcode must be a valid
C<QKeyCode> value

=item C<'hold-time'> (optional)

 time to delay key up events, milliseconds. Defaults
to 100

=back



B<Returns:>
Nothing on success
If key is unknown or redundant, InvalidParameter

B<Since:>
1.3.0

B<Example:>
	
	-> { "execute": "send-key",
	     "arguments": { "keys": [ { "type": "qcode", "data": "ctrl" },
	                              { "type": "qcode", "data": "alt" },
	                              { "type": "qcode", "data": "delete" } ] } }
	<- { "return": {} }








B<screendump>  (Command)
Write a PPM of the VGA screen to a file.

=over 4


=item C<'filename'>

the path of a new PPM file to store the image

=back



B<Returns:>
Nothing on success

B<Since:>
0.14.0

B<Example:>
	
	-> { "execute": "screendump",
	     "arguments": { "filename": "/tmp/image" } }
	<- { "return": {} }








B<ChardevCommon> (Struct)


Configuration shared across all chardev backends

=over 4


=item C<'logfile'> (optional)

 The name of a logfile to save output

=item C<'logappend'> (optional)

 true to append instead of truncate
(default to false to truncate)

=back



B<Since:>
2.6






B<ChardevFile> (Struct)


Configuration info for file chardevs.

=over 4


=item C<'in'> (optional)

 The name of the input file

=item C<'out'>

The name of the output file

=item C<'append'> (optional)

 Open the file in append mode (default false to
truncate) (Since 2.6)

=back



B<Since:>
1.4






B<ChardevHostdev> (Struct)


Configuration info for device and pipe chardevs.

=over 4


=item C<'device'>

The name of the special file for the device,
i.e. /dev/ttyS0 on Unix or COM1: on Windows

=back



B<Since:>
1.4






B<ChardevSocket> (Struct)


Configuration info for (stream) socket chardevs.

=over 4


=item C<'addr'>

socket address to listen on (server=true)
or connect to (server=false)

=item C<'tls-creds'> (optional)

 the ID of the TLS credentials object (since 2.6)

=item C<'server'> (optional)

 create server socket (default: true)

=item C<'wait'> (optional)

 wait for incoming connection on server
sockets (default: false).

=item C<'nodelay'> (optional)

 set TCP_NODELAY socket option (default: false)

=item C<'telnet'> (optional)

 enable telnet protocol on server
sockets (default: false)

=item C<'reconnect'> (optional)

 For a client socket, if a socket is disconnected,
then attempt a reconnect after the given number of seconds.
Setting this to zero disables this function. (default: 0)
(Since: 2.2)

=back



B<Since:>
1.4






B<ChardevUdp> (Struct)


Configuration info for datagram socket chardevs.

=over 4


=item C<'remote'>

remote address

=item C<'local'> (optional)

 local address

=back



B<Since:>
1.5






B<ChardevMux> (Struct)


Configuration info for mux chardevs.

=over 4


=item C<'chardev'>

name of the base chardev.

=back



B<Since:>
1.5






B<ChardevStdio> (Struct)


Configuration info for stdio chardevs.

=over 4


=item C<'signal'> (optional)

 Allow signals (such as SIGINT triggered by ^C)
be delivered to qemu.  Default: true in -nographic mode,
false otherwise.

=back



B<Since:>
1.5






B<ChardevSpiceChannel> (Struct)


Configuration info for spice vm channel chardevs.

=over 4


=item C<'type'>

kind of channel (for example vdagent).

=back



B<Since:>
1.5






B<ChardevSpicePort> (Struct)


Configuration info for spice port chardevs.

=over 4


=item C<'fqdn'>

name of the channel (see docs/spice-port-fqdn.txt)

=back



B<Since:>
1.5






B<ChardevVC> (Struct)


Configuration info for virtual console chardevs.

=over 4


=item C<'width'> (optional)

console width,  in pixels


=item C<'height'> (optional)

console height, in pixels


=item C<'cols'> (optional)

console width,  in chars


=item C<'rows'> (optional)

console height, in chars



=back



B<Since:>
1.5






B<ChardevRingbuf> (Struct)


Configuration info for ring buffer chardevs.

=over 4


=item C<'size'> (optional)

 ring buffer size, must be power of two, default is 65536

=back



B<Since:>
1.5






B<Union> (Simple)


Configuration info for the new chardev backend.


B<Since:>
1.4 (testdev since 2.2, wctablet since 2.9)






B<ChardevReturn> (Struct)


Return info about the chardev backend just created.

=over 4


=item C<'pty'> (optional)

 name of the slave pseudoterminal device, present if
and only if a chardev of type 'pty' was created

=back



B<Since:>
1.4






B<chardev-add>  (Command)
Add a character device backend

=over 4


=item C<'id'>

the chardev's ID, must be unique

=item C<'backend'>

backend type and parameters

=back



B<Returns:>
ChardevReturn.

B<Since:>
1.4

B<Example:>
	
	-> { "execute" : "chardev-add",
	     "arguments" : { "id" : "foo",
	                     "backend" : { "type" : "null", "data" : {} } } }
	<- { "return": {} }
	
	-> { "execute" : "chardev-add",
	     "arguments" : { "id" : "bar",
	                     "backend" : { "type" : "file",
	                                   "data" : { "out" : "/tmp/bar.log" } } } }
	<- { "return": {} }
	
	-> { "execute" : "chardev-add",
	     "arguments" : { "id" : "baz",
	                     "backend" : { "type" : "pty", "data" : {} } } }
	<- { "return": { "pty" : "/dev/pty/42" } }








B<chardev-remove>  (Command)
Remove a character device backend

=over 4


=item C<'id'>

the chardev's ID, must exist and not be in use

=back



B<Returns:>
Nothing on success

B<Since:>
1.4

B<Example:>
	
	-> { "execute": "chardev-remove", "arguments": { "id" : "foo" } }
	<- { "return": {} }








B<TpmModel> (Enum)


An enumeration of TPM models

=over 4


=item C<'tpm-tis'>

TPM TIS model

=back



B<Since:>
1.5






B<query-tpm-models>  (Command)
Return a list of supported TPM models


B<Returns:>
a list of TpmModel

B<Since:>
1.5

B<Example:>
	
	-> { "execute": "query-tpm-models" }
	<- { "return": [ "tpm-tis" ] }








B<TpmType> (Enum)


An enumeration of TPM types

=over 4


=item C<'passthrough'>

TPM passthrough type

=back



B<Since:>
1.5






B<query-tpm-types>  (Command)
Return a list of supported TPM types


B<Returns:>
a list of TpmType

B<Since:>
1.5

B<Example:>
	
	-> { "execute": "query-tpm-types" }
	<- { "return": [ "passthrough" ] }








B<TPMPassthroughOptions> (Struct)


Information about the TPM passthrough type

=over 4


=item C<'path'> (optional)

 string describing the path used for accessing the TPM device

=item C<'cancel-path'> (optional)

 string showing the TPM's sysfs cancel file
for cancellation of TPM commands while they are executing

=back



B<Since:>
1.5






B<Union> (Simple)


A union referencing different TPM backend types' configuration options

=over 4


=item C<'type'>

'passthrough' The configuration options for the TPM passthrough type

=back



B<Since:>
1.5






B<TPMInfo> (Struct)


Information about the TPM

=over 4


=item C<'id'>

The Id of the TPM

=item C<'model'>

The TPM frontend model

=item C<'options'>

The TPM (backend) type configuration options

=back



B<Since:>
1.5






B<query-tpm>  (Command)
Return information about the TPM device


B<Returns:>
C<TPMInfo> on success

B<Since:>
1.5

B<Example:>
	
	-> { "execute": "query-tpm" }
	<- { "return":
	     [
	       { "model": "tpm-tis",
	         "options":
	           { "type": "passthrough",
	             "data":
	               { "cancel-path": "/sys/class/misc/tpm0/device/cancel",
	                 "path": "/dev/tpm0"
	               }
	           },
	         "id": "tpm0"
	       }
	     ]
	   }








B<AcpiTableOptions> (Struct)


Specify an ACPI table on the command line to load.

At most one of C<file> and C<data> can be specified. The list of files specified
by any one of them is loaded and concatenated in order. If both are omitted,
C<data> is implied.

Other fields / optargs can be used to override fields of the generic ACPI
table header; refer to the ACPI specification 5.0, section 5.2.6 System
Description Table Header. If a header field is not overridden, then the
corresponding value from the concatenated blob is used (in case of C<file>), or
it is filled in with a hard-coded value (in case of C<data>).

String fields are copied into the matching ACPI member from lowest address
upwards, and silently truncated / NUL-padded to length.

=over 4


=item C<'sig'> (optional)

 table signature / identifier (4 bytes)

=item C<'rev'> (optional)

 table revision number (dependent on signature, 1 byte)

=item C<'oem_id'> (optional)

 OEM identifier (6 bytes)

=item C<'oem_table_id'> (optional)

 OEM table identifier (8 bytes)

=item C<'oem_rev'> (optional)

 OEM-supplied revision number (4 bytes)

=item C<'asl_compiler_id'> (optional)

 identifier of the utility that created the table
(4 bytes)

=item C<'asl_compiler_rev'> (optional)

 revision number of the utility that created the
table (4 bytes)

=item C<'file'> (optional)

 colon (:) separated list of pathnames to load and
concatenate as table data. The resultant binary blob is expected to
have an ACPI table header. At least one file is required. This field
excludes C<data>.

=item C<'data'> (optional)

 colon (:) separated list of pathnames to load and
concatenate as table data. The resultant binary blob must not have an
ACPI table header. At least one file is required. This field excludes
C<file>.

=back



B<Since:>
1.5






B<CommandLineParameterType> (Enum)


Possible types for an option parameter.

=over 4


=item C<'string'>

accepts a character string

=item C<'boolean'>

accepts "on" or "off"

=item C<'number'>

accepts a number

=item C<'size'>

accepts a number followed by an optional suffix (K)ilo,
(M)ega, (G)iga, (T)era

=back



B<Since:>
1.5






B<CommandLineParameterInfo> (Struct)


Details about a single parameter of a command line option.

=over 4


=item C<'name'>

parameter name

=item C<'type'>

parameter C<CommandLineParameterType>

=item C<'help'> (optional)

 human readable text string, not suitable for parsing.

=item C<'default'> (optional)

 default value string (since 2.1)

=back



B<Since:>
1.5






B<CommandLineOptionInfo> (Struct)


Details about a command line option, including its list of parameter details

=over 4


=item C<'option'>

option name

=item C<'parameters'>

an array of C<CommandLineParameterInfo>

=back



B<Since:>
1.5






B<query-command-line-options>  (Command)
Query command line option schema.

=over 4


=item C<'option'> (optional)

 option name

=back



B<Returns:>
list of C<CommandLineOptionInfo> for all options (or for the given
C<option>).  Returns an error if the given C<option> doesn't exist.

B<Since:>
1.5

B<Example:>
	
	-> { "execute": "query-command-line-options",
	     "arguments": { "option": "option-rom" } }
	<- { "return": [
	        {
	            "parameters": [
	                {
	                    "name": "romfile",
	                    "type": "string"
	                },
	                {
	                    "name": "bootindex",
	                    "type": "number"
	                }
	            ],
	            "option": "option-rom"
	        }
	     ]
	   }








B<X86CPURegister32> (Enum)


A X86 32-bit register

=over 4


=item C<'EAX'>



=item C<'EBX'>



=item C<'ECX'>



=item C<'EDX'>



=item C<'ESP'>



=item C<'EBP'>



=item C<'ESI'>



=item C<'EDI'>



=back



B<Since:>
1.5






B<X86CPUFeatureWordInfo> (Struct)


Information about a X86 CPU feature word

=over 4


=item C<'cpuid-input-eax'>

Input EAX value for CPUID instruction for that feature word

=item C<'cpuid-input-ecx'> (optional)

 Input ECX value for CPUID instruction for that
feature word

=item C<'cpuid-register'>

Output register containing the feature bits

=item C<'features'>

value of output register, containing the feature bits

=back



B<Since:>
1.5






B<DummyForceArrays> (Struct)


Not used by QMP; hack to let us use X86CPUFeatureWordInfoList internally


B<Since:>
2.5






B<RxState> (Enum)


Packets receiving state

=over 4


=item C<'normal'>

filter assigned packets according to the mac-table

=item C<'none'>

don't receive any assigned packet

=item C<'all'>

receive all assigned packets

=back



B<Since:>
1.6






B<RxFilterInfo> (Struct)


Rx-filter information for a NIC.

=over 4


=item C<'name'>

net client name

=item C<'promiscuous'>

whether promiscuous mode is enabled

=item C<'multicast'>

multicast receive state

=item C<'unicast'>

unicast receive state

=item C<'vlan'>

vlan receive state (Since 2.0)

=item C<'broadcast-allowed'>

whether to receive broadcast

=item C<'multicast-overflow'>

multicast table is overflowed or not

=item C<'unicast-overflow'>

unicast table is overflowed or not

=item C<'main-mac'>

the main macaddr string

=item C<'vlan-table'>

a list of active vlan id

=item C<'unicast-table'>

a list of unicast macaddr string

=item C<'multicast-table'>

a list of multicast macaddr string

=back



B<Since:>
1.6






B<query-rx-filter>  (Command)
Return rx-filter information for all NICs (or for the given NIC).

=over 4


=item C<'name'> (optional)

 net client name

=back



B<Returns:>
list of C<RxFilterInfo> for all NICs (or for the given NIC).
Returns an error if the given C<name> doesn't exist, or given
NIC doesn't support rx-filter querying, or given net client
isn't a NIC.

B<Since:>
1.6

B<Example:>
	
	-> { "execute": "query-rx-filter", "arguments": { "name": "vnet0" } }
	<- { "return": [
	        {
	            "promiscuous": true,
	            "name": "vnet0",
	            "main-mac": "52:54:00:12:34:56",
	            "unicast": "normal",
	            "vlan": "normal",
	            "vlan-table": [
	                4,
	                0
	            ],
	            "unicast-table": [
	            ],
	            "multicast": "normal",
	            "multicast-overflow": false,
	            "unicast-overflow": false,
	            "multicast-table": [
	                "01:00:5e:00:00:01",
	                "33:33:00:00:00:01",
	                "33:33:ff:12:34:56"
	            ],
	            "broadcast-allowed": false
	        }
	      ]
	   }








B<InputButton> (Enum)


Button of a pointer input device (mouse, tablet).

=over 4


=item C<'side'>

front side button of a 5-button mouse (since 2.9)

=item C<'extra'>

rear side button of a 5-button mouse (since 2.9)

=item C<'left'>



=item C<'middle'>



=item C<'right'>



=item C<'wheel-up'>



=item C<'wheel-down'>



=back



B<Since:>
2.0






B<InputAxis> (Enum)


Position axis of a pointer input device (mouse, tablet).

=over 4


=item C<'x'>



=item C<'y'>



=back



B<Since:>
2.0






B<InputKeyEvent> (Struct)


Keyboard input event.

=over 4


=item C<'key'>

Which key this event is for.

=item C<'down'>

True for key-down and false for key-up events.

=back



B<Since:>
2.0






B<InputBtnEvent> (Struct)


Pointer button input event.

=over 4


=item C<'button'>

Which button this event is for.

=item C<'down'>

True for key-down and false for key-up events.

=back



B<Since:>
2.0






B<InputMoveEvent> (Struct)


Pointer motion input event.

=over 4


=item C<'axis'>

Which axis is referenced by C<value>.

=item C<'value'>

Pointer position.  For absolute coordinates the
valid range is 0 -E<gt> 0x7ffff

=back



B<Since:>
2.0






B<Union> (Simple)


Input event union.

=over 4


=item C<'type'>

the input type, one of:

=over 4


=item -

'key': Input event of Keyboard

=item -

'btn': Input event of pointer buttons

=item -

'rel': Input event of relative pointer motion

=item -

'abs': Input event of absolute pointer motion

=back



=back



B<Since:>
2.0






B<input-send-event>  (Command)
Send input event(s) to guest.

=over 4


=item C<'device'> (optional)

 display device to send event(s) to.

=item C<'head'> (optional)

 head to send event(s) to, in case the
display device supports multiple scanouts.

=item C<'events'>

List of InputEvent union.

=back



B<Returns:>
Nothing on success.

The C<device> and C<head> parameters can be used to send the input event
to specific input devices in case (a) multiple input devices of the
same kind are added to the virtual machine and (b) you have
configured input routing (see docs/multiseat.txt) for those input
devices.  The parameters work exactly like the device and head
properties of input devices.  If C<device> is missing, only devices
that have no input routing config are admissible.  If C<device> is
specified, both input devices with and without input routing config
are admissible, but devices with input routing config take
precedence.

B<Since:>
2.6

B<Note:>
The consoles are visible in the qom tree, under
/backend/console[$index]. They have a device link and head property,
so it is possible to map which console belongs to which device and
display.

B<Example:>
	
	1. Press left mouse button.
	
	-> { "execute": "input-send-event",
	    "arguments": { "device": "video0",
	                   "events": [ { "type": "btn",
	                   "data" : { "down": true, "button": "left" } } ] } }
	<- { "return": {} }
	
	-> { "execute": "input-send-event",
	    "arguments": { "device": "video0",
	                   "events": [ { "type": "btn",
	                   "data" : { "down": false, "button": "left" } } ] } }
	<- { "return": {} }
	
	2. Press ctrl-alt-del.
	
	-> { "execute": "input-send-event",
	     "arguments": { "events": [
	        { "type": "key", "data" : { "down": true,
	          "key": {"type": "qcode", "data": "ctrl" } } },
	        { "type": "key", "data" : { "down": true,
	          "key": {"type": "qcode", "data": "alt" } } },
	        { "type": "key", "data" : { "down": true,
	          "key": {"type": "qcode", "data": "delete" } } } ] } }
	<- { "return": {} }
	
	3. Move mouse pointer to absolute coordinates (20000, 400).
	
	-> { "execute": "input-send-event" ,
	  "arguments": { "events": [
	               { "type": "abs", "data" : { "axis": "x", "value" : 20000 } },
	               { "type": "abs", "data" : { "axis": "y", "value" : 400 } } ] } }
	<- { "return": {} }








B<Union> (Simple)


A discriminated record of NUMA options. (for OptsVisitor)


B<Since:>
2.1






B<NumaNodeOptions> (Struct)


Create a guest NUMA node. (for OptsVisitor)

=over 4


=item C<'nodeid'> (optional)

 NUMA node ID (increase by 1 from 0 if omitted)

=item C<'cpus'> (optional)

 VCPUs belonging to this node (assign VCPUS round-robin
if omitted)

=item C<'mem'> (optional)

 memory size of this node; mutually exclusive with C<memdev>.
Equally divide total memory among nodes if both C<mem> and C<memdev> are
omitted.

=item C<'memdev'> (optional)

 memory backend object.  If specified for one node,
it must be specified for all nodes.

=back



B<Since:>
2.1






B<HostMemPolicy> (Enum)


Host memory policy types

=over 4


=item C<'default'>

restore default policy, remove any nondefault policy

=item C<'preferred'>

set the preferred host nodes for allocation

=item C<'bind'>

a strict policy that restricts memory allocation to the
host nodes specified

=item C<'interleave'>

memory allocations are interleaved across the set
of host nodes specified

=back



B<Since:>
2.1






B<Memdev> (Struct)


Information about memory backend

=over 4


=item C<'id'> (optional)

 backend's ID if backend has 'id' property (since 2.9)

=item C<'size'>

memory backend size

=item C<'merge'>

enables or disables memory merge support

=item C<'dump'>

includes memory backend's memory in a core dump or not

=item C<'prealloc'>

enables or disables memory preallocation

=item C<'host-nodes'>

host nodes for its memory policy

=item C<'policy'>

memory policy of memory backend

=back



B<Since:>
2.1






B<query-memdev>  (Command)
Returns information for all memory backends.


B<Returns:>
a list of C<Memdev>.

B<Since:>
2.1

B<Example:>
	
	-> { "execute": "query-memdev" }
	<- { "return": [
	       {
	         "id": "mem1",
	         "size": 536870912,
	         "merge": false,
	         "dump": true,
	         "prealloc": false,
	         "host-nodes": [0, 1],
	         "policy": "bind"
	       },
	       {
	         "size": 536870912,
	         "merge": false,
	         "dump": true,
	         "prealloc": true,
	         "host-nodes": [2, 3],
	         "policy": "preferred"
	       }
	     ]
	   }








B<PCDIMMDeviceInfo> (Struct)


PCDIMMDevice state information

=over 4


=item C<'id'> (optional)

 device's ID

=item C<'addr'>

physical address, where device is mapped

=item C<'size'>

size of memory that the device provides

=item C<'slot'>

slot number at which device is plugged in

=item C<'node'>

NUMA node number where device is plugged in

=item C<'memdev'>

memory backend linked with device

=item C<'hotplugged'>

true if device was hotplugged

=item C<'hotpluggable'>

true if device if could be added/removed while machine is running

=back



B<Since:>
2.1






B<Union> (Simple)


Union containing information about a memory device


B<Since:>
2.1






B<query-memory-devices>  (Command)
Lists available memory devices and their state


B<Since:>
2.1

B<Example:>
	
	-> { "execute": "query-memory-devices" }
	<- { "return": [ { "data":
	                      { "addr": 5368709120,
	                        "hotpluggable": true,
	                        "hotplugged": true,
	                        "id": "d1",
	                        "memdev": "/objects/memX",
	                        "node": 0,
	                        "size": 1073741824,
	                        "slot": 0},
	                   "type": "dimm"
	                 } ] }








B<ACPISlotType> (Enum)




=over 4


=item C<'DIMM'>

memory slot

=item C<'CPU'>

logical CPU slot (since 2.7)

=back








B<ACPIOSTInfo> (Struct)


OSPM Status Indication for a device
For description of possible values of C<source> and C<status> fields
see "_OST (OSPM Status Indication)" chapter of ACPI5.0 spec.

=over 4


=item C<'device'> (optional)

 device ID associated with slot

=item C<'slot'>

slot ID, unique per slot of a given C<slot-type>

=item C<'slot-type'>

type of the slot

=item C<'source'>

an integer containing the source event

=item C<'status'>

an integer containing the status code

=back



B<Since:>
2.1






B<query-acpi-ospm-status>  (Command)
Return a list of ACPIOSTInfo for devices that support status
reporting via ACPI _OST method.


B<Since:>
2.1

B<Example:>
	
	-> { "execute": "query-acpi-ospm-status" }
	<- { "return": [ { "device": "d1", "slot": "0", "slot-type": "DIMM", "source": 1, "status": 0},
	                 { "slot": "1", "slot-type": "DIMM", "source": 0, "status": 0},
	                 { "slot": "2", "slot-type": "DIMM", "source": 0, "status": 0},
	                 { "slot": "3", "slot-type": "DIMM", "source": 0, "status": 0}
	   ]}








B<WatchdogExpirationAction> (Enum)


An enumeration of the actions taken when the watchdog device's timer is
expired

=over 4


=item C<'reset'>

system resets

=item C<'shutdown'>

system shutdown, note that it is similar to C<powerdown>, which
tries to set to system status and notify guest

=item C<'poweroff'>

system poweroff, the emulator program exits

=item C<'pause'>

system pauses, similar to C<stop>

=item C<'debug'>

system enters debug state

=item C<'none'>

nothing is done

=item C<'inject-nmi'>

a non-maskable interrupt is injected into the first VCPU (all
VCPUS on x86) (since 2.4)

=back



B<Since:>
2.1






B<IoOperationType> (Enum)


An enumeration of the I/O operation types

=over 4


=item C<'read'>

read operation

=item C<'write'>

write operation

=back



B<Since:>
2.1






B<GuestPanicAction> (Enum)


An enumeration of the actions taken when guest OS panic is detected

=over 4


=item C<'pause'>

system pauses

=item C<'poweroff'>



=back



B<Since:>
2.1 (poweroff since 2.8)






B<Union> (Simple)


Information about a guest panic


B<Since:>
2.9






B<GuestPanicInformationHyperV> (Struct)


Hyper-V specific guest panic information (HV crash MSRs)


B<Since:>
2.9






B<rtc-reset-reinjection>  (Command)
This command will reset the RTC interrupt reinjection backlog.
Can be used if another mechanism to synchronize guest time
is in effect, for example QEMU guest agent's guest-set-time
command.


B<Since:>
2.1

B<Example:>
	
	-> { "execute": "rtc-reset-reinjection" }
	<- { "return": {} }







=head2 Rocker switch device




B<RockerSwitch> (Struct)


Rocker switch information.

=over 4


=item C<'name'>

switch name

=item C<'id'>

switch ID

=item C<'ports'>

number of front-panel ports

=back



B<Since:>
2.4






B<query-rocker>  (Command)
Return rocker switch information.


B<Returns:>
C<Rocker> information

B<Since:>
2.4

B<Example:>
	
	-> { "execute": "query-rocker", "arguments": { "name": "sw1" } }
	<- { "return": {"name": "sw1", "ports": 2, "id": 1327446905938}}








B<RockerPortDuplex> (Enum)


An eumeration of port duplex states.

=over 4


=item C<'half'>

half duplex

=item C<'full'>

full duplex

=back



B<Since:>
2.4






B<RockerPortAutoneg> (Enum)


An eumeration of port autoneg states.

=over 4


=item C<'off'>

autoneg is off

=item C<'on'>

autoneg is on

=back



B<Since:>
2.4






B<RockerPort> (Struct)


Rocker switch port information.

=over 4


=item C<'name'>

port name

=item C<'enabled'>

port is enabled for I/O

=item C<'link-up'>

physical link is UP on port

=item C<'speed'>

port link speed in Mbps

=item C<'duplex'>

port link duplex

=item C<'autoneg'>

port link autoneg

=back



B<Since:>
2.4






B<query-rocker-ports>  (Command)
Return rocker switch port information.


B<Returns:>
a list of C<RockerPort> information

B<Since:>
2.4

B<Example:>
	
	-> { "execute": "query-rocker-ports", "arguments": { "name": "sw1" } }
	<- { "return": [ {"duplex": "full", "enabled": true, "name": "sw1.1",
	                  "autoneg": "off", "link-up": true, "speed": 10000},
	                 {"duplex": "full", "enabled": true, "name": "sw1.2",
	                  "autoneg": "off", "link-up": true, "speed": 10000}
	   ]}








B<RockerOfDpaFlowKey> (Struct)


Rocker switch OF-DPA flow key

=over 4


=item C<'priority'>

key priority, 0 being lowest priority

=item C<'tbl-id'>

flow table ID

=item C<'in-pport'> (optional)

 physical input port

=item C<'tunnel-id'> (optional)

 tunnel ID

=item C<'vlan-id'> (optional)

 VLAN ID

=item C<'eth-type'> (optional)

 Ethernet header type

=item C<'eth-src'> (optional)

 Ethernet header source MAC address

=item C<'eth-dst'> (optional)

 Ethernet header destination MAC address

=item C<'ip-proto'> (optional)

 IP Header protocol field

=item C<'ip-tos'> (optional)

 IP header TOS field

=item C<'ip-dst'> (optional)

 IP header destination address

=back



B<Note:>
fields are marked #optional to indicate that they may or may not
appear in the flow key depending if they're relevant to the flow key.

B<Since:>
2.4






B<RockerOfDpaFlowMask> (Struct)


Rocker switch OF-DPA flow mask

=over 4


=item C<'in-pport'> (optional)

 physical input port

=item C<'tunnel-id'> (optional)

 tunnel ID

=item C<'vlan-id'> (optional)

 VLAN ID

=item C<'eth-src'> (optional)

 Ethernet header source MAC address

=item C<'eth-dst'> (optional)

 Ethernet header destination MAC address

=item C<'ip-proto'> (optional)

 IP Header protocol field

=item C<'ip-tos'> (optional)

 IP header TOS field

=back



B<Note:>
fields are marked #optional to indicate that they may or may not
appear in the flow mask depending if they're relevant to the flow mask.

B<Since:>
2.4






B<RockerOfDpaFlowAction> (Struct)


Rocker switch OF-DPA flow action

=over 4


=item C<'goto-tbl'> (optional)

 next table ID

=item C<'group-id'> (optional)

 group ID

=item C<'tunnel-lport'> (optional)

 tunnel logical port ID

=item C<'vlan-id'> (optional)

 VLAN ID

=item C<'new-vlan-id'> (optional)

 new VLAN ID

=item C<'out-pport'> (optional)

 physical output port

=back



B<Note:>
fields are marked #optional to indicate that they may or may not
appear in the flow action depending if they're relevant to the flow action.

B<Since:>
2.4






B<RockerOfDpaFlow> (Struct)


Rocker switch OF-DPA flow

=over 4


=item C<'cookie'>

flow unique cookie ID

=item C<'hits'>

count of matches (hits) on flow

=item C<'key'>

flow key

=item C<'mask'>

flow mask

=item C<'action'>

flow action

=back



B<Since:>
2.4






B<query-rocker-of-dpa-flows>  (Command)
Return rocker OF-DPA flow information.

=over 4


=item C<'name'>

switch name

=item C<'tbl-id'> (optional)

 flow table ID.  If tbl-id is not specified, returns
flow information for all tables.

=back



B<Returns:>
rocker OF-DPA flow information

B<Since:>
2.4

B<Example:>
	
	-> { "execute": "query-rocker-of-dpa-flows",
	     "arguments": { "name": "sw1" } }
	<- { "return": [ {"key": {"in-pport": 0, "priority": 1, "tbl-id": 0},
	                  "hits": 138,
	                  "cookie": 0,
	                  "action": {"goto-tbl": 10},
	                  "mask": {"in-pport": 4294901760}
	                 },
	                 {...more...},
	   ]}








B<RockerOfDpaGroup> (Struct)


Rocker switch OF-DPA group

=over 4


=item C<'id'>

group unique ID

=item C<'type'>

group type

=item C<'vlan-id'> (optional)

 VLAN ID

=item C<'pport'> (optional)

 physical port number

=item C<'index'> (optional)

 group index, unique with group type

=item C<'out-pport'> (optional)

 output physical port number

=item C<'group-id'> (optional)

 next group ID

=item C<'set-vlan-id'> (optional)

 VLAN ID to set

=item C<'pop-vlan'> (optional)

 pop VLAN headr from packet

=item C<'group-ids'> (optional)

 list of next group IDs

=item C<'set-eth-src'> (optional)

 set source MAC address in Ethernet header

=item C<'set-eth-dst'> (optional)

 set destination MAC address in Ethernet header

=item C<'ttl-check'> (optional)

 perform TTL check

=back



B<Note:>
fields are marked #optional to indicate that they may or may not
appear in the group depending if they're relevant to the group type.

B<Since:>
2.4






B<query-rocker-of-dpa-groups>  (Command)
Return rocker OF-DPA group information.

=over 4


=item C<'name'>

switch name

=item C<'type'> (optional)

 group type.  If type is not specified, returns
group information for all group types.

=back



B<Returns:>
rocker OF-DPA group information

B<Since:>
2.4

B<Example:>
	
	-> { "execute": "query-rocker-of-dpa-groups",
	     "arguments": { "name": "sw1" } }
	<- { "return": [ {"type": 0, "out-pport": 2,
	                  "pport": 2, "vlan-id": 3841,
	                  "pop-vlan": 1, "id": 251723778},
	                 {"type": 0, "out-pport": 0,
	                  "pport": 0, "vlan-id": 3841,
	                  "pop-vlan": 1, "id": 251723776},
	                 {"type": 0, "out-pport": 1,
	                  "pport": 1, "vlan-id": 3840,
	                  "pop-vlan": 1, "id": 251658241},
	                 {"type": 0, "out-pport": 0,
	                  "pport": 0, "vlan-id": 3840,
	                  "pop-vlan": 1, "id": 251658240}
	   ]}








B<ReplayMode> (Enum)


Mode of the replay subsystem.

=over 4


=item C<'none'>

normal execution mode. Replay or record are not enabled.

=item C<'record'>

record mode. All non-deterministic data is written into the
replay log.

=item C<'play'>

replay mode. Non-deterministic data required for system execution
is read from the log.

=back



B<Since:>
2.5






B<xen-load-devices-state>  (Command)
Load the state of all devices from file. The RAM and the block devices
of the VM are not loaded by this command.

=over 4


=item C<'filename'>

the file to load the state of the devices from as binary
data. See xen-save-devices-state.txt for a description of the binary
format.

=back



B<Since:>
2.7

B<Example:>
	
	-> { "execute": "xen-load-devices-state",
	     "arguments": { "filename": "/tmp/resume" } }
	<- { "return": {} }








B<GICCapability> (Struct)


The struct describes capability for a specific GIC (Generic
Interrupt Controller) version. These bits are not only decided by
QEMU/KVM software version, but also decided by the hardware that
the program is running upon.

=over 4


=item C<'version'>

version of GIC to be described. Currently, only 2 and 3
are supported.

=item C<'emulated'>

whether current QEMU/hardware supports emulated GIC
device in user space.

=item C<'kernel'>

whether current QEMU/hardware supports hardware
accelerated GIC device in kernel.

=back



B<Since:>
2.6






B<query-gic-capabilities>  (Command)
This command is ARM-only. It will return a list of GICCapability
objects that describe its capability bits.


B<Returns:>
a list of GICCapability objects.

B<Since:>
2.6

B<Example:>
	
	-> { "execute": "query-gic-capabilities" }
	<- { "return": [{ "version": 2, "emulated": true, "kernel": false },
	                { "version": 3, "emulated": false, "kernel": true } ] }








B<CpuInstanceProperties> (Struct)


List of properties to be used for hotplugging a CPU instance,
it should be passed by management with device_add command when
a CPU is being hotplugged.

=over 4


=item C<'node-id'> (optional)

 NUMA node ID the CPU belongs to

=item C<'socket-id'> (optional)

 socket number within node/board the CPU belongs to

=item C<'core-id'> (optional)

 core number within socket the CPU belongs to

=item C<'thread-id'> (optional)

 thread number within core the CPU belongs to

=back



B<Note:>
currently there are 4 properties that could be present
but management should be prepared to pass through other
properties with device_add command to allow for future
interface extension. This also requires the filed names to be kept in
sync with the properties passed to -device/device_add.

B<Since:>
2.7






B<HotpluggableCPU> (Struct)




=over 4


=item C<'type'>

CPU object type for usage with device_add command

=item C<'props'>

list of properties to be used for hotplugging CPU

=item C<'vcpus-count'>

number of logical VCPU threads C<HotpluggableCPU> provides

=item C<'qom-path'> (optional)

 link to existing CPU object if CPU is present or
omitted if CPU is not present.

=back



B<Since:>
2.7






B<query-hotpluggable-cpus>  (Command)



B<Returns:>
a list of HotpluggableCPU objects.

B<Since:>
2.7

B<Example:>
	
	For pseries machine type started with -smp 2,cores=2,maxcpus=4 -cpu POWER8:
	
	-> { "execute": "query-hotpluggable-cpus" }
	<- {"return": [
	     { "props": { "core": 8 }, "type": "POWER8-spapr-cpu-core",
	       "vcpus-count": 1 },
	     { "props": { "core": 0 }, "type": "POWER8-spapr-cpu-core",
	       "vcpus-count": 1, "qom-path": "/machine/unattached/device[0]"}
	   ]}'
	
	For pc machine type started with -smp 1,maxcpus=2:
	
	-> { "execute": "query-hotpluggable-cpus" }
	<- {"return": [
	     {
	        "type": "qemu64-x86_64-cpu", "vcpus-count": 1,
	        "props": {"core-id": 0, "socket-id": 1, "thread-id": 0}
	     },
	     {
	        "qom-path": "/machine/unattached/device[0]",
	        "type": "qemu64-x86_64-cpu", "vcpus-count": 1,
	        "props": {"core-id": 0, "socket-id": 0, "thread-id": 0}
	     }
	   ]}








B<begin_record>  (Command)
Requests that we begin recording for later replay

TRL 20120501







B<begin_record_from>  (Command)
Requests that we revert to a snapshot and begin recording for later replay







B<end_record>  (Command)
Requests that we begin recording for later replay

TRL 20120501







B<begin_replay>  (Command)
Requests that we begin replaying

TRL 20120501







B<end_replay>  (Command)
Requests that we end replaying

TRL 20120501







B<load_plugin>  (Command)
Loads a PANDA plugin

BDG 20120821







B<unload_plugin>  (Command)
Unloads a PANDA plugin

BDG 20120821







B<PandaPluginInfo> (Struct)


Structure holding the information of a PANDA plugin







B<list_plugins>  (Command)
List loaded PANDA plugins

BDG 20120821







B<plugin_cmd>  (Command)
Send a command to a loaded PANDA plugin

BDG 20120822







