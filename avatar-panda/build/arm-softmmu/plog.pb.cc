// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: plog.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "plog.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace panda {

namespace {

const ::google::protobuf::Descriptor* AsidInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AsidInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CallStack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CallStack_reflection_ = NULL;
const ::google::protobuf::Descriptor* DwarfCall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DwarfCall_reflection_ = NULL;
const ::google::protobuf::Descriptor* SrcInfoPri_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SrcInfoPri_reflection_ = NULL;
const ::google::protobuf::Descriptor* AttackPointPri_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AttackPointPri_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaintQueryPri_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaintQueryPri_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaintQueryUniqueLabelSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaintQueryUniqueLabelSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SrcInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SrcInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaintQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaintQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* AttackPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AttackPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaintQueryHypercall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaintQueryHypercall_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaintedBranch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaintedBranch_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaintedBranchSummary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaintedBranchSummary_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaintedInstr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaintedInstr_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaintedInstrSummary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaintedInstrSummary_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogEntry_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_plog_2eproto() {
  protobuf_AddDesc_plog_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "plog.proto");
  GOOGLE_CHECK(file != NULL);
  AsidInfo_descriptor_ = file->message_type(0);
  static const int AsidInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AsidInfo, asid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AsidInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AsidInfo, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AsidInfo, start_instr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AsidInfo, end_instr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AsidInfo, count_),
  };
  AsidInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AsidInfo_descriptor_,
      AsidInfo::default_instance_,
      AsidInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AsidInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AsidInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AsidInfo));
  CallStack_descriptor_ = file->message_type(1);
  static const int CallStack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallStack, addr_),
  };
  CallStack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CallStack_descriptor_,
      CallStack::default_instance_,
      CallStack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallStack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallStack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CallStack));
  DwarfCall_descriptor_ = file->message_type(2);
  static const int DwarfCall_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DwarfCall, file_callee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DwarfCall, function_name_callee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DwarfCall, line_number_callee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DwarfCall, file_caller_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DwarfCall, line_number_caller_),
  };
  DwarfCall_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DwarfCall_descriptor_,
      DwarfCall::default_instance_,
      DwarfCall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DwarfCall, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DwarfCall, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DwarfCall));
  SrcInfoPri_descriptor_ = file->message_type(3);
  static const int SrcInfoPri_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrcInfoPri, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrcInfoPri, linenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrcInfoPri, astnodename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrcInfoPri, insertionpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrcInfoPri, ast_loc_id_),
  };
  SrcInfoPri_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SrcInfoPri_descriptor_,
      SrcInfoPri::default_instance_,
      SrcInfoPri_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrcInfoPri, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrcInfoPri, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SrcInfoPri));
  AttackPointPri_descriptor_ = file->message_type(4);
  static const int AttackPointPri_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackPointPri, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackPointPri, call_stack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackPointPri, src_info_),
  };
  AttackPointPri_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AttackPointPri_descriptor_,
      AttackPointPri::default_instance_,
      AttackPointPri_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackPointPri, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackPointPri, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AttackPointPri));
  TaintQueryPri_descriptor_ = file->message_type(5);
  static const int TaintQueryPri_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaintQueryPri, buf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaintQueryPri, len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaintQueryPri, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaintQueryPri, num_tainted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaintQueryPri, call_stack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaintQueryPri, src_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaintQueryPri, taint_query_),
  };
  TaintQueryPri_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaintQueryPri_descriptor_,
      TaintQueryPri::default_instance_,
      TaintQueryPri_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaintQueryPri, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaintQueryPri, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaintQueryPri));
  TaintQueryUniqueLabelSet_descriptor_ = file->message_type(6);
  static const int TaintQueryUniqueLabelSet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaintQueryUniqueLabelSet, ptr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaintQueryUniqueLabelSet, label_),
  };
  TaintQueryUniqueLabelSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaintQueryUniqueLabelSet_descriptor_,
      TaintQueryUniqueLabelSet::default_instance_,
      TaintQueryUniqueLabelSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaintQueryUniqueLabelSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaintQueryUniqueLabelSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaintQueryUniqueLabelSet));
  SrcInfo_descriptor_ = file->message_type(7);
  static const int SrcInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrcInfo, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrcInfo, linenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrcInfo, astnodename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrcInfo, insertionpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrcInfo, ast_loc_id_),
  };
  SrcInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SrcInfo_descriptor_,
      SrcInfo::default_instance_,
      SrcInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrcInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrcInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SrcInfo));
  TaintQuery_descriptor_ = file->message_type(8);
  static const int TaintQuery_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaintQuery, ptr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaintQuery, tcn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaintQuery, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaintQuery, unique_label_set_),
  };
  TaintQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaintQuery_descriptor_,
      TaintQuery::default_instance_,
      TaintQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaintQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaintQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaintQuery));
  AttackPoint_descriptor_ = file->message_type(9);
  static const int AttackPoint_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackPoint, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackPoint, call_stack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackPoint, src_info_),
  };
  AttackPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AttackPoint_descriptor_,
      AttackPoint::default_instance_,
      AttackPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AttackPoint));
  TaintQueryHypercall_descriptor_ = file->message_type(10);
  static const int TaintQueryHypercall_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaintQueryHypercall, buf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaintQueryHypercall, len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaintQueryHypercall, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaintQueryHypercall, num_tainted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaintQueryHypercall, call_stack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaintQueryHypercall, src_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaintQueryHypercall, taint_query_),
  };
  TaintQueryHypercall_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaintQueryHypercall_descriptor_,
      TaintQueryHypercall::default_instance_,
      TaintQueryHypercall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaintQueryHypercall, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaintQueryHypercall, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaintQueryHypercall));
  TaintedBranch_descriptor_ = file->message_type(11);
  static const int TaintedBranch_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaintedBranch, call_stack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaintedBranch, taint_query_),
  };
  TaintedBranch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaintedBranch_descriptor_,
      TaintedBranch::default_instance_,
      TaintedBranch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaintedBranch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaintedBranch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaintedBranch));
  TaintedBranchSummary_descriptor_ = file->message_type(12);
  static const int TaintedBranchSummary_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaintedBranchSummary, asid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaintedBranchSummary, pc_),
  };
  TaintedBranchSummary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaintedBranchSummary_descriptor_,
      TaintedBranchSummary::default_instance_,
      TaintedBranchSummary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaintedBranchSummary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaintedBranchSummary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaintedBranchSummary));
  TaintedInstr_descriptor_ = file->message_type(13);
  static const int TaintedInstr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaintedInstr, call_stack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaintedInstr, taint_query_),
  };
  TaintedInstr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaintedInstr_descriptor_,
      TaintedInstr::default_instance_,
      TaintedInstr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaintedInstr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaintedInstr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaintedInstr));
  TaintedInstrSummary_descriptor_ = file->message_type(14);
  static const int TaintedInstrSummary_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaintedInstrSummary, asid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaintedInstrSummary, pc_),
  };
  TaintedInstrSummary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaintedInstrSummary_descriptor_,
      TaintedInstrSummary::default_instance_,
      TaintedInstrSummary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaintedInstrSummary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaintedInstrSummary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaintedInstrSummary));
  LogEntry_descriptor_ = file->message_type(15);
  static const int LogEntry_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, pc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, instr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, asid_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, asid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, call_stack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, dwarf_call_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, dwarf_ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, taint_label_virtual_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, taint_label_physical_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, taint_label_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, taint_query_pri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, attack_point_pri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, pri_trace_src_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, taint_query_hypercall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, attack_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, tainted_branch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, tainted_branch_summary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, tainted_instr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, tainted_instr_summary_),
  };
  LogEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogEntry_descriptor_,
      LogEntry::default_instance_,
      LogEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogEntry));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_plog_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AsidInfo_descriptor_, &AsidInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CallStack_descriptor_, &CallStack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DwarfCall_descriptor_, &DwarfCall::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SrcInfoPri_descriptor_, &SrcInfoPri::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AttackPointPri_descriptor_, &AttackPointPri::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaintQueryPri_descriptor_, &TaintQueryPri::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaintQueryUniqueLabelSet_descriptor_, &TaintQueryUniqueLabelSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SrcInfo_descriptor_, &SrcInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaintQuery_descriptor_, &TaintQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AttackPoint_descriptor_, &AttackPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaintQueryHypercall_descriptor_, &TaintQueryHypercall::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaintedBranch_descriptor_, &TaintedBranch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaintedBranchSummary_descriptor_, &TaintedBranchSummary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaintedInstr_descriptor_, &TaintedInstr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaintedInstrSummary_descriptor_, &TaintedInstrSummary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogEntry_descriptor_, &LogEntry::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_plog_2eproto() {
  delete AsidInfo::default_instance_;
  delete AsidInfo_reflection_;
  delete CallStack::default_instance_;
  delete CallStack_reflection_;
  delete DwarfCall::default_instance_;
  delete DwarfCall_reflection_;
  delete SrcInfoPri::default_instance_;
  delete SrcInfoPri_reflection_;
  delete AttackPointPri::default_instance_;
  delete AttackPointPri_reflection_;
  delete TaintQueryPri::default_instance_;
  delete TaintQueryPri_reflection_;
  delete TaintQueryUniqueLabelSet::default_instance_;
  delete TaintQueryUniqueLabelSet_reflection_;
  delete SrcInfo::default_instance_;
  delete SrcInfo_reflection_;
  delete TaintQuery::default_instance_;
  delete TaintQuery_reflection_;
  delete AttackPoint::default_instance_;
  delete AttackPoint_reflection_;
  delete TaintQueryHypercall::default_instance_;
  delete TaintQueryHypercall_reflection_;
  delete TaintedBranch::default_instance_;
  delete TaintedBranch_reflection_;
  delete TaintedBranchSummary::default_instance_;
  delete TaintedBranchSummary_reflection_;
  delete TaintedInstr::default_instance_;
  delete TaintedInstr_reflection_;
  delete TaintedInstrSummary::default_instance_;
  delete TaintedInstrSummary_reflection_;
  delete LogEntry::default_instance_;
  delete LogEntry_reflection_;
}

void protobuf_AddDesc_plog_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nplog.proto\022\005panda\"j\n\010AsidInfo\022\014\n\004asid\030"
    "\001 \002(\004\022\014\n\004name\030\002 \002(\t\022\013\n\003pid\030\003 \002(\r\022\023\n\013star"
    "t_instr\030\004 \002(\004\022\021\n\tend_instr\030\005 \002(\004\022\r\n\005coun"
    "t\030\006 \002(\004\"\031\n\tCallStack\022\014\n\004addr\030\001 \003(\004\"\213\001\n\tD"
    "warfCall\022\023\n\013file_callee\030\001 \002(\t\022\034\n\024functio"
    "n_name_callee\030\002 \002(\t\022\032\n\022line_number_calle"
    "e\030\003 \002(\004\022\023\n\013file_caller\030\004 \002(\t\022\032\n\022line_num"
    "ber_caller\030\005 \002(\004\"p\n\nSrcInfoPri\022\020\n\010filena"
    "me\030\001 \002(\t\022\017\n\007linenum\030\002 \002(\r\022\023\n\013astnodename"
    "\030\003 \002(\t\022\026\n\016insertionpoint\030\004 \001(\r\022\022\n\nast_lo"
    "c_id\030\005 \001(\r\"i\n\016AttackPointPri\022\014\n\004info\030\001 \002"
    "(\r\022$\n\ncall_stack\030\002 \002(\0132\020.panda.CallStack"
    "\022#\n\010src_info\030\003 \002(\0132\021.panda.SrcInfoPri\"\277\001"
    "\n\rTaintQueryPri\022\013\n\003buf\030\001 \002(\004\022\013\n\003len\030\002 \002("
    "\r\022\014\n\004data\030\003 \003(\r\022\023\n\013num_tainted\030\004 \002(\r\022$\n\n"
    "call_stack\030\005 \002(\0132\020.panda.CallStack\022#\n\010sr"
    "c_info\030\006 \002(\0132\021.panda.SrcInfoPri\022&\n\013taint"
    "_query\030\007 \003(\0132\021.panda.TaintQuery\"6\n\030Taint"
    "QueryUniqueLabelSet\022\013\n\003ptr\030\001 \002(\004\022\r\n\005labe"
    "l\030\002 \003(\r\"m\n\007SrcInfo\022\020\n\010filename\030\001 \002(\r\022\017\n\007"
    "linenum\030\002 \002(\r\022\023\n\013astnodename\030\003 \002(\r\022\026\n\016in"
    "sertionpoint\030\004 \001(\r\022\022\n\nast_loc_id\030\005 \001(\r\"q"
    "\n\nTaintQuery\022\013\n\003ptr\030\001 \002(\004\022\013\n\003tcn\030\002 \002(\r\022\016"
    "\n\006offset\030\003 \002(\r\0229\n\020unique_label_set\030\004 \001(\013"
    "2\037.panda.TaintQueryUniqueLabelSet\"c\n\013Att"
    "ackPoint\022\014\n\004info\030\001 \002(\r\022$\n\ncall_stack\030\002 \002"
    "(\0132\020.panda.CallStack\022 \n\010src_info\030\003 \002(\0132\016"
    ".panda.SrcInfo\"\302\001\n\023TaintQueryHypercall\022\013"
    "\n\003buf\030\001 \002(\004\022\013\n\003len\030\002 \002(\r\022\014\n\004data\030\003 \003(\r\022\023"
    "\n\013num_tainted\030\004 \002(\r\022$\n\ncall_stack\030\005 \002(\0132"
    "\020.panda.CallStack\022 \n\010src_info\030\006 \002(\0132\016.pa"
    "nda.SrcInfo\022&\n\013taint_query\030\007 \003(\0132\021.panda"
    ".TaintQuery\"]\n\rTaintedBranch\022$\n\ncall_sta"
    "ck\030\001 \002(\0132\020.panda.CallStack\022&\n\013taint_quer"
    "y\030\002 \003(\0132\021.panda.TaintQuery\"0\n\024TaintedBra"
    "nchSummary\022\014\n\004asid\030\001 \002(\004\022\n\n\002pc\030\002 \002(\004\"\\\n\014"
    "TaintedInstr\022$\n\ncall_stack\030\001 \002(\0132\020.panda"
    ".CallStack\022&\n\013taint_query\030\002 \003(\0132\021.panda."
    "TaintQuery\"/\n\023TaintedInstrSummary\022\014\n\004asi"
    "d\030\001 \002(\004\022\n\n\002pc\030\002 \002(\004\"\357\005\n\010LogEntry\022\n\n\002pc\030\001"
    " \002(\004\022\r\n\005instr\030\002 \002(\004\022\"\n\tasid_info\030( \001(\0132\017"
    ".panda.AsidInfo\022\014\n\004asid\030\003 \001(\004\022$\n\ncall_st"
    "ack\030\n \001(\0132\020.panda.CallStack\022$\n\ndwarf_cal"
    "l\030B \001(\0132\020.panda.DwarfCall\022#\n\tdwarf_ret\030C"
    " \001(\0132\020.panda.DwarfCall\022 \n\030taint_label_vi"
    "rtual_addr\030\006 \001(\004\022!\n\031taint_label_physical"
    "_addr\030\007 \001(\004\022\032\n\022taint_label_number\030\010 \001(\r\022"
    "-\n\017taint_query_pri\030D \001(\0132\024.panda.TaintQu"
    "eryPri\022/\n\020attack_point_pri\030E \001(\0132\025.panda"
    ".AttackPointPri\022-\n\022pri_trace_src_info\030F "
    "\001(\0132\021.panda.SrcInfoPri\0229\n\025taint_query_hy"
    "percall\030& \001(\0132\032.panda.TaintQueryHypercal"
    "l\022(\n\014attack_point\030\' \001(\0132\022.panda.AttackPo"
    "int\022,\n\016tainted_branch\030$ \001(\0132\024.panda.Tain"
    "tedBranch\022;\n\026tainted_branch_summary\030H \001("
    "\0132\033.panda.TaintedBranchSummary\022*\n\rtainte"
    "d_instr\030% \001(\0132\023.panda.TaintedInstr\0229\n\025ta"
    "inted_instr_summary\0308 \001(\0132\032.panda.Tainte"
    "dInstrSummary", 2333);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "plog.proto", &protobuf_RegisterTypes);
  AsidInfo::default_instance_ = new AsidInfo();
  CallStack::default_instance_ = new CallStack();
  DwarfCall::default_instance_ = new DwarfCall();
  SrcInfoPri::default_instance_ = new SrcInfoPri();
  AttackPointPri::default_instance_ = new AttackPointPri();
  TaintQueryPri::default_instance_ = new TaintQueryPri();
  TaintQueryUniqueLabelSet::default_instance_ = new TaintQueryUniqueLabelSet();
  SrcInfo::default_instance_ = new SrcInfo();
  TaintQuery::default_instance_ = new TaintQuery();
  AttackPoint::default_instance_ = new AttackPoint();
  TaintQueryHypercall::default_instance_ = new TaintQueryHypercall();
  TaintedBranch::default_instance_ = new TaintedBranch();
  TaintedBranchSummary::default_instance_ = new TaintedBranchSummary();
  TaintedInstr::default_instance_ = new TaintedInstr();
  TaintedInstrSummary::default_instance_ = new TaintedInstrSummary();
  LogEntry::default_instance_ = new LogEntry();
  AsidInfo::default_instance_->InitAsDefaultInstance();
  CallStack::default_instance_->InitAsDefaultInstance();
  DwarfCall::default_instance_->InitAsDefaultInstance();
  SrcInfoPri::default_instance_->InitAsDefaultInstance();
  AttackPointPri::default_instance_->InitAsDefaultInstance();
  TaintQueryPri::default_instance_->InitAsDefaultInstance();
  TaintQueryUniqueLabelSet::default_instance_->InitAsDefaultInstance();
  SrcInfo::default_instance_->InitAsDefaultInstance();
  TaintQuery::default_instance_->InitAsDefaultInstance();
  AttackPoint::default_instance_->InitAsDefaultInstance();
  TaintQueryHypercall::default_instance_->InitAsDefaultInstance();
  TaintedBranch::default_instance_->InitAsDefaultInstance();
  TaintedBranchSummary::default_instance_->InitAsDefaultInstance();
  TaintedInstr::default_instance_->InitAsDefaultInstance();
  TaintedInstrSummary::default_instance_->InitAsDefaultInstance();
  LogEntry::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_plog_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_plog_2eproto {
  StaticDescriptorInitializer_plog_2eproto() {
    protobuf_AddDesc_plog_2eproto();
  }
} static_descriptor_initializer_plog_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AsidInfo::kAsidFieldNumber;
const int AsidInfo::kNameFieldNumber;
const int AsidInfo::kPidFieldNumber;
const int AsidInfo::kStartInstrFieldNumber;
const int AsidInfo::kEndInstrFieldNumber;
const int AsidInfo::kCountFieldNumber;
#endif  // !_MSC_VER

AsidInfo::AsidInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:panda.AsidInfo)
}

void AsidInfo::InitAsDefaultInstance() {
}

AsidInfo::AsidInfo(const AsidInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:panda.AsidInfo)
}

void AsidInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  asid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pid_ = 0u;
  start_instr_ = GOOGLE_ULONGLONG(0);
  end_instr_ = GOOGLE_ULONGLONG(0);
  count_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AsidInfo::~AsidInfo() {
  // @@protoc_insertion_point(destructor:panda.AsidInfo)
  SharedDtor();
}

void AsidInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void AsidInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AsidInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AsidInfo_descriptor_;
}

const AsidInfo& AsidInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plog_2eproto();
  return *default_instance_;
}

AsidInfo* AsidInfo::default_instance_ = NULL;

AsidInfo* AsidInfo::New() const {
  return new AsidInfo;
}

void AsidInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AsidInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(start_instr_, pid_);
    asid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AsidInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:panda.AsidInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 asid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &asid_)));
          set_has_asid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pid;
        break;
      }

      // required uint32 pid = 3;
      case 3: {
        if (tag == 24) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_start_instr;
        break;
      }

      // required uint64 start_instr = 4;
      case 4: {
        if (tag == 32) {
         parse_start_instr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_instr_)));
          set_has_start_instr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_end_instr;
        break;
      }

      // required uint64 end_instr = 5;
      case 5: {
        if (tag == 40) {
         parse_end_instr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_instr_)));
          set_has_end_instr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_count;
        break;
      }

      // required uint64 count = 6;
      case 6: {
        if (tag == 48) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:panda.AsidInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:panda.AsidInfo)
  return false;
#undef DO_
}

void AsidInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:panda.AsidInfo)
  // required uint64 asid = 1;
  if (has_asid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->asid(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required uint32 pid = 3;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pid(), output);
  }

  // required uint64 start_instr = 4;
  if (has_start_instr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->start_instr(), output);
  }

  // required uint64 end_instr = 5;
  if (has_end_instr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->end_instr(), output);
  }

  // required uint64 count = 6;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:panda.AsidInfo)
}

::google::protobuf::uint8* AsidInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:panda.AsidInfo)
  // required uint64 asid = 1;
  if (has_asid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->asid(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required uint32 pid = 3;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pid(), target);
  }

  // required uint64 start_instr = 4;
  if (has_start_instr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->start_instr(), target);
  }

  // required uint64 end_instr = 5;
  if (has_end_instr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->end_instr(), target);
  }

  // required uint64 count = 6;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:panda.AsidInfo)
  return target;
}

int AsidInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 asid = 1;
    if (has_asid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->asid());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 pid = 3;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pid());
    }

    // required uint64 start_instr = 4;
    if (has_start_instr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_instr());
    }

    // required uint64 end_instr = 5;
    if (has_end_instr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_instr());
    }

    // required uint64 count = 6;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AsidInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AsidInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AsidInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AsidInfo::MergeFrom(const AsidInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_asid()) {
      set_asid(from.asid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_start_instr()) {
      set_start_instr(from.start_instr());
    }
    if (from.has_end_instr()) {
      set_end_instr(from.end_instr());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AsidInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AsidInfo::CopyFrom(const AsidInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AsidInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void AsidInfo::Swap(AsidInfo* other) {
  if (other != this) {
    std::swap(asid_, other->asid_);
    std::swap(name_, other->name_);
    std::swap(pid_, other->pid_);
    std::swap(start_instr_, other->start_instr_);
    std::swap(end_instr_, other->end_instr_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AsidInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AsidInfo_descriptor_;
  metadata.reflection = AsidInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CallStack::kAddrFieldNumber;
#endif  // !_MSC_VER

CallStack::CallStack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:panda.CallStack)
}

void CallStack::InitAsDefaultInstance() {
}

CallStack::CallStack(const CallStack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:panda.CallStack)
}

void CallStack::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CallStack::~CallStack() {
  // @@protoc_insertion_point(destructor:panda.CallStack)
  SharedDtor();
}

void CallStack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CallStack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CallStack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CallStack_descriptor_;
}

const CallStack& CallStack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plog_2eproto();
  return *default_instance_;
}

CallStack* CallStack::default_instance_ = NULL;

CallStack* CallStack::New() const {
  return new CallStack;
}

void CallStack::Clear() {
  addr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CallStack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:panda.CallStack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 addr = 1;
      case 1: {
        if (tag == 8) {
         parse_addr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_addr())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_addr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_addr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:panda.CallStack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:panda.CallStack)
  return false;
#undef DO_
}

void CallStack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:panda.CallStack)
  // repeated uint64 addr = 1;
  for (int i = 0; i < this->addr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->addr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:panda.CallStack)
}

::google::protobuf::uint8* CallStack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:panda.CallStack)
  // repeated uint64 addr = 1;
  for (int i = 0; i < this->addr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->addr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:panda.CallStack)
  return target;
}

int CallStack::ByteSize() const {
  int total_size = 0;

  // repeated uint64 addr = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->addr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->addr(i));
    }
    total_size += 1 * this->addr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CallStack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CallStack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CallStack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CallStack::MergeFrom(const CallStack& from) {
  GOOGLE_CHECK_NE(&from, this);
  addr_.MergeFrom(from.addr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CallStack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CallStack::CopyFrom(const CallStack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallStack::IsInitialized() const {

  return true;
}

void CallStack::Swap(CallStack* other) {
  if (other != this) {
    addr_.Swap(&other->addr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CallStack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CallStack_descriptor_;
  metadata.reflection = CallStack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DwarfCall::kFileCalleeFieldNumber;
const int DwarfCall::kFunctionNameCalleeFieldNumber;
const int DwarfCall::kLineNumberCalleeFieldNumber;
const int DwarfCall::kFileCallerFieldNumber;
const int DwarfCall::kLineNumberCallerFieldNumber;
#endif  // !_MSC_VER

DwarfCall::DwarfCall()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:panda.DwarfCall)
}

void DwarfCall::InitAsDefaultInstance() {
}

DwarfCall::DwarfCall(const DwarfCall& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:panda.DwarfCall)
}

void DwarfCall::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  file_callee_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  function_name_callee_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_number_callee_ = GOOGLE_ULONGLONG(0);
  file_caller_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_number_caller_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DwarfCall::~DwarfCall() {
  // @@protoc_insertion_point(destructor:panda.DwarfCall)
  SharedDtor();
}

void DwarfCall::SharedDtor() {
  if (file_callee_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_callee_;
  }
  if (function_name_callee_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete function_name_callee_;
  }
  if (file_caller_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_caller_;
  }
  if (this != default_instance_) {
  }
}

void DwarfCall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DwarfCall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DwarfCall_descriptor_;
}

const DwarfCall& DwarfCall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plog_2eproto();
  return *default_instance_;
}

DwarfCall* DwarfCall::default_instance_ = NULL;

DwarfCall* DwarfCall::New() const {
  return new DwarfCall;
}

void DwarfCall::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_file_callee()) {
      if (file_callee_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        file_callee_->clear();
      }
    }
    if (has_function_name_callee()) {
      if (function_name_callee_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        function_name_callee_->clear();
      }
    }
    line_number_callee_ = GOOGLE_ULONGLONG(0);
    if (has_file_caller()) {
      if (file_caller_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        file_caller_->clear();
      }
    }
    line_number_caller_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DwarfCall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:panda.DwarfCall)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string file_callee = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_callee()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_callee().data(), this->file_callee().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "file_callee");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_function_name_callee;
        break;
      }

      // required string function_name_callee = 2;
      case 2: {
        if (tag == 18) {
         parse_function_name_callee:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_function_name_callee()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->function_name_callee().data(), this->function_name_callee().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "function_name_callee");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_line_number_callee;
        break;
      }

      // required uint64 line_number_callee = 3;
      case 3: {
        if (tag == 24) {
         parse_line_number_callee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &line_number_callee_)));
          set_has_line_number_callee();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_file_caller;
        break;
      }

      // required string file_caller = 4;
      case 4: {
        if (tag == 34) {
         parse_file_caller:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_caller()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_caller().data(), this->file_caller().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "file_caller");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_line_number_caller;
        break;
      }

      // required uint64 line_number_caller = 5;
      case 5: {
        if (tag == 40) {
         parse_line_number_caller:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &line_number_caller_)));
          set_has_line_number_caller();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:panda.DwarfCall)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:panda.DwarfCall)
  return false;
#undef DO_
}

void DwarfCall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:panda.DwarfCall)
  // required string file_callee = 1;
  if (has_file_callee()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_callee().data(), this->file_callee().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file_callee");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_callee(), output);
  }

  // required string function_name_callee = 2;
  if (has_function_name_callee()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->function_name_callee().data(), this->function_name_callee().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "function_name_callee");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->function_name_callee(), output);
  }

  // required uint64 line_number_callee = 3;
  if (has_line_number_callee()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->line_number_callee(), output);
  }

  // required string file_caller = 4;
  if (has_file_caller()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_caller().data(), this->file_caller().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file_caller");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->file_caller(), output);
  }

  // required uint64 line_number_caller = 5;
  if (has_line_number_caller()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->line_number_caller(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:panda.DwarfCall)
}

::google::protobuf::uint8* DwarfCall::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:panda.DwarfCall)
  // required string file_callee = 1;
  if (has_file_callee()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_callee().data(), this->file_callee().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file_callee");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_callee(), target);
  }

  // required string function_name_callee = 2;
  if (has_function_name_callee()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->function_name_callee().data(), this->function_name_callee().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "function_name_callee");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->function_name_callee(), target);
  }

  // required uint64 line_number_callee = 3;
  if (has_line_number_callee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->line_number_callee(), target);
  }

  // required string file_caller = 4;
  if (has_file_caller()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_caller().data(), this->file_caller().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file_caller");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->file_caller(), target);
  }

  // required uint64 line_number_caller = 5;
  if (has_line_number_caller()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->line_number_caller(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:panda.DwarfCall)
  return target;
}

int DwarfCall::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string file_callee = 1;
    if (has_file_callee()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_callee());
    }

    // required string function_name_callee = 2;
    if (has_function_name_callee()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->function_name_callee());
    }

    // required uint64 line_number_callee = 3;
    if (has_line_number_callee()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->line_number_callee());
    }

    // required string file_caller = 4;
    if (has_file_caller()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_caller());
    }

    // required uint64 line_number_caller = 5;
    if (has_line_number_caller()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->line_number_caller());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DwarfCall::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DwarfCall* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DwarfCall*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DwarfCall::MergeFrom(const DwarfCall& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_callee()) {
      set_file_callee(from.file_callee());
    }
    if (from.has_function_name_callee()) {
      set_function_name_callee(from.function_name_callee());
    }
    if (from.has_line_number_callee()) {
      set_line_number_callee(from.line_number_callee());
    }
    if (from.has_file_caller()) {
      set_file_caller(from.file_caller());
    }
    if (from.has_line_number_caller()) {
      set_line_number_caller(from.line_number_caller());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DwarfCall::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DwarfCall::CopyFrom(const DwarfCall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DwarfCall::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void DwarfCall::Swap(DwarfCall* other) {
  if (other != this) {
    std::swap(file_callee_, other->file_callee_);
    std::swap(function_name_callee_, other->function_name_callee_);
    std::swap(line_number_callee_, other->line_number_callee_);
    std::swap(file_caller_, other->file_caller_);
    std::swap(line_number_caller_, other->line_number_caller_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DwarfCall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DwarfCall_descriptor_;
  metadata.reflection = DwarfCall_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SrcInfoPri::kFilenameFieldNumber;
const int SrcInfoPri::kLinenumFieldNumber;
const int SrcInfoPri::kAstnodenameFieldNumber;
const int SrcInfoPri::kInsertionpointFieldNumber;
const int SrcInfoPri::kAstLocIdFieldNumber;
#endif  // !_MSC_VER

SrcInfoPri::SrcInfoPri()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:panda.SrcInfoPri)
}

void SrcInfoPri::InitAsDefaultInstance() {
}

SrcInfoPri::SrcInfoPri(const SrcInfoPri& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:panda.SrcInfoPri)
}

void SrcInfoPri::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  linenum_ = 0u;
  astnodename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  insertionpoint_ = 0u;
  ast_loc_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SrcInfoPri::~SrcInfoPri() {
  // @@protoc_insertion_point(destructor:panda.SrcInfoPri)
  SharedDtor();
}

void SrcInfoPri::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (astnodename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete astnodename_;
  }
  if (this != default_instance_) {
  }
}

void SrcInfoPri::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SrcInfoPri::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SrcInfoPri_descriptor_;
}

const SrcInfoPri& SrcInfoPri::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plog_2eproto();
  return *default_instance_;
}

SrcInfoPri* SrcInfoPri::default_instance_ = NULL;

SrcInfoPri* SrcInfoPri::New() const {
  return new SrcInfoPri;
}

void SrcInfoPri::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SrcInfoPri*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(linenum_, ast_loc_id_);
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filename_->clear();
      }
    }
    if (has_astnodename()) {
      if (astnodename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        astnodename_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SrcInfoPri::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:panda.SrcInfoPri)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string filename = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_linenum;
        break;
      }

      // required uint32 linenum = 2;
      case 2: {
        if (tag == 16) {
         parse_linenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &linenum_)));
          set_has_linenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_astnodename;
        break;
      }

      // required string astnodename = 3;
      case 3: {
        if (tag == 26) {
         parse_astnodename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_astnodename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->astnodename().data(), this->astnodename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "astnodename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_insertionpoint;
        break;
      }

      // optional uint32 insertionpoint = 4;
      case 4: {
        if (tag == 32) {
         parse_insertionpoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &insertionpoint_)));
          set_has_insertionpoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ast_loc_id;
        break;
      }

      // optional uint32 ast_loc_id = 5;
      case 5: {
        if (tag == 40) {
         parse_ast_loc_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ast_loc_id_)));
          set_has_ast_loc_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:panda.SrcInfoPri)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:panda.SrcInfoPri)
  return false;
#undef DO_
}

void SrcInfoPri::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:panda.SrcInfoPri)
  // required string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  // required uint32 linenum = 2;
  if (has_linenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->linenum(), output);
  }

  // required string astnodename = 3;
  if (has_astnodename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->astnodename().data(), this->astnodename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "astnodename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->astnodename(), output);
  }

  // optional uint32 insertionpoint = 4;
  if (has_insertionpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->insertionpoint(), output);
  }

  // optional uint32 ast_loc_id = 5;
  if (has_ast_loc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ast_loc_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:panda.SrcInfoPri)
}

::google::protobuf::uint8* SrcInfoPri::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:panda.SrcInfoPri)
  // required string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  // required uint32 linenum = 2;
  if (has_linenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->linenum(), target);
  }

  // required string astnodename = 3;
  if (has_astnodename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->astnodename().data(), this->astnodename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "astnodename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->astnodename(), target);
  }

  // optional uint32 insertionpoint = 4;
  if (has_insertionpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->insertionpoint(), target);
  }

  // optional uint32 ast_loc_id = 5;
  if (has_ast_loc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ast_loc_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:panda.SrcInfoPri)
  return target;
}

int SrcInfoPri::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string filename = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // required uint32 linenum = 2;
    if (has_linenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->linenum());
    }

    // required string astnodename = 3;
    if (has_astnodename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->astnodename());
    }

    // optional uint32 insertionpoint = 4;
    if (has_insertionpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->insertionpoint());
    }

    // optional uint32 ast_loc_id = 5;
    if (has_ast_loc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ast_loc_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SrcInfoPri::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SrcInfoPri* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SrcInfoPri*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SrcInfoPri::MergeFrom(const SrcInfoPri& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_linenum()) {
      set_linenum(from.linenum());
    }
    if (from.has_astnodename()) {
      set_astnodename(from.astnodename());
    }
    if (from.has_insertionpoint()) {
      set_insertionpoint(from.insertionpoint());
    }
    if (from.has_ast_loc_id()) {
      set_ast_loc_id(from.ast_loc_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SrcInfoPri::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SrcInfoPri::CopyFrom(const SrcInfoPri& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SrcInfoPri::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SrcInfoPri::Swap(SrcInfoPri* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(linenum_, other->linenum_);
    std::swap(astnodename_, other->astnodename_);
    std::swap(insertionpoint_, other->insertionpoint_);
    std::swap(ast_loc_id_, other->ast_loc_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SrcInfoPri::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SrcInfoPri_descriptor_;
  metadata.reflection = SrcInfoPri_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AttackPointPri::kInfoFieldNumber;
const int AttackPointPri::kCallStackFieldNumber;
const int AttackPointPri::kSrcInfoFieldNumber;
#endif  // !_MSC_VER

AttackPointPri::AttackPointPri()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:panda.AttackPointPri)
}

void AttackPointPri::InitAsDefaultInstance() {
  call_stack_ = const_cast< ::panda::CallStack*>(&::panda::CallStack::default_instance());
  src_info_ = const_cast< ::panda::SrcInfoPri*>(&::panda::SrcInfoPri::default_instance());
}

AttackPointPri::AttackPointPri(const AttackPointPri& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:panda.AttackPointPri)
}

void AttackPointPri::SharedCtor() {
  _cached_size_ = 0;
  info_ = 0u;
  call_stack_ = NULL;
  src_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AttackPointPri::~AttackPointPri() {
  // @@protoc_insertion_point(destructor:panda.AttackPointPri)
  SharedDtor();
}

void AttackPointPri::SharedDtor() {
  if (this != default_instance_) {
    delete call_stack_;
    delete src_info_;
  }
}

void AttackPointPri::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AttackPointPri::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AttackPointPri_descriptor_;
}

const AttackPointPri& AttackPointPri::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plog_2eproto();
  return *default_instance_;
}

AttackPointPri* AttackPointPri::default_instance_ = NULL;

AttackPointPri* AttackPointPri::New() const {
  return new AttackPointPri;
}

void AttackPointPri::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    info_ = 0u;
    if (has_call_stack()) {
      if (call_stack_ != NULL) call_stack_->::panda::CallStack::Clear();
    }
    if (has_src_info()) {
      if (src_info_ != NULL) src_info_->::panda::SrcInfoPri::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AttackPointPri::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:panda.AttackPointPri)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 info = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &info_)));
          set_has_info();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_call_stack;
        break;
      }

      // required .panda.CallStack call_stack = 2;
      case 2: {
        if (tag == 18) {
         parse_call_stack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_call_stack()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_src_info;
        break;
      }

      // required .panda.SrcInfoPri src_info = 3;
      case 3: {
        if (tag == 26) {
         parse_src_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_src_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:panda.AttackPointPri)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:panda.AttackPointPri)
  return false;
#undef DO_
}

void AttackPointPri::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:panda.AttackPointPri)
  // required uint32 info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->info(), output);
  }

  // required .panda.CallStack call_stack = 2;
  if (has_call_stack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->call_stack(), output);
  }

  // required .panda.SrcInfoPri src_info = 3;
  if (has_src_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->src_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:panda.AttackPointPri)
}

::google::protobuf::uint8* AttackPointPri::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:panda.AttackPointPri)
  // required uint32 info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->info(), target);
  }

  // required .panda.CallStack call_stack = 2;
  if (has_call_stack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->call_stack(), target);
  }

  // required .panda.SrcInfoPri src_info = 3;
  if (has_src_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->src_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:panda.AttackPointPri)
  return target;
}

int AttackPointPri::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->info());
    }

    // required .panda.CallStack call_stack = 2;
    if (has_call_stack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->call_stack());
    }

    // required .panda.SrcInfoPri src_info = 3;
    if (has_src_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->src_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttackPointPri::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AttackPointPri* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AttackPointPri*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AttackPointPri::MergeFrom(const AttackPointPri& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      set_info(from.info());
    }
    if (from.has_call_stack()) {
      mutable_call_stack()->::panda::CallStack::MergeFrom(from.call_stack());
    }
    if (from.has_src_info()) {
      mutable_src_info()->::panda::SrcInfoPri::MergeFrom(from.src_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AttackPointPri::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttackPointPri::CopyFrom(const AttackPointPri& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttackPointPri::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_src_info()) {
    if (!this->src_info().IsInitialized()) return false;
  }
  return true;
}

void AttackPointPri::Swap(AttackPointPri* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(call_stack_, other->call_stack_);
    std::swap(src_info_, other->src_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AttackPointPri::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AttackPointPri_descriptor_;
  metadata.reflection = AttackPointPri_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TaintQueryPri::kBufFieldNumber;
const int TaintQueryPri::kLenFieldNumber;
const int TaintQueryPri::kDataFieldNumber;
const int TaintQueryPri::kNumTaintedFieldNumber;
const int TaintQueryPri::kCallStackFieldNumber;
const int TaintQueryPri::kSrcInfoFieldNumber;
const int TaintQueryPri::kTaintQueryFieldNumber;
#endif  // !_MSC_VER

TaintQueryPri::TaintQueryPri()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:panda.TaintQueryPri)
}

void TaintQueryPri::InitAsDefaultInstance() {
  call_stack_ = const_cast< ::panda::CallStack*>(&::panda::CallStack::default_instance());
  src_info_ = const_cast< ::panda::SrcInfoPri*>(&::panda::SrcInfoPri::default_instance());
}

TaintQueryPri::TaintQueryPri(const TaintQueryPri& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:panda.TaintQueryPri)
}

void TaintQueryPri::SharedCtor() {
  _cached_size_ = 0;
  buf_ = GOOGLE_ULONGLONG(0);
  len_ = 0u;
  num_tainted_ = 0u;
  call_stack_ = NULL;
  src_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaintQueryPri::~TaintQueryPri() {
  // @@protoc_insertion_point(destructor:panda.TaintQueryPri)
  SharedDtor();
}

void TaintQueryPri::SharedDtor() {
  if (this != default_instance_) {
    delete call_stack_;
    delete src_info_;
  }
}

void TaintQueryPri::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaintQueryPri::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaintQueryPri_descriptor_;
}

const TaintQueryPri& TaintQueryPri::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plog_2eproto();
  return *default_instance_;
}

TaintQueryPri* TaintQueryPri::default_instance_ = NULL;

TaintQueryPri* TaintQueryPri::New() const {
  return new TaintQueryPri;
}

void TaintQueryPri::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TaintQueryPri*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 59) {
    ZR_(len_, num_tainted_);
    buf_ = GOOGLE_ULONGLONG(0);
    if (has_call_stack()) {
      if (call_stack_ != NULL) call_stack_->::panda::CallStack::Clear();
    }
    if (has_src_info()) {
      if (src_info_ != NULL) src_info_->::panda::SrcInfoPri::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  taint_query_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaintQueryPri::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:panda.TaintQueryPri)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 buf = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buf_)));
          set_has_buf();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_len;
        break;
      }

      // required uint32 len = 2;
      case 2: {
        if (tag == 16) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_data;
        break;
      }

      // repeated uint32 data = 3;
      case 3: {
        if (tag == 24) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_data())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_data;
        if (input->ExpectTag(32)) goto parse_num_tainted;
        break;
      }

      // required uint32 num_tainted = 4;
      case 4: {
        if (tag == 32) {
         parse_num_tainted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_tainted_)));
          set_has_num_tainted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_call_stack;
        break;
      }

      // required .panda.CallStack call_stack = 5;
      case 5: {
        if (tag == 42) {
         parse_call_stack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_call_stack()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_src_info;
        break;
      }

      // required .panda.SrcInfoPri src_info = 6;
      case 6: {
        if (tag == 50) {
         parse_src_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_src_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_taint_query;
        break;
      }

      // repeated .panda.TaintQuery taint_query = 7;
      case 7: {
        if (tag == 58) {
         parse_taint_query:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_taint_query()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_taint_query;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:panda.TaintQueryPri)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:panda.TaintQueryPri)
  return false;
#undef DO_
}

void TaintQueryPri::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:panda.TaintQueryPri)
  // required uint64 buf = 1;
  if (has_buf()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->buf(), output);
  }

  // required uint32 len = 2;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->len(), output);
  }

  // repeated uint32 data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->data(i), output);
  }

  // required uint32 num_tainted = 4;
  if (has_num_tainted()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->num_tainted(), output);
  }

  // required .panda.CallStack call_stack = 5;
  if (has_call_stack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->call_stack(), output);
  }

  // required .panda.SrcInfoPri src_info = 6;
  if (has_src_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->src_info(), output);
  }

  // repeated .panda.TaintQuery taint_query = 7;
  for (int i = 0; i < this->taint_query_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->taint_query(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:panda.TaintQueryPri)
}

::google::protobuf::uint8* TaintQueryPri::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:panda.TaintQueryPri)
  // required uint64 buf = 1;
  if (has_buf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->buf(), target);
  }

  // required uint32 len = 2;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->len(), target);
  }

  // repeated uint32 data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->data(i), target);
  }

  // required uint32 num_tainted = 4;
  if (has_num_tainted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->num_tainted(), target);
  }

  // required .panda.CallStack call_stack = 5;
  if (has_call_stack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->call_stack(), target);
  }

  // required .panda.SrcInfoPri src_info = 6;
  if (has_src_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->src_info(), target);
  }

  // repeated .panda.TaintQuery taint_query = 7;
  for (int i = 0; i < this->taint_query_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->taint_query(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:panda.TaintQueryPri)
  return target;
}

int TaintQueryPri::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 buf = 1;
    if (has_buf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->buf());
    }

    // required uint32 len = 2;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->len());
    }

    // required uint32 num_tainted = 4;
    if (has_num_tainted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_tainted());
    }

    // required .panda.CallStack call_stack = 5;
    if (has_call_stack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->call_stack());
    }

    // required .panda.SrcInfoPri src_info = 6;
    if (has_src_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->src_info());
    }

  }
  // repeated uint32 data = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->data(i));
    }
    total_size += 1 * this->data_size() + data_size;
  }

  // repeated .panda.TaintQuery taint_query = 7;
  total_size += 1 * this->taint_query_size();
  for (int i = 0; i < this->taint_query_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->taint_query(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaintQueryPri::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaintQueryPri* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaintQueryPri*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaintQueryPri::MergeFrom(const TaintQueryPri& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  taint_query_.MergeFrom(from.taint_query_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buf()) {
      set_buf(from.buf());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
    if (from.has_num_tainted()) {
      set_num_tainted(from.num_tainted());
    }
    if (from.has_call_stack()) {
      mutable_call_stack()->::panda::CallStack::MergeFrom(from.call_stack());
    }
    if (from.has_src_info()) {
      mutable_src_info()->::panda::SrcInfoPri::MergeFrom(from.src_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaintQueryPri::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaintQueryPri::CopyFrom(const TaintQueryPri& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaintQueryPri::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003b) != 0x0000003b) return false;

  if (has_src_info()) {
    if (!this->src_info().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->taint_query())) return false;
  return true;
}

void TaintQueryPri::Swap(TaintQueryPri* other) {
  if (other != this) {
    std::swap(buf_, other->buf_);
    std::swap(len_, other->len_);
    data_.Swap(&other->data_);
    std::swap(num_tainted_, other->num_tainted_);
    std::swap(call_stack_, other->call_stack_);
    std::swap(src_info_, other->src_info_);
    taint_query_.Swap(&other->taint_query_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaintQueryPri::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaintQueryPri_descriptor_;
  metadata.reflection = TaintQueryPri_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TaintQueryUniqueLabelSet::kPtrFieldNumber;
const int TaintQueryUniqueLabelSet::kLabelFieldNumber;
#endif  // !_MSC_VER

TaintQueryUniqueLabelSet::TaintQueryUniqueLabelSet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:panda.TaintQueryUniqueLabelSet)
}

void TaintQueryUniqueLabelSet::InitAsDefaultInstance() {
}

TaintQueryUniqueLabelSet::TaintQueryUniqueLabelSet(const TaintQueryUniqueLabelSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:panda.TaintQueryUniqueLabelSet)
}

void TaintQueryUniqueLabelSet::SharedCtor() {
  _cached_size_ = 0;
  ptr_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaintQueryUniqueLabelSet::~TaintQueryUniqueLabelSet() {
  // @@protoc_insertion_point(destructor:panda.TaintQueryUniqueLabelSet)
  SharedDtor();
}

void TaintQueryUniqueLabelSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TaintQueryUniqueLabelSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaintQueryUniqueLabelSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaintQueryUniqueLabelSet_descriptor_;
}

const TaintQueryUniqueLabelSet& TaintQueryUniqueLabelSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plog_2eproto();
  return *default_instance_;
}

TaintQueryUniqueLabelSet* TaintQueryUniqueLabelSet::default_instance_ = NULL;

TaintQueryUniqueLabelSet* TaintQueryUniqueLabelSet::New() const {
  return new TaintQueryUniqueLabelSet;
}

void TaintQueryUniqueLabelSet::Clear() {
  ptr_ = GOOGLE_ULONGLONG(0);
  label_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaintQueryUniqueLabelSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:panda.TaintQueryUniqueLabelSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 ptr = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ptr_)));
          set_has_ptr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_label;
        break;
      }

      // repeated uint32 label = 2;
      case 2: {
        if (tag == 16) {
         parse_label:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_label())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_label())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_label;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:panda.TaintQueryUniqueLabelSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:panda.TaintQueryUniqueLabelSet)
  return false;
#undef DO_
}

void TaintQueryUniqueLabelSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:panda.TaintQueryUniqueLabelSet)
  // required uint64 ptr = 1;
  if (has_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->ptr(), output);
  }

  // repeated uint32 label = 2;
  for (int i = 0; i < this->label_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->label(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:panda.TaintQueryUniqueLabelSet)
}

::google::protobuf::uint8* TaintQueryUniqueLabelSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:panda.TaintQueryUniqueLabelSet)
  // required uint64 ptr = 1;
  if (has_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->ptr(), target);
  }

  // repeated uint32 label = 2;
  for (int i = 0; i < this->label_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->label(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:panda.TaintQueryUniqueLabelSet)
  return target;
}

int TaintQueryUniqueLabelSet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 ptr = 1;
    if (has_ptr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ptr());
    }

  }
  // repeated uint32 label = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->label_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->label(i));
    }
    total_size += 1 * this->label_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaintQueryUniqueLabelSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaintQueryUniqueLabelSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaintQueryUniqueLabelSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaintQueryUniqueLabelSet::MergeFrom(const TaintQueryUniqueLabelSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  label_.MergeFrom(from.label_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ptr()) {
      set_ptr(from.ptr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaintQueryUniqueLabelSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaintQueryUniqueLabelSet::CopyFrom(const TaintQueryUniqueLabelSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaintQueryUniqueLabelSet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TaintQueryUniqueLabelSet::Swap(TaintQueryUniqueLabelSet* other) {
  if (other != this) {
    std::swap(ptr_, other->ptr_);
    label_.Swap(&other->label_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaintQueryUniqueLabelSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaintQueryUniqueLabelSet_descriptor_;
  metadata.reflection = TaintQueryUniqueLabelSet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SrcInfo::kFilenameFieldNumber;
const int SrcInfo::kLinenumFieldNumber;
const int SrcInfo::kAstnodenameFieldNumber;
const int SrcInfo::kInsertionpointFieldNumber;
const int SrcInfo::kAstLocIdFieldNumber;
#endif  // !_MSC_VER

SrcInfo::SrcInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:panda.SrcInfo)
}

void SrcInfo::InitAsDefaultInstance() {
}

SrcInfo::SrcInfo(const SrcInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:panda.SrcInfo)
}

void SrcInfo::SharedCtor() {
  _cached_size_ = 0;
  filename_ = 0u;
  linenum_ = 0u;
  astnodename_ = 0u;
  insertionpoint_ = 0u;
  ast_loc_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SrcInfo::~SrcInfo() {
  // @@protoc_insertion_point(destructor:panda.SrcInfo)
  SharedDtor();
}

void SrcInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SrcInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SrcInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SrcInfo_descriptor_;
}

const SrcInfo& SrcInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plog_2eproto();
  return *default_instance_;
}

SrcInfo* SrcInfo::default_instance_ = NULL;

SrcInfo* SrcInfo::New() const {
  return new SrcInfo;
}

void SrcInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SrcInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(filename_, ast_loc_id_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SrcInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:panda.SrcInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 filename = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filename_)));
          set_has_filename();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_linenum;
        break;
      }

      // required uint32 linenum = 2;
      case 2: {
        if (tag == 16) {
         parse_linenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &linenum_)));
          set_has_linenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_astnodename;
        break;
      }

      // required uint32 astnodename = 3;
      case 3: {
        if (tag == 24) {
         parse_astnodename:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &astnodename_)));
          set_has_astnodename();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_insertionpoint;
        break;
      }

      // optional uint32 insertionpoint = 4;
      case 4: {
        if (tag == 32) {
         parse_insertionpoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &insertionpoint_)));
          set_has_insertionpoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ast_loc_id;
        break;
      }

      // optional uint32 ast_loc_id = 5;
      case 5: {
        if (tag == 40) {
         parse_ast_loc_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ast_loc_id_)));
          set_has_ast_loc_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:panda.SrcInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:panda.SrcInfo)
  return false;
#undef DO_
}

void SrcInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:panda.SrcInfo)
  // required uint32 filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->filename(), output);
  }

  // required uint32 linenum = 2;
  if (has_linenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->linenum(), output);
  }

  // required uint32 astnodename = 3;
  if (has_astnodename()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->astnodename(), output);
  }

  // optional uint32 insertionpoint = 4;
  if (has_insertionpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->insertionpoint(), output);
  }

  // optional uint32 ast_loc_id = 5;
  if (has_ast_loc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ast_loc_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:panda.SrcInfo)
}

::google::protobuf::uint8* SrcInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:panda.SrcInfo)
  // required uint32 filename = 1;
  if (has_filename()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->filename(), target);
  }

  // required uint32 linenum = 2;
  if (has_linenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->linenum(), target);
  }

  // required uint32 astnodename = 3;
  if (has_astnodename()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->astnodename(), target);
  }

  // optional uint32 insertionpoint = 4;
  if (has_insertionpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->insertionpoint(), target);
  }

  // optional uint32 ast_loc_id = 5;
  if (has_ast_loc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ast_loc_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:panda.SrcInfo)
  return target;
}

int SrcInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 filename = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filename());
    }

    // required uint32 linenum = 2;
    if (has_linenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->linenum());
    }

    // required uint32 astnodename = 3;
    if (has_astnodename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->astnodename());
    }

    // optional uint32 insertionpoint = 4;
    if (has_insertionpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->insertionpoint());
    }

    // optional uint32 ast_loc_id = 5;
    if (has_ast_loc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ast_loc_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SrcInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SrcInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SrcInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SrcInfo::MergeFrom(const SrcInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_linenum()) {
      set_linenum(from.linenum());
    }
    if (from.has_astnodename()) {
      set_astnodename(from.astnodename());
    }
    if (from.has_insertionpoint()) {
      set_insertionpoint(from.insertionpoint());
    }
    if (from.has_ast_loc_id()) {
      set_ast_loc_id(from.ast_loc_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SrcInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SrcInfo::CopyFrom(const SrcInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SrcInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SrcInfo::Swap(SrcInfo* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(linenum_, other->linenum_);
    std::swap(astnodename_, other->astnodename_);
    std::swap(insertionpoint_, other->insertionpoint_);
    std::swap(ast_loc_id_, other->ast_loc_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SrcInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SrcInfo_descriptor_;
  metadata.reflection = SrcInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TaintQuery::kPtrFieldNumber;
const int TaintQuery::kTcnFieldNumber;
const int TaintQuery::kOffsetFieldNumber;
const int TaintQuery::kUniqueLabelSetFieldNumber;
#endif  // !_MSC_VER

TaintQuery::TaintQuery()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:panda.TaintQuery)
}

void TaintQuery::InitAsDefaultInstance() {
  unique_label_set_ = const_cast< ::panda::TaintQueryUniqueLabelSet*>(&::panda::TaintQueryUniqueLabelSet::default_instance());
}

TaintQuery::TaintQuery(const TaintQuery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:panda.TaintQuery)
}

void TaintQuery::SharedCtor() {
  _cached_size_ = 0;
  ptr_ = GOOGLE_ULONGLONG(0);
  tcn_ = 0u;
  offset_ = 0u;
  unique_label_set_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaintQuery::~TaintQuery() {
  // @@protoc_insertion_point(destructor:panda.TaintQuery)
  SharedDtor();
}

void TaintQuery::SharedDtor() {
  if (this != default_instance_) {
    delete unique_label_set_;
  }
}

void TaintQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaintQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaintQuery_descriptor_;
}

const TaintQuery& TaintQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plog_2eproto();
  return *default_instance_;
}

TaintQuery* TaintQuery::default_instance_ = NULL;

TaintQuery* TaintQuery::New() const {
  return new TaintQuery;
}

void TaintQuery::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TaintQuery*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(ptr_, offset_);
    if (has_unique_label_set()) {
      if (unique_label_set_ != NULL) unique_label_set_->::panda::TaintQueryUniqueLabelSet::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaintQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:panda.TaintQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 ptr = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ptr_)));
          set_has_ptr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tcn;
        break;
      }

      // required uint32 tcn = 2;
      case 2: {
        if (tag == 16) {
         parse_tcn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tcn_)));
          set_has_tcn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_offset;
        break;
      }

      // required uint32 offset = 3;
      case 3: {
        if (tag == 24) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_unique_label_set;
        break;
      }

      // optional .panda.TaintQueryUniqueLabelSet unique_label_set = 4;
      case 4: {
        if (tag == 34) {
         parse_unique_label_set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unique_label_set()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:panda.TaintQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:panda.TaintQuery)
  return false;
#undef DO_
}

void TaintQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:panda.TaintQuery)
  // required uint64 ptr = 1;
  if (has_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->ptr(), output);
  }

  // required uint32 tcn = 2;
  if (has_tcn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tcn(), output);
  }

  // required uint32 offset = 3;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->offset(), output);
  }

  // optional .panda.TaintQueryUniqueLabelSet unique_label_set = 4;
  if (has_unique_label_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->unique_label_set(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:panda.TaintQuery)
}

::google::protobuf::uint8* TaintQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:panda.TaintQuery)
  // required uint64 ptr = 1;
  if (has_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->ptr(), target);
  }

  // required uint32 tcn = 2;
  if (has_tcn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tcn(), target);
  }

  // required uint32 offset = 3;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->offset(), target);
  }

  // optional .panda.TaintQueryUniqueLabelSet unique_label_set = 4;
  if (has_unique_label_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->unique_label_set(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:panda.TaintQuery)
  return target;
}

int TaintQuery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 ptr = 1;
    if (has_ptr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ptr());
    }

    // required uint32 tcn = 2;
    if (has_tcn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tcn());
    }

    // required uint32 offset = 3;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // optional .panda.TaintQueryUniqueLabelSet unique_label_set = 4;
    if (has_unique_label_set()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unique_label_set());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaintQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaintQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaintQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaintQuery::MergeFrom(const TaintQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ptr()) {
      set_ptr(from.ptr());
    }
    if (from.has_tcn()) {
      set_tcn(from.tcn());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_unique_label_set()) {
      mutable_unique_label_set()->::panda::TaintQueryUniqueLabelSet::MergeFrom(from.unique_label_set());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaintQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaintQuery::CopyFrom(const TaintQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaintQuery::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_unique_label_set()) {
    if (!this->unique_label_set().IsInitialized()) return false;
  }
  return true;
}

void TaintQuery::Swap(TaintQuery* other) {
  if (other != this) {
    std::swap(ptr_, other->ptr_);
    std::swap(tcn_, other->tcn_);
    std::swap(offset_, other->offset_);
    std::swap(unique_label_set_, other->unique_label_set_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaintQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaintQuery_descriptor_;
  metadata.reflection = TaintQuery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AttackPoint::kInfoFieldNumber;
const int AttackPoint::kCallStackFieldNumber;
const int AttackPoint::kSrcInfoFieldNumber;
#endif  // !_MSC_VER

AttackPoint::AttackPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:panda.AttackPoint)
}

void AttackPoint::InitAsDefaultInstance() {
  call_stack_ = const_cast< ::panda::CallStack*>(&::panda::CallStack::default_instance());
  src_info_ = const_cast< ::panda::SrcInfo*>(&::panda::SrcInfo::default_instance());
}

AttackPoint::AttackPoint(const AttackPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:panda.AttackPoint)
}

void AttackPoint::SharedCtor() {
  _cached_size_ = 0;
  info_ = 0u;
  call_stack_ = NULL;
  src_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AttackPoint::~AttackPoint() {
  // @@protoc_insertion_point(destructor:panda.AttackPoint)
  SharedDtor();
}

void AttackPoint::SharedDtor() {
  if (this != default_instance_) {
    delete call_stack_;
    delete src_info_;
  }
}

void AttackPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AttackPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AttackPoint_descriptor_;
}

const AttackPoint& AttackPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plog_2eproto();
  return *default_instance_;
}

AttackPoint* AttackPoint::default_instance_ = NULL;

AttackPoint* AttackPoint::New() const {
  return new AttackPoint;
}

void AttackPoint::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    info_ = 0u;
    if (has_call_stack()) {
      if (call_stack_ != NULL) call_stack_->::panda::CallStack::Clear();
    }
    if (has_src_info()) {
      if (src_info_ != NULL) src_info_->::panda::SrcInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AttackPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:panda.AttackPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 info = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &info_)));
          set_has_info();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_call_stack;
        break;
      }

      // required .panda.CallStack call_stack = 2;
      case 2: {
        if (tag == 18) {
         parse_call_stack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_call_stack()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_src_info;
        break;
      }

      // required .panda.SrcInfo src_info = 3;
      case 3: {
        if (tag == 26) {
         parse_src_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_src_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:panda.AttackPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:panda.AttackPoint)
  return false;
#undef DO_
}

void AttackPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:panda.AttackPoint)
  // required uint32 info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->info(), output);
  }

  // required .panda.CallStack call_stack = 2;
  if (has_call_stack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->call_stack(), output);
  }

  // required .panda.SrcInfo src_info = 3;
  if (has_src_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->src_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:panda.AttackPoint)
}

::google::protobuf::uint8* AttackPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:panda.AttackPoint)
  // required uint32 info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->info(), target);
  }

  // required .panda.CallStack call_stack = 2;
  if (has_call_stack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->call_stack(), target);
  }

  // required .panda.SrcInfo src_info = 3;
  if (has_src_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->src_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:panda.AttackPoint)
  return target;
}

int AttackPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->info());
    }

    // required .panda.CallStack call_stack = 2;
    if (has_call_stack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->call_stack());
    }

    // required .panda.SrcInfo src_info = 3;
    if (has_src_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->src_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttackPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AttackPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AttackPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AttackPoint::MergeFrom(const AttackPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      set_info(from.info());
    }
    if (from.has_call_stack()) {
      mutable_call_stack()->::panda::CallStack::MergeFrom(from.call_stack());
    }
    if (from.has_src_info()) {
      mutable_src_info()->::panda::SrcInfo::MergeFrom(from.src_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AttackPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttackPoint::CopyFrom(const AttackPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttackPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_src_info()) {
    if (!this->src_info().IsInitialized()) return false;
  }
  return true;
}

void AttackPoint::Swap(AttackPoint* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(call_stack_, other->call_stack_);
    std::swap(src_info_, other->src_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AttackPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AttackPoint_descriptor_;
  metadata.reflection = AttackPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TaintQueryHypercall::kBufFieldNumber;
const int TaintQueryHypercall::kLenFieldNumber;
const int TaintQueryHypercall::kDataFieldNumber;
const int TaintQueryHypercall::kNumTaintedFieldNumber;
const int TaintQueryHypercall::kCallStackFieldNumber;
const int TaintQueryHypercall::kSrcInfoFieldNumber;
const int TaintQueryHypercall::kTaintQueryFieldNumber;
#endif  // !_MSC_VER

TaintQueryHypercall::TaintQueryHypercall()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:panda.TaintQueryHypercall)
}

void TaintQueryHypercall::InitAsDefaultInstance() {
  call_stack_ = const_cast< ::panda::CallStack*>(&::panda::CallStack::default_instance());
  src_info_ = const_cast< ::panda::SrcInfo*>(&::panda::SrcInfo::default_instance());
}

TaintQueryHypercall::TaintQueryHypercall(const TaintQueryHypercall& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:panda.TaintQueryHypercall)
}

void TaintQueryHypercall::SharedCtor() {
  _cached_size_ = 0;
  buf_ = GOOGLE_ULONGLONG(0);
  len_ = 0u;
  num_tainted_ = 0u;
  call_stack_ = NULL;
  src_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaintQueryHypercall::~TaintQueryHypercall() {
  // @@protoc_insertion_point(destructor:panda.TaintQueryHypercall)
  SharedDtor();
}

void TaintQueryHypercall::SharedDtor() {
  if (this != default_instance_) {
    delete call_stack_;
    delete src_info_;
  }
}

void TaintQueryHypercall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaintQueryHypercall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaintQueryHypercall_descriptor_;
}

const TaintQueryHypercall& TaintQueryHypercall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plog_2eproto();
  return *default_instance_;
}

TaintQueryHypercall* TaintQueryHypercall::default_instance_ = NULL;

TaintQueryHypercall* TaintQueryHypercall::New() const {
  return new TaintQueryHypercall;
}

void TaintQueryHypercall::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TaintQueryHypercall*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 59) {
    ZR_(len_, num_tainted_);
    buf_ = GOOGLE_ULONGLONG(0);
    if (has_call_stack()) {
      if (call_stack_ != NULL) call_stack_->::panda::CallStack::Clear();
    }
    if (has_src_info()) {
      if (src_info_ != NULL) src_info_->::panda::SrcInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  taint_query_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaintQueryHypercall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:panda.TaintQueryHypercall)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 buf = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buf_)));
          set_has_buf();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_len;
        break;
      }

      // required uint32 len = 2;
      case 2: {
        if (tag == 16) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_data;
        break;
      }

      // repeated uint32 data = 3;
      case 3: {
        if (tag == 24) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_data())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_data;
        if (input->ExpectTag(32)) goto parse_num_tainted;
        break;
      }

      // required uint32 num_tainted = 4;
      case 4: {
        if (tag == 32) {
         parse_num_tainted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_tainted_)));
          set_has_num_tainted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_call_stack;
        break;
      }

      // required .panda.CallStack call_stack = 5;
      case 5: {
        if (tag == 42) {
         parse_call_stack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_call_stack()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_src_info;
        break;
      }

      // required .panda.SrcInfo src_info = 6;
      case 6: {
        if (tag == 50) {
         parse_src_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_src_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_taint_query;
        break;
      }

      // repeated .panda.TaintQuery taint_query = 7;
      case 7: {
        if (tag == 58) {
         parse_taint_query:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_taint_query()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_taint_query;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:panda.TaintQueryHypercall)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:panda.TaintQueryHypercall)
  return false;
#undef DO_
}

void TaintQueryHypercall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:panda.TaintQueryHypercall)
  // required uint64 buf = 1;
  if (has_buf()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->buf(), output);
  }

  // required uint32 len = 2;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->len(), output);
  }

  // repeated uint32 data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->data(i), output);
  }

  // required uint32 num_tainted = 4;
  if (has_num_tainted()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->num_tainted(), output);
  }

  // required .panda.CallStack call_stack = 5;
  if (has_call_stack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->call_stack(), output);
  }

  // required .panda.SrcInfo src_info = 6;
  if (has_src_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->src_info(), output);
  }

  // repeated .panda.TaintQuery taint_query = 7;
  for (int i = 0; i < this->taint_query_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->taint_query(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:panda.TaintQueryHypercall)
}

::google::protobuf::uint8* TaintQueryHypercall::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:panda.TaintQueryHypercall)
  // required uint64 buf = 1;
  if (has_buf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->buf(), target);
  }

  // required uint32 len = 2;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->len(), target);
  }

  // repeated uint32 data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->data(i), target);
  }

  // required uint32 num_tainted = 4;
  if (has_num_tainted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->num_tainted(), target);
  }

  // required .panda.CallStack call_stack = 5;
  if (has_call_stack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->call_stack(), target);
  }

  // required .panda.SrcInfo src_info = 6;
  if (has_src_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->src_info(), target);
  }

  // repeated .panda.TaintQuery taint_query = 7;
  for (int i = 0; i < this->taint_query_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->taint_query(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:panda.TaintQueryHypercall)
  return target;
}

int TaintQueryHypercall::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 buf = 1;
    if (has_buf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->buf());
    }

    // required uint32 len = 2;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->len());
    }

    // required uint32 num_tainted = 4;
    if (has_num_tainted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_tainted());
    }

    // required .panda.CallStack call_stack = 5;
    if (has_call_stack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->call_stack());
    }

    // required .panda.SrcInfo src_info = 6;
    if (has_src_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->src_info());
    }

  }
  // repeated uint32 data = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->data(i));
    }
    total_size += 1 * this->data_size() + data_size;
  }

  // repeated .panda.TaintQuery taint_query = 7;
  total_size += 1 * this->taint_query_size();
  for (int i = 0; i < this->taint_query_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->taint_query(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaintQueryHypercall::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaintQueryHypercall* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaintQueryHypercall*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaintQueryHypercall::MergeFrom(const TaintQueryHypercall& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  taint_query_.MergeFrom(from.taint_query_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buf()) {
      set_buf(from.buf());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
    if (from.has_num_tainted()) {
      set_num_tainted(from.num_tainted());
    }
    if (from.has_call_stack()) {
      mutable_call_stack()->::panda::CallStack::MergeFrom(from.call_stack());
    }
    if (from.has_src_info()) {
      mutable_src_info()->::panda::SrcInfo::MergeFrom(from.src_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaintQueryHypercall::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaintQueryHypercall::CopyFrom(const TaintQueryHypercall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaintQueryHypercall::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003b) != 0x0000003b) return false;

  if (has_src_info()) {
    if (!this->src_info().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->taint_query())) return false;
  return true;
}

void TaintQueryHypercall::Swap(TaintQueryHypercall* other) {
  if (other != this) {
    std::swap(buf_, other->buf_);
    std::swap(len_, other->len_);
    data_.Swap(&other->data_);
    std::swap(num_tainted_, other->num_tainted_);
    std::swap(call_stack_, other->call_stack_);
    std::swap(src_info_, other->src_info_);
    taint_query_.Swap(&other->taint_query_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaintQueryHypercall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaintQueryHypercall_descriptor_;
  metadata.reflection = TaintQueryHypercall_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TaintedBranch::kCallStackFieldNumber;
const int TaintedBranch::kTaintQueryFieldNumber;
#endif  // !_MSC_VER

TaintedBranch::TaintedBranch()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:panda.TaintedBranch)
}

void TaintedBranch::InitAsDefaultInstance() {
  call_stack_ = const_cast< ::panda::CallStack*>(&::panda::CallStack::default_instance());
}

TaintedBranch::TaintedBranch(const TaintedBranch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:panda.TaintedBranch)
}

void TaintedBranch::SharedCtor() {
  _cached_size_ = 0;
  call_stack_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaintedBranch::~TaintedBranch() {
  // @@protoc_insertion_point(destructor:panda.TaintedBranch)
  SharedDtor();
}

void TaintedBranch::SharedDtor() {
  if (this != default_instance_) {
    delete call_stack_;
  }
}

void TaintedBranch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaintedBranch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaintedBranch_descriptor_;
}

const TaintedBranch& TaintedBranch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plog_2eproto();
  return *default_instance_;
}

TaintedBranch* TaintedBranch::default_instance_ = NULL;

TaintedBranch* TaintedBranch::New() const {
  return new TaintedBranch;
}

void TaintedBranch::Clear() {
  if (has_call_stack()) {
    if (call_stack_ != NULL) call_stack_->::panda::CallStack::Clear();
  }
  taint_query_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaintedBranch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:panda.TaintedBranch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .panda.CallStack call_stack = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_call_stack()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_taint_query;
        break;
      }

      // repeated .panda.TaintQuery taint_query = 2;
      case 2: {
        if (tag == 18) {
         parse_taint_query:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_taint_query()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_taint_query;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:panda.TaintedBranch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:panda.TaintedBranch)
  return false;
#undef DO_
}

void TaintedBranch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:panda.TaintedBranch)
  // required .panda.CallStack call_stack = 1;
  if (has_call_stack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->call_stack(), output);
  }

  // repeated .panda.TaintQuery taint_query = 2;
  for (int i = 0; i < this->taint_query_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->taint_query(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:panda.TaintedBranch)
}

::google::protobuf::uint8* TaintedBranch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:panda.TaintedBranch)
  // required .panda.CallStack call_stack = 1;
  if (has_call_stack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->call_stack(), target);
  }

  // repeated .panda.TaintQuery taint_query = 2;
  for (int i = 0; i < this->taint_query_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->taint_query(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:panda.TaintedBranch)
  return target;
}

int TaintedBranch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .panda.CallStack call_stack = 1;
    if (has_call_stack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->call_stack());
    }

  }
  // repeated .panda.TaintQuery taint_query = 2;
  total_size += 1 * this->taint_query_size();
  for (int i = 0; i < this->taint_query_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->taint_query(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaintedBranch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaintedBranch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaintedBranch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaintedBranch::MergeFrom(const TaintedBranch& from) {
  GOOGLE_CHECK_NE(&from, this);
  taint_query_.MergeFrom(from.taint_query_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_call_stack()) {
      mutable_call_stack()->::panda::CallStack::MergeFrom(from.call_stack());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaintedBranch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaintedBranch::CopyFrom(const TaintedBranch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaintedBranch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->taint_query())) return false;
  return true;
}

void TaintedBranch::Swap(TaintedBranch* other) {
  if (other != this) {
    std::swap(call_stack_, other->call_stack_);
    taint_query_.Swap(&other->taint_query_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaintedBranch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaintedBranch_descriptor_;
  metadata.reflection = TaintedBranch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TaintedBranchSummary::kAsidFieldNumber;
const int TaintedBranchSummary::kPcFieldNumber;
#endif  // !_MSC_VER

TaintedBranchSummary::TaintedBranchSummary()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:panda.TaintedBranchSummary)
}

void TaintedBranchSummary::InitAsDefaultInstance() {
}

TaintedBranchSummary::TaintedBranchSummary(const TaintedBranchSummary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:panda.TaintedBranchSummary)
}

void TaintedBranchSummary::SharedCtor() {
  _cached_size_ = 0;
  asid_ = GOOGLE_ULONGLONG(0);
  pc_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaintedBranchSummary::~TaintedBranchSummary() {
  // @@protoc_insertion_point(destructor:panda.TaintedBranchSummary)
  SharedDtor();
}

void TaintedBranchSummary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TaintedBranchSummary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaintedBranchSummary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaintedBranchSummary_descriptor_;
}

const TaintedBranchSummary& TaintedBranchSummary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plog_2eproto();
  return *default_instance_;
}

TaintedBranchSummary* TaintedBranchSummary::default_instance_ = NULL;

TaintedBranchSummary* TaintedBranchSummary::New() const {
  return new TaintedBranchSummary;
}

void TaintedBranchSummary::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TaintedBranchSummary*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(asid_, pc_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaintedBranchSummary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:panda.TaintedBranchSummary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 asid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &asid_)));
          set_has_asid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pc;
        break;
      }

      // required uint64 pc = 2;
      case 2: {
        if (tag == 16) {
         parse_pc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pc_)));
          set_has_pc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:panda.TaintedBranchSummary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:panda.TaintedBranchSummary)
  return false;
#undef DO_
}

void TaintedBranchSummary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:panda.TaintedBranchSummary)
  // required uint64 asid = 1;
  if (has_asid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->asid(), output);
  }

  // required uint64 pc = 2;
  if (has_pc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->pc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:panda.TaintedBranchSummary)
}

::google::protobuf::uint8* TaintedBranchSummary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:panda.TaintedBranchSummary)
  // required uint64 asid = 1;
  if (has_asid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->asid(), target);
  }

  // required uint64 pc = 2;
  if (has_pc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->pc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:panda.TaintedBranchSummary)
  return target;
}

int TaintedBranchSummary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 asid = 1;
    if (has_asid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->asid());
    }

    // required uint64 pc = 2;
    if (has_pc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaintedBranchSummary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaintedBranchSummary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaintedBranchSummary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaintedBranchSummary::MergeFrom(const TaintedBranchSummary& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_asid()) {
      set_asid(from.asid());
    }
    if (from.has_pc()) {
      set_pc(from.pc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaintedBranchSummary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaintedBranchSummary::CopyFrom(const TaintedBranchSummary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaintedBranchSummary::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TaintedBranchSummary::Swap(TaintedBranchSummary* other) {
  if (other != this) {
    std::swap(asid_, other->asid_);
    std::swap(pc_, other->pc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaintedBranchSummary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaintedBranchSummary_descriptor_;
  metadata.reflection = TaintedBranchSummary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TaintedInstr::kCallStackFieldNumber;
const int TaintedInstr::kTaintQueryFieldNumber;
#endif  // !_MSC_VER

TaintedInstr::TaintedInstr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:panda.TaintedInstr)
}

void TaintedInstr::InitAsDefaultInstance() {
  call_stack_ = const_cast< ::panda::CallStack*>(&::panda::CallStack::default_instance());
}

TaintedInstr::TaintedInstr(const TaintedInstr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:panda.TaintedInstr)
}

void TaintedInstr::SharedCtor() {
  _cached_size_ = 0;
  call_stack_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaintedInstr::~TaintedInstr() {
  // @@protoc_insertion_point(destructor:panda.TaintedInstr)
  SharedDtor();
}

void TaintedInstr::SharedDtor() {
  if (this != default_instance_) {
    delete call_stack_;
  }
}

void TaintedInstr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaintedInstr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaintedInstr_descriptor_;
}

const TaintedInstr& TaintedInstr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plog_2eproto();
  return *default_instance_;
}

TaintedInstr* TaintedInstr::default_instance_ = NULL;

TaintedInstr* TaintedInstr::New() const {
  return new TaintedInstr;
}

void TaintedInstr::Clear() {
  if (has_call_stack()) {
    if (call_stack_ != NULL) call_stack_->::panda::CallStack::Clear();
  }
  taint_query_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaintedInstr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:panda.TaintedInstr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .panda.CallStack call_stack = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_call_stack()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_taint_query;
        break;
      }

      // repeated .panda.TaintQuery taint_query = 2;
      case 2: {
        if (tag == 18) {
         parse_taint_query:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_taint_query()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_taint_query;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:panda.TaintedInstr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:panda.TaintedInstr)
  return false;
#undef DO_
}

void TaintedInstr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:panda.TaintedInstr)
  // required .panda.CallStack call_stack = 1;
  if (has_call_stack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->call_stack(), output);
  }

  // repeated .panda.TaintQuery taint_query = 2;
  for (int i = 0; i < this->taint_query_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->taint_query(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:panda.TaintedInstr)
}

::google::protobuf::uint8* TaintedInstr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:panda.TaintedInstr)
  // required .panda.CallStack call_stack = 1;
  if (has_call_stack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->call_stack(), target);
  }

  // repeated .panda.TaintQuery taint_query = 2;
  for (int i = 0; i < this->taint_query_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->taint_query(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:panda.TaintedInstr)
  return target;
}

int TaintedInstr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .panda.CallStack call_stack = 1;
    if (has_call_stack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->call_stack());
    }

  }
  // repeated .panda.TaintQuery taint_query = 2;
  total_size += 1 * this->taint_query_size();
  for (int i = 0; i < this->taint_query_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->taint_query(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaintedInstr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaintedInstr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaintedInstr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaintedInstr::MergeFrom(const TaintedInstr& from) {
  GOOGLE_CHECK_NE(&from, this);
  taint_query_.MergeFrom(from.taint_query_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_call_stack()) {
      mutable_call_stack()->::panda::CallStack::MergeFrom(from.call_stack());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaintedInstr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaintedInstr::CopyFrom(const TaintedInstr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaintedInstr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->taint_query())) return false;
  return true;
}

void TaintedInstr::Swap(TaintedInstr* other) {
  if (other != this) {
    std::swap(call_stack_, other->call_stack_);
    taint_query_.Swap(&other->taint_query_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaintedInstr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaintedInstr_descriptor_;
  metadata.reflection = TaintedInstr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TaintedInstrSummary::kAsidFieldNumber;
const int TaintedInstrSummary::kPcFieldNumber;
#endif  // !_MSC_VER

TaintedInstrSummary::TaintedInstrSummary()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:panda.TaintedInstrSummary)
}

void TaintedInstrSummary::InitAsDefaultInstance() {
}

TaintedInstrSummary::TaintedInstrSummary(const TaintedInstrSummary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:panda.TaintedInstrSummary)
}

void TaintedInstrSummary::SharedCtor() {
  _cached_size_ = 0;
  asid_ = GOOGLE_ULONGLONG(0);
  pc_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaintedInstrSummary::~TaintedInstrSummary() {
  // @@protoc_insertion_point(destructor:panda.TaintedInstrSummary)
  SharedDtor();
}

void TaintedInstrSummary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TaintedInstrSummary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaintedInstrSummary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaintedInstrSummary_descriptor_;
}

const TaintedInstrSummary& TaintedInstrSummary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plog_2eproto();
  return *default_instance_;
}

TaintedInstrSummary* TaintedInstrSummary::default_instance_ = NULL;

TaintedInstrSummary* TaintedInstrSummary::New() const {
  return new TaintedInstrSummary;
}

void TaintedInstrSummary::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TaintedInstrSummary*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(asid_, pc_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaintedInstrSummary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:panda.TaintedInstrSummary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 asid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &asid_)));
          set_has_asid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pc;
        break;
      }

      // required uint64 pc = 2;
      case 2: {
        if (tag == 16) {
         parse_pc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pc_)));
          set_has_pc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:panda.TaintedInstrSummary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:panda.TaintedInstrSummary)
  return false;
#undef DO_
}

void TaintedInstrSummary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:panda.TaintedInstrSummary)
  // required uint64 asid = 1;
  if (has_asid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->asid(), output);
  }

  // required uint64 pc = 2;
  if (has_pc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->pc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:panda.TaintedInstrSummary)
}

::google::protobuf::uint8* TaintedInstrSummary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:panda.TaintedInstrSummary)
  // required uint64 asid = 1;
  if (has_asid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->asid(), target);
  }

  // required uint64 pc = 2;
  if (has_pc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->pc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:panda.TaintedInstrSummary)
  return target;
}

int TaintedInstrSummary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 asid = 1;
    if (has_asid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->asid());
    }

    // required uint64 pc = 2;
    if (has_pc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaintedInstrSummary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaintedInstrSummary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaintedInstrSummary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaintedInstrSummary::MergeFrom(const TaintedInstrSummary& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_asid()) {
      set_asid(from.asid());
    }
    if (from.has_pc()) {
      set_pc(from.pc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaintedInstrSummary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaintedInstrSummary::CopyFrom(const TaintedInstrSummary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaintedInstrSummary::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TaintedInstrSummary::Swap(TaintedInstrSummary* other) {
  if (other != this) {
    std::swap(asid_, other->asid_);
    std::swap(pc_, other->pc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaintedInstrSummary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaintedInstrSummary_descriptor_;
  metadata.reflection = TaintedInstrSummary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogEntry::kPcFieldNumber;
const int LogEntry::kInstrFieldNumber;
const int LogEntry::kAsidInfoFieldNumber;
const int LogEntry::kAsidFieldNumber;
const int LogEntry::kCallStackFieldNumber;
const int LogEntry::kDwarfCallFieldNumber;
const int LogEntry::kDwarfRetFieldNumber;
const int LogEntry::kTaintLabelVirtualAddrFieldNumber;
const int LogEntry::kTaintLabelPhysicalAddrFieldNumber;
const int LogEntry::kTaintLabelNumberFieldNumber;
const int LogEntry::kTaintQueryPriFieldNumber;
const int LogEntry::kAttackPointPriFieldNumber;
const int LogEntry::kPriTraceSrcInfoFieldNumber;
const int LogEntry::kTaintQueryHypercallFieldNumber;
const int LogEntry::kAttackPointFieldNumber;
const int LogEntry::kTaintedBranchFieldNumber;
const int LogEntry::kTaintedBranchSummaryFieldNumber;
const int LogEntry::kTaintedInstrFieldNumber;
const int LogEntry::kTaintedInstrSummaryFieldNumber;
#endif  // !_MSC_VER

LogEntry::LogEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:panda.LogEntry)
}

void LogEntry::InitAsDefaultInstance() {
  asid_info_ = const_cast< ::panda::AsidInfo*>(&::panda::AsidInfo::default_instance());
  call_stack_ = const_cast< ::panda::CallStack*>(&::panda::CallStack::default_instance());
  dwarf_call_ = const_cast< ::panda::DwarfCall*>(&::panda::DwarfCall::default_instance());
  dwarf_ret_ = const_cast< ::panda::DwarfCall*>(&::panda::DwarfCall::default_instance());
  taint_query_pri_ = const_cast< ::panda::TaintQueryPri*>(&::panda::TaintQueryPri::default_instance());
  attack_point_pri_ = const_cast< ::panda::AttackPointPri*>(&::panda::AttackPointPri::default_instance());
  pri_trace_src_info_ = const_cast< ::panda::SrcInfoPri*>(&::panda::SrcInfoPri::default_instance());
  taint_query_hypercall_ = const_cast< ::panda::TaintQueryHypercall*>(&::panda::TaintQueryHypercall::default_instance());
  attack_point_ = const_cast< ::panda::AttackPoint*>(&::panda::AttackPoint::default_instance());
  tainted_branch_ = const_cast< ::panda::TaintedBranch*>(&::panda::TaintedBranch::default_instance());
  tainted_branch_summary_ = const_cast< ::panda::TaintedBranchSummary*>(&::panda::TaintedBranchSummary::default_instance());
  tainted_instr_ = const_cast< ::panda::TaintedInstr*>(&::panda::TaintedInstr::default_instance());
  tainted_instr_summary_ = const_cast< ::panda::TaintedInstrSummary*>(&::panda::TaintedInstrSummary::default_instance());
}

LogEntry::LogEntry(const LogEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:panda.LogEntry)
}

void LogEntry::SharedCtor() {
  _cached_size_ = 0;
  pc_ = GOOGLE_ULONGLONG(0);
  instr_ = GOOGLE_ULONGLONG(0);
  asid_info_ = NULL;
  asid_ = GOOGLE_ULONGLONG(0);
  call_stack_ = NULL;
  dwarf_call_ = NULL;
  dwarf_ret_ = NULL;
  taint_label_virtual_addr_ = GOOGLE_ULONGLONG(0);
  taint_label_physical_addr_ = GOOGLE_ULONGLONG(0);
  taint_label_number_ = 0u;
  taint_query_pri_ = NULL;
  attack_point_pri_ = NULL;
  pri_trace_src_info_ = NULL;
  taint_query_hypercall_ = NULL;
  attack_point_ = NULL;
  tainted_branch_ = NULL;
  tainted_branch_summary_ = NULL;
  tainted_instr_ = NULL;
  tainted_instr_summary_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogEntry::~LogEntry() {
  // @@protoc_insertion_point(destructor:panda.LogEntry)
  SharedDtor();
}

void LogEntry::SharedDtor() {
  if (this != default_instance_) {
    delete asid_info_;
    delete call_stack_;
    delete dwarf_call_;
    delete dwarf_ret_;
    delete taint_query_pri_;
    delete attack_point_pri_;
    delete pri_trace_src_info_;
    delete taint_query_hypercall_;
    delete attack_point_;
    delete tainted_branch_;
    delete tainted_branch_summary_;
    delete tainted_instr_;
    delete tainted_instr_summary_;
  }
}

void LogEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogEntry_descriptor_;
}

const LogEntry& LogEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plog_2eproto();
  return *default_instance_;
}

LogEntry* LogEntry::default_instance_ = NULL;

LogEntry* LogEntry::New() const {
  return new LogEntry;
}

void LogEntry::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LogEntry*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(pc_, instr_);
    if (has_asid_info()) {
      if (asid_info_ != NULL) asid_info_->::panda::AsidInfo::Clear();
    }
    asid_ = GOOGLE_ULONGLONG(0);
    if (has_call_stack()) {
      if (call_stack_ != NULL) call_stack_->::panda::CallStack::Clear();
    }
    if (has_dwarf_call()) {
      if (dwarf_call_ != NULL) dwarf_call_->::panda::DwarfCall::Clear();
    }
    if (has_dwarf_ret()) {
      if (dwarf_ret_ != NULL) dwarf_ret_->::panda::DwarfCall::Clear();
    }
    taint_label_virtual_addr_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & 65280) {
    taint_label_physical_addr_ = GOOGLE_ULONGLONG(0);
    taint_label_number_ = 0u;
    if (has_taint_query_pri()) {
      if (taint_query_pri_ != NULL) taint_query_pri_->::panda::TaintQueryPri::Clear();
    }
    if (has_attack_point_pri()) {
      if (attack_point_pri_ != NULL) attack_point_pri_->::panda::AttackPointPri::Clear();
    }
    if (has_pri_trace_src_info()) {
      if (pri_trace_src_info_ != NULL) pri_trace_src_info_->::panda::SrcInfoPri::Clear();
    }
    if (has_taint_query_hypercall()) {
      if (taint_query_hypercall_ != NULL) taint_query_hypercall_->::panda::TaintQueryHypercall::Clear();
    }
    if (has_attack_point()) {
      if (attack_point_ != NULL) attack_point_->::panda::AttackPoint::Clear();
    }
    if (has_tainted_branch()) {
      if (tainted_branch_ != NULL) tainted_branch_->::panda::TaintedBranch::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 458752) {
    if (has_tainted_branch_summary()) {
      if (tainted_branch_summary_ != NULL) tainted_branch_summary_->::panda::TaintedBranchSummary::Clear();
    }
    if (has_tainted_instr()) {
      if (tainted_instr_ != NULL) tainted_instr_->::panda::TaintedInstr::Clear();
    }
    if (has_tainted_instr_summary()) {
      if (tainted_instr_summary_ != NULL) tainted_instr_summary_->::panda::TaintedInstrSummary::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:panda.LogEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 pc = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pc_)));
          set_has_pc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_instr;
        break;
      }

      // required uint64 instr = 2;
      case 2: {
        if (tag == 16) {
         parse_instr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instr_)));
          set_has_instr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_asid;
        break;
      }

      // optional uint64 asid = 3;
      case 3: {
        if (tag == 24) {
         parse_asid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &asid_)));
          set_has_asid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_taint_label_virtual_addr;
        break;
      }

      // optional uint64 taint_label_virtual_addr = 6;
      case 6: {
        if (tag == 48) {
         parse_taint_label_virtual_addr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &taint_label_virtual_addr_)));
          set_has_taint_label_virtual_addr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_taint_label_physical_addr;
        break;
      }

      // optional uint64 taint_label_physical_addr = 7;
      case 7: {
        if (tag == 56) {
         parse_taint_label_physical_addr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &taint_label_physical_addr_)));
          set_has_taint_label_physical_addr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_taint_label_number;
        break;
      }

      // optional uint32 taint_label_number = 8;
      case 8: {
        if (tag == 64) {
         parse_taint_label_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taint_label_number_)));
          set_has_taint_label_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_call_stack;
        break;
      }

      // optional .panda.CallStack call_stack = 10;
      case 10: {
        if (tag == 82) {
         parse_call_stack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_call_stack()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(290)) goto parse_tainted_branch;
        break;
      }

      // optional .panda.TaintedBranch tainted_branch = 36;
      case 36: {
        if (tag == 290) {
         parse_tainted_branch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tainted_branch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(298)) goto parse_tainted_instr;
        break;
      }

      // optional .panda.TaintedInstr tainted_instr = 37;
      case 37: {
        if (tag == 298) {
         parse_tainted_instr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tainted_instr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(306)) goto parse_taint_query_hypercall;
        break;
      }

      // optional .panda.TaintQueryHypercall taint_query_hypercall = 38;
      case 38: {
        if (tag == 306) {
         parse_taint_query_hypercall:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_taint_query_hypercall()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(314)) goto parse_attack_point;
        break;
      }

      // optional .panda.AttackPoint attack_point = 39;
      case 39: {
        if (tag == 314) {
         parse_attack_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attack_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(322)) goto parse_asid_info;
        break;
      }

      // optional .panda.AsidInfo asid_info = 40;
      case 40: {
        if (tag == 322) {
         parse_asid_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_asid_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(450)) goto parse_tainted_instr_summary;
        break;
      }

      // optional .panda.TaintedInstrSummary tainted_instr_summary = 56;
      case 56: {
        if (tag == 450) {
         parse_tainted_instr_summary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tainted_instr_summary()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(530)) goto parse_dwarf_call;
        break;
      }

      // optional .panda.DwarfCall dwarf_call = 66;
      case 66: {
        if (tag == 530) {
         parse_dwarf_call:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dwarf_call()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(538)) goto parse_dwarf_ret;
        break;
      }

      // optional .panda.DwarfCall dwarf_ret = 67;
      case 67: {
        if (tag == 538) {
         parse_dwarf_ret:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dwarf_ret()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(546)) goto parse_taint_query_pri;
        break;
      }

      // optional .panda.TaintQueryPri taint_query_pri = 68;
      case 68: {
        if (tag == 546) {
         parse_taint_query_pri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_taint_query_pri()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(554)) goto parse_attack_point_pri;
        break;
      }

      // optional .panda.AttackPointPri attack_point_pri = 69;
      case 69: {
        if (tag == 554) {
         parse_attack_point_pri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attack_point_pri()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(562)) goto parse_pri_trace_src_info;
        break;
      }

      // optional .panda.SrcInfoPri pri_trace_src_info = 70;
      case 70: {
        if (tag == 562) {
         parse_pri_trace_src_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pri_trace_src_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(578)) goto parse_tainted_branch_summary;
        break;
      }

      // optional .panda.TaintedBranchSummary tainted_branch_summary = 72;
      case 72: {
        if (tag == 578) {
         parse_tainted_branch_summary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tainted_branch_summary()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:panda.LogEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:panda.LogEntry)
  return false;
#undef DO_
}

void LogEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:panda.LogEntry)
  // required uint64 pc = 1;
  if (has_pc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->pc(), output);
  }

  // required uint64 instr = 2;
  if (has_instr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->instr(), output);
  }

  // optional uint64 asid = 3;
  if (has_asid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->asid(), output);
  }

  // optional uint64 taint_label_virtual_addr = 6;
  if (has_taint_label_virtual_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->taint_label_virtual_addr(), output);
  }

  // optional uint64 taint_label_physical_addr = 7;
  if (has_taint_label_physical_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->taint_label_physical_addr(), output);
  }

  // optional uint32 taint_label_number = 8;
  if (has_taint_label_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->taint_label_number(), output);
  }

  // optional .panda.CallStack call_stack = 10;
  if (has_call_stack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->call_stack(), output);
  }

  // optional .panda.TaintedBranch tainted_branch = 36;
  if (has_tainted_branch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, this->tainted_branch(), output);
  }

  // optional .panda.TaintedInstr tainted_instr = 37;
  if (has_tainted_instr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, this->tainted_instr(), output);
  }

  // optional .panda.TaintQueryHypercall taint_query_hypercall = 38;
  if (has_taint_query_hypercall()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, this->taint_query_hypercall(), output);
  }

  // optional .panda.AttackPoint attack_point = 39;
  if (has_attack_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, this->attack_point(), output);
  }

  // optional .panda.AsidInfo asid_info = 40;
  if (has_asid_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->asid_info(), output);
  }

  // optional .panda.TaintedInstrSummary tainted_instr_summary = 56;
  if (has_tainted_instr_summary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      56, this->tainted_instr_summary(), output);
  }

  // optional .panda.DwarfCall dwarf_call = 66;
  if (has_dwarf_call()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      66, this->dwarf_call(), output);
  }

  // optional .panda.DwarfCall dwarf_ret = 67;
  if (has_dwarf_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      67, this->dwarf_ret(), output);
  }

  // optional .panda.TaintQueryPri taint_query_pri = 68;
  if (has_taint_query_pri()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      68, this->taint_query_pri(), output);
  }

  // optional .panda.AttackPointPri attack_point_pri = 69;
  if (has_attack_point_pri()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      69, this->attack_point_pri(), output);
  }

  // optional .panda.SrcInfoPri pri_trace_src_info = 70;
  if (has_pri_trace_src_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      70, this->pri_trace_src_info(), output);
  }

  // optional .panda.TaintedBranchSummary tainted_branch_summary = 72;
  if (has_tainted_branch_summary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      72, this->tainted_branch_summary(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:panda.LogEntry)
}

::google::protobuf::uint8* LogEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:panda.LogEntry)
  // required uint64 pc = 1;
  if (has_pc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->pc(), target);
  }

  // required uint64 instr = 2;
  if (has_instr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->instr(), target);
  }

  // optional uint64 asid = 3;
  if (has_asid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->asid(), target);
  }

  // optional uint64 taint_label_virtual_addr = 6;
  if (has_taint_label_virtual_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->taint_label_virtual_addr(), target);
  }

  // optional uint64 taint_label_physical_addr = 7;
  if (has_taint_label_physical_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->taint_label_physical_addr(), target);
  }

  // optional uint32 taint_label_number = 8;
  if (has_taint_label_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->taint_label_number(), target);
  }

  // optional .panda.CallStack call_stack = 10;
  if (has_call_stack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->call_stack(), target);
  }

  // optional .panda.TaintedBranch tainted_branch = 36;
  if (has_tainted_branch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        36, this->tainted_branch(), target);
  }

  // optional .panda.TaintedInstr tainted_instr = 37;
  if (has_tainted_instr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        37, this->tainted_instr(), target);
  }

  // optional .panda.TaintQueryHypercall taint_query_hypercall = 38;
  if (has_taint_query_hypercall()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        38, this->taint_query_hypercall(), target);
  }

  // optional .panda.AttackPoint attack_point = 39;
  if (has_attack_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        39, this->attack_point(), target);
  }

  // optional .panda.AsidInfo asid_info = 40;
  if (has_asid_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->asid_info(), target);
  }

  // optional .panda.TaintedInstrSummary tainted_instr_summary = 56;
  if (has_tainted_instr_summary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        56, this->tainted_instr_summary(), target);
  }

  // optional .panda.DwarfCall dwarf_call = 66;
  if (has_dwarf_call()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        66, this->dwarf_call(), target);
  }

  // optional .panda.DwarfCall dwarf_ret = 67;
  if (has_dwarf_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        67, this->dwarf_ret(), target);
  }

  // optional .panda.TaintQueryPri taint_query_pri = 68;
  if (has_taint_query_pri()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        68, this->taint_query_pri(), target);
  }

  // optional .panda.AttackPointPri attack_point_pri = 69;
  if (has_attack_point_pri()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        69, this->attack_point_pri(), target);
  }

  // optional .panda.SrcInfoPri pri_trace_src_info = 70;
  if (has_pri_trace_src_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        70, this->pri_trace_src_info(), target);
  }

  // optional .panda.TaintedBranchSummary tainted_branch_summary = 72;
  if (has_tainted_branch_summary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        72, this->tainted_branch_summary(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:panda.LogEntry)
  return target;
}

int LogEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 pc = 1;
    if (has_pc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pc());
    }

    // required uint64 instr = 2;
    if (has_instr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instr());
    }

    // optional .panda.AsidInfo asid_info = 40;
    if (has_asid_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->asid_info());
    }

    // optional uint64 asid = 3;
    if (has_asid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->asid());
    }

    // optional .panda.CallStack call_stack = 10;
    if (has_call_stack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->call_stack());
    }

    // optional .panda.DwarfCall dwarf_call = 66;
    if (has_dwarf_call()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dwarf_call());
    }

    // optional .panda.DwarfCall dwarf_ret = 67;
    if (has_dwarf_ret()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dwarf_ret());
    }

    // optional uint64 taint_label_virtual_addr = 6;
    if (has_taint_label_virtual_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->taint_label_virtual_addr());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 taint_label_physical_addr = 7;
    if (has_taint_label_physical_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->taint_label_physical_addr());
    }

    // optional uint32 taint_label_number = 8;
    if (has_taint_label_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taint_label_number());
    }

    // optional .panda.TaintQueryPri taint_query_pri = 68;
    if (has_taint_query_pri()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->taint_query_pri());
    }

    // optional .panda.AttackPointPri attack_point_pri = 69;
    if (has_attack_point_pri()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attack_point_pri());
    }

    // optional .panda.SrcInfoPri pri_trace_src_info = 70;
    if (has_pri_trace_src_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pri_trace_src_info());
    }

    // optional .panda.TaintQueryHypercall taint_query_hypercall = 38;
    if (has_taint_query_hypercall()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->taint_query_hypercall());
    }

    // optional .panda.AttackPoint attack_point = 39;
    if (has_attack_point()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attack_point());
    }

    // optional .panda.TaintedBranch tainted_branch = 36;
    if (has_tainted_branch()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tainted_branch());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .panda.TaintedBranchSummary tainted_branch_summary = 72;
    if (has_tainted_branch_summary()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tainted_branch_summary());
    }

    // optional .panda.TaintedInstr tainted_instr = 37;
    if (has_tainted_instr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tainted_instr());
    }

    // optional .panda.TaintedInstrSummary tainted_instr_summary = 56;
    if (has_tainted_instr_summary()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tainted_instr_summary());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogEntry::MergeFrom(const LogEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pc()) {
      set_pc(from.pc());
    }
    if (from.has_instr()) {
      set_instr(from.instr());
    }
    if (from.has_asid_info()) {
      mutable_asid_info()->::panda::AsidInfo::MergeFrom(from.asid_info());
    }
    if (from.has_asid()) {
      set_asid(from.asid());
    }
    if (from.has_call_stack()) {
      mutable_call_stack()->::panda::CallStack::MergeFrom(from.call_stack());
    }
    if (from.has_dwarf_call()) {
      mutable_dwarf_call()->::panda::DwarfCall::MergeFrom(from.dwarf_call());
    }
    if (from.has_dwarf_ret()) {
      mutable_dwarf_ret()->::panda::DwarfCall::MergeFrom(from.dwarf_ret());
    }
    if (from.has_taint_label_virtual_addr()) {
      set_taint_label_virtual_addr(from.taint_label_virtual_addr());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_taint_label_physical_addr()) {
      set_taint_label_physical_addr(from.taint_label_physical_addr());
    }
    if (from.has_taint_label_number()) {
      set_taint_label_number(from.taint_label_number());
    }
    if (from.has_taint_query_pri()) {
      mutable_taint_query_pri()->::panda::TaintQueryPri::MergeFrom(from.taint_query_pri());
    }
    if (from.has_attack_point_pri()) {
      mutable_attack_point_pri()->::panda::AttackPointPri::MergeFrom(from.attack_point_pri());
    }
    if (from.has_pri_trace_src_info()) {
      mutable_pri_trace_src_info()->::panda::SrcInfoPri::MergeFrom(from.pri_trace_src_info());
    }
    if (from.has_taint_query_hypercall()) {
      mutable_taint_query_hypercall()->::panda::TaintQueryHypercall::MergeFrom(from.taint_query_hypercall());
    }
    if (from.has_attack_point()) {
      mutable_attack_point()->::panda::AttackPoint::MergeFrom(from.attack_point());
    }
    if (from.has_tainted_branch()) {
      mutable_tainted_branch()->::panda::TaintedBranch::MergeFrom(from.tainted_branch());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_tainted_branch_summary()) {
      mutable_tainted_branch_summary()->::panda::TaintedBranchSummary::MergeFrom(from.tainted_branch_summary());
    }
    if (from.has_tainted_instr()) {
      mutable_tainted_instr()->::panda::TaintedInstr::MergeFrom(from.tainted_instr());
    }
    if (from.has_tainted_instr_summary()) {
      mutable_tainted_instr_summary()->::panda::TaintedInstrSummary::MergeFrom(from.tainted_instr_summary());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogEntry::CopyFrom(const LogEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_asid_info()) {
    if (!this->asid_info().IsInitialized()) return false;
  }
  if (has_dwarf_call()) {
    if (!this->dwarf_call().IsInitialized()) return false;
  }
  if (has_dwarf_ret()) {
    if (!this->dwarf_ret().IsInitialized()) return false;
  }
  if (has_taint_query_pri()) {
    if (!this->taint_query_pri().IsInitialized()) return false;
  }
  if (has_attack_point_pri()) {
    if (!this->attack_point_pri().IsInitialized()) return false;
  }
  if (has_pri_trace_src_info()) {
    if (!this->pri_trace_src_info().IsInitialized()) return false;
  }
  if (has_taint_query_hypercall()) {
    if (!this->taint_query_hypercall().IsInitialized()) return false;
  }
  if (has_attack_point()) {
    if (!this->attack_point().IsInitialized()) return false;
  }
  if (has_tainted_branch()) {
    if (!this->tainted_branch().IsInitialized()) return false;
  }
  if (has_tainted_branch_summary()) {
    if (!this->tainted_branch_summary().IsInitialized()) return false;
  }
  if (has_tainted_instr()) {
    if (!this->tainted_instr().IsInitialized()) return false;
  }
  if (has_tainted_instr_summary()) {
    if (!this->tainted_instr_summary().IsInitialized()) return false;
  }
  return true;
}

void LogEntry::Swap(LogEntry* other) {
  if (other != this) {
    std::swap(pc_, other->pc_);
    std::swap(instr_, other->instr_);
    std::swap(asid_info_, other->asid_info_);
    std::swap(asid_, other->asid_);
    std::swap(call_stack_, other->call_stack_);
    std::swap(dwarf_call_, other->dwarf_call_);
    std::swap(dwarf_ret_, other->dwarf_ret_);
    std::swap(taint_label_virtual_addr_, other->taint_label_virtual_addr_);
    std::swap(taint_label_physical_addr_, other->taint_label_physical_addr_);
    std::swap(taint_label_number_, other->taint_label_number_);
    std::swap(taint_query_pri_, other->taint_query_pri_);
    std::swap(attack_point_pri_, other->attack_point_pri_);
    std::swap(pri_trace_src_info_, other->pri_trace_src_info_);
    std::swap(taint_query_hypercall_, other->taint_query_hypercall_);
    std::swap(attack_point_, other->attack_point_);
    std::swap(tainted_branch_, other->tainted_branch_);
    std::swap(tainted_branch_summary_, other->tainted_branch_summary_);
    std::swap(tainted_instr_, other->tainted_instr_);
    std::swap(tainted_instr_summary_, other->tainted_instr_summary_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogEntry_descriptor_;
  metadata.reflection = LogEntry_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace panda

// @@protoc_insertion_point(global_scope)
