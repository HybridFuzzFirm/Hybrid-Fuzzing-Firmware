// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: plog.proto

#ifndef PROTOBUF_plog_2eproto__INCLUDED
#define PROTOBUF_plog_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace panda {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_plog_2eproto();
void protobuf_AssignDesc_plog_2eproto();
void protobuf_ShutdownFile_plog_2eproto();

class AsidInfo;
class CallStack;
class DwarfCall;
class SrcInfoPri;
class AttackPointPri;
class TaintQueryPri;
class TaintQueryUniqueLabelSet;
class SrcInfo;
class TaintQuery;
class AttackPoint;
class TaintQueryHypercall;
class TaintedBranch;
class TaintedBranchSummary;
class TaintedInstr;
class TaintedInstrSummary;
class LogEntry;

// ===================================================================

class AsidInfo : public ::google::protobuf::Message {
 public:
  AsidInfo();
  virtual ~AsidInfo();

  AsidInfo(const AsidInfo& from);

  inline AsidInfo& operator=(const AsidInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AsidInfo& default_instance();

  void Swap(AsidInfo* other);

  // implements Message ----------------------------------------------

  AsidInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AsidInfo& from);
  void MergeFrom(const AsidInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 asid = 1;
  inline bool has_asid() const;
  inline void clear_asid();
  static const int kAsidFieldNumber = 1;
  inline ::google::protobuf::uint64 asid() const;
  inline void set_asid(::google::protobuf::uint64 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint32 pid = 3;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 3;
  inline ::google::protobuf::uint32 pid() const;
  inline void set_pid(::google::protobuf::uint32 value);

  // required uint64 start_instr = 4;
  inline bool has_start_instr() const;
  inline void clear_start_instr();
  static const int kStartInstrFieldNumber = 4;
  inline ::google::protobuf::uint64 start_instr() const;
  inline void set_start_instr(::google::protobuf::uint64 value);

  // required uint64 end_instr = 5;
  inline bool has_end_instr() const;
  inline void clear_end_instr();
  static const int kEndInstrFieldNumber = 5;
  inline ::google::protobuf::uint64 end_instr() const;
  inline void set_end_instr(::google::protobuf::uint64 value);

  // required uint64 count = 6;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 6;
  inline ::google::protobuf::uint64 count() const;
  inline void set_count(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:panda.AsidInfo)
 private:
  inline void set_has_asid();
  inline void clear_has_asid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_start_instr();
  inline void clear_has_start_instr();
  inline void set_has_end_instr();
  inline void clear_has_end_instr();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 asid_;
  ::std::string* name_;
  ::google::protobuf::uint64 start_instr_;
  ::google::protobuf::uint64 end_instr_;
  ::google::protobuf::uint64 count_;
  ::google::protobuf::uint32 pid_;
  friend void  protobuf_AddDesc_plog_2eproto();
  friend void protobuf_AssignDesc_plog_2eproto();
  friend void protobuf_ShutdownFile_plog_2eproto();

  void InitAsDefaultInstance();
  static AsidInfo* default_instance_;
};
// -------------------------------------------------------------------

class CallStack : public ::google::protobuf::Message {
 public:
  CallStack();
  virtual ~CallStack();

  CallStack(const CallStack& from);

  inline CallStack& operator=(const CallStack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CallStack& default_instance();

  void Swap(CallStack* other);

  // implements Message ----------------------------------------------

  CallStack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CallStack& from);
  void MergeFrom(const CallStack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 addr = 1;
  inline int addr_size() const;
  inline void clear_addr();
  static const int kAddrFieldNumber = 1;
  inline ::google::protobuf::uint64 addr(int index) const;
  inline void set_addr(int index, ::google::protobuf::uint64 value);
  inline void add_addr(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      addr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_addr();

  // @@protoc_insertion_point(class_scope:panda.CallStack)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > addr_;
  friend void  protobuf_AddDesc_plog_2eproto();
  friend void protobuf_AssignDesc_plog_2eproto();
  friend void protobuf_ShutdownFile_plog_2eproto();

  void InitAsDefaultInstance();
  static CallStack* default_instance_;
};
// -------------------------------------------------------------------

class DwarfCall : public ::google::protobuf::Message {
 public:
  DwarfCall();
  virtual ~DwarfCall();

  DwarfCall(const DwarfCall& from);

  inline DwarfCall& operator=(const DwarfCall& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DwarfCall& default_instance();

  void Swap(DwarfCall* other);

  // implements Message ----------------------------------------------

  DwarfCall* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DwarfCall& from);
  void MergeFrom(const DwarfCall& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string file_callee = 1;
  inline bool has_file_callee() const;
  inline void clear_file_callee();
  static const int kFileCalleeFieldNumber = 1;
  inline const ::std::string& file_callee() const;
  inline void set_file_callee(const ::std::string& value);
  inline void set_file_callee(const char* value);
  inline void set_file_callee(const char* value, size_t size);
  inline ::std::string* mutable_file_callee();
  inline ::std::string* release_file_callee();
  inline void set_allocated_file_callee(::std::string* file_callee);

  // required string function_name_callee = 2;
  inline bool has_function_name_callee() const;
  inline void clear_function_name_callee();
  static const int kFunctionNameCalleeFieldNumber = 2;
  inline const ::std::string& function_name_callee() const;
  inline void set_function_name_callee(const ::std::string& value);
  inline void set_function_name_callee(const char* value);
  inline void set_function_name_callee(const char* value, size_t size);
  inline ::std::string* mutable_function_name_callee();
  inline ::std::string* release_function_name_callee();
  inline void set_allocated_function_name_callee(::std::string* function_name_callee);

  // required uint64 line_number_callee = 3;
  inline bool has_line_number_callee() const;
  inline void clear_line_number_callee();
  static const int kLineNumberCalleeFieldNumber = 3;
  inline ::google::protobuf::uint64 line_number_callee() const;
  inline void set_line_number_callee(::google::protobuf::uint64 value);

  // required string file_caller = 4;
  inline bool has_file_caller() const;
  inline void clear_file_caller();
  static const int kFileCallerFieldNumber = 4;
  inline const ::std::string& file_caller() const;
  inline void set_file_caller(const ::std::string& value);
  inline void set_file_caller(const char* value);
  inline void set_file_caller(const char* value, size_t size);
  inline ::std::string* mutable_file_caller();
  inline ::std::string* release_file_caller();
  inline void set_allocated_file_caller(::std::string* file_caller);

  // required uint64 line_number_caller = 5;
  inline bool has_line_number_caller() const;
  inline void clear_line_number_caller();
  static const int kLineNumberCallerFieldNumber = 5;
  inline ::google::protobuf::uint64 line_number_caller() const;
  inline void set_line_number_caller(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:panda.DwarfCall)
 private:
  inline void set_has_file_callee();
  inline void clear_has_file_callee();
  inline void set_has_function_name_callee();
  inline void clear_has_function_name_callee();
  inline void set_has_line_number_callee();
  inline void clear_has_line_number_callee();
  inline void set_has_file_caller();
  inline void clear_has_file_caller();
  inline void set_has_line_number_caller();
  inline void clear_has_line_number_caller();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* file_callee_;
  ::std::string* function_name_callee_;
  ::google::protobuf::uint64 line_number_callee_;
  ::std::string* file_caller_;
  ::google::protobuf::uint64 line_number_caller_;
  friend void  protobuf_AddDesc_plog_2eproto();
  friend void protobuf_AssignDesc_plog_2eproto();
  friend void protobuf_ShutdownFile_plog_2eproto();

  void InitAsDefaultInstance();
  static DwarfCall* default_instance_;
};
// -------------------------------------------------------------------

class SrcInfoPri : public ::google::protobuf::Message {
 public:
  SrcInfoPri();
  virtual ~SrcInfoPri();

  SrcInfoPri(const SrcInfoPri& from);

  inline SrcInfoPri& operator=(const SrcInfoPri& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SrcInfoPri& default_instance();

  void Swap(SrcInfoPri* other);

  // implements Message ----------------------------------------------

  SrcInfoPri* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SrcInfoPri& from);
  void MergeFrom(const SrcInfoPri& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string filename = 1;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFilenameFieldNumber = 1;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // required uint32 linenum = 2;
  inline bool has_linenum() const;
  inline void clear_linenum();
  static const int kLinenumFieldNumber = 2;
  inline ::google::protobuf::uint32 linenum() const;
  inline void set_linenum(::google::protobuf::uint32 value);

  // required string astnodename = 3;
  inline bool has_astnodename() const;
  inline void clear_astnodename();
  static const int kAstnodenameFieldNumber = 3;
  inline const ::std::string& astnodename() const;
  inline void set_astnodename(const ::std::string& value);
  inline void set_astnodename(const char* value);
  inline void set_astnodename(const char* value, size_t size);
  inline ::std::string* mutable_astnodename();
  inline ::std::string* release_astnodename();
  inline void set_allocated_astnodename(::std::string* astnodename);

  // optional uint32 insertionpoint = 4;
  inline bool has_insertionpoint() const;
  inline void clear_insertionpoint();
  static const int kInsertionpointFieldNumber = 4;
  inline ::google::protobuf::uint32 insertionpoint() const;
  inline void set_insertionpoint(::google::protobuf::uint32 value);

  // optional uint32 ast_loc_id = 5;
  inline bool has_ast_loc_id() const;
  inline void clear_ast_loc_id();
  static const int kAstLocIdFieldNumber = 5;
  inline ::google::protobuf::uint32 ast_loc_id() const;
  inline void set_ast_loc_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:panda.SrcInfoPri)
 private:
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_linenum();
  inline void clear_has_linenum();
  inline void set_has_astnodename();
  inline void clear_has_astnodename();
  inline void set_has_insertionpoint();
  inline void clear_has_insertionpoint();
  inline void set_has_ast_loc_id();
  inline void clear_has_ast_loc_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* filename_;
  ::std::string* astnodename_;
  ::google::protobuf::uint32 linenum_;
  ::google::protobuf::uint32 insertionpoint_;
  ::google::protobuf::uint32 ast_loc_id_;
  friend void  protobuf_AddDesc_plog_2eproto();
  friend void protobuf_AssignDesc_plog_2eproto();
  friend void protobuf_ShutdownFile_plog_2eproto();

  void InitAsDefaultInstance();
  static SrcInfoPri* default_instance_;
};
// -------------------------------------------------------------------

class AttackPointPri : public ::google::protobuf::Message {
 public:
  AttackPointPri();
  virtual ~AttackPointPri();

  AttackPointPri(const AttackPointPri& from);

  inline AttackPointPri& operator=(const AttackPointPri& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AttackPointPri& default_instance();

  void Swap(AttackPointPri* other);

  // implements Message ----------------------------------------------

  AttackPointPri* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AttackPointPri& from);
  void MergeFrom(const AttackPointPri& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline ::google::protobuf::uint32 info() const;
  inline void set_info(::google::protobuf::uint32 value);

  // required .panda.CallStack call_stack = 2;
  inline bool has_call_stack() const;
  inline void clear_call_stack();
  static const int kCallStackFieldNumber = 2;
  inline const ::panda::CallStack& call_stack() const;
  inline ::panda::CallStack* mutable_call_stack();
  inline ::panda::CallStack* release_call_stack();
  inline void set_allocated_call_stack(::panda::CallStack* call_stack);

  // required .panda.SrcInfoPri src_info = 3;
  inline bool has_src_info() const;
  inline void clear_src_info();
  static const int kSrcInfoFieldNumber = 3;
  inline const ::panda::SrcInfoPri& src_info() const;
  inline ::panda::SrcInfoPri* mutable_src_info();
  inline ::panda::SrcInfoPri* release_src_info();
  inline void set_allocated_src_info(::panda::SrcInfoPri* src_info);

  // @@protoc_insertion_point(class_scope:panda.AttackPointPri)
 private:
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_call_stack();
  inline void clear_has_call_stack();
  inline void set_has_src_info();
  inline void clear_has_src_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::panda::CallStack* call_stack_;
  ::panda::SrcInfoPri* src_info_;
  ::google::protobuf::uint32 info_;
  friend void  protobuf_AddDesc_plog_2eproto();
  friend void protobuf_AssignDesc_plog_2eproto();
  friend void protobuf_ShutdownFile_plog_2eproto();

  void InitAsDefaultInstance();
  static AttackPointPri* default_instance_;
};
// -------------------------------------------------------------------

class TaintQueryPri : public ::google::protobuf::Message {
 public:
  TaintQueryPri();
  virtual ~TaintQueryPri();

  TaintQueryPri(const TaintQueryPri& from);

  inline TaintQueryPri& operator=(const TaintQueryPri& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TaintQueryPri& default_instance();

  void Swap(TaintQueryPri* other);

  // implements Message ----------------------------------------------

  TaintQueryPri* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaintQueryPri& from);
  void MergeFrom(const TaintQueryPri& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 buf = 1;
  inline bool has_buf() const;
  inline void clear_buf();
  static const int kBufFieldNumber = 1;
  inline ::google::protobuf::uint64 buf() const;
  inline void set_buf(::google::protobuf::uint64 value);

  // required uint32 len = 2;
  inline bool has_len() const;
  inline void clear_len();
  static const int kLenFieldNumber = 2;
  inline ::google::protobuf::uint32 len() const;
  inline void set_len(::google::protobuf::uint32 value);

  // repeated uint32 data = 3;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline ::google::protobuf::uint32 data(int index) const;
  inline void set_data(int index, ::google::protobuf::uint32 value);
  inline void add_data(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      data() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_data();

  // required uint32 num_tainted = 4;
  inline bool has_num_tainted() const;
  inline void clear_num_tainted();
  static const int kNumTaintedFieldNumber = 4;
  inline ::google::protobuf::uint32 num_tainted() const;
  inline void set_num_tainted(::google::protobuf::uint32 value);

  // required .panda.CallStack call_stack = 5;
  inline bool has_call_stack() const;
  inline void clear_call_stack();
  static const int kCallStackFieldNumber = 5;
  inline const ::panda::CallStack& call_stack() const;
  inline ::panda::CallStack* mutable_call_stack();
  inline ::panda::CallStack* release_call_stack();
  inline void set_allocated_call_stack(::panda::CallStack* call_stack);

  // required .panda.SrcInfoPri src_info = 6;
  inline bool has_src_info() const;
  inline void clear_src_info();
  static const int kSrcInfoFieldNumber = 6;
  inline const ::panda::SrcInfoPri& src_info() const;
  inline ::panda::SrcInfoPri* mutable_src_info();
  inline ::panda::SrcInfoPri* release_src_info();
  inline void set_allocated_src_info(::panda::SrcInfoPri* src_info);

  // repeated .panda.TaintQuery taint_query = 7;
  inline int taint_query_size() const;
  inline void clear_taint_query();
  static const int kTaintQueryFieldNumber = 7;
  inline const ::panda::TaintQuery& taint_query(int index) const;
  inline ::panda::TaintQuery* mutable_taint_query(int index);
  inline ::panda::TaintQuery* add_taint_query();
  inline const ::google::protobuf::RepeatedPtrField< ::panda::TaintQuery >&
      taint_query() const;
  inline ::google::protobuf::RepeatedPtrField< ::panda::TaintQuery >*
      mutable_taint_query();

  // @@protoc_insertion_point(class_scope:panda.TaintQueryPri)
 private:
  inline void set_has_buf();
  inline void clear_has_buf();
  inline void set_has_len();
  inline void clear_has_len();
  inline void set_has_num_tainted();
  inline void clear_has_num_tainted();
  inline void set_has_call_stack();
  inline void clear_has_call_stack();
  inline void set_has_src_info();
  inline void clear_has_src_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 buf_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > data_;
  ::google::protobuf::uint32 len_;
  ::google::protobuf::uint32 num_tainted_;
  ::panda::CallStack* call_stack_;
  ::panda::SrcInfoPri* src_info_;
  ::google::protobuf::RepeatedPtrField< ::panda::TaintQuery > taint_query_;
  friend void  protobuf_AddDesc_plog_2eproto();
  friend void protobuf_AssignDesc_plog_2eproto();
  friend void protobuf_ShutdownFile_plog_2eproto();

  void InitAsDefaultInstance();
  static TaintQueryPri* default_instance_;
};
// -------------------------------------------------------------------

class TaintQueryUniqueLabelSet : public ::google::protobuf::Message {
 public:
  TaintQueryUniqueLabelSet();
  virtual ~TaintQueryUniqueLabelSet();

  TaintQueryUniqueLabelSet(const TaintQueryUniqueLabelSet& from);

  inline TaintQueryUniqueLabelSet& operator=(const TaintQueryUniqueLabelSet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TaintQueryUniqueLabelSet& default_instance();

  void Swap(TaintQueryUniqueLabelSet* other);

  // implements Message ----------------------------------------------

  TaintQueryUniqueLabelSet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaintQueryUniqueLabelSet& from);
  void MergeFrom(const TaintQueryUniqueLabelSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 ptr = 1;
  inline bool has_ptr() const;
  inline void clear_ptr();
  static const int kPtrFieldNumber = 1;
  inline ::google::protobuf::uint64 ptr() const;
  inline void set_ptr(::google::protobuf::uint64 value);

  // repeated uint32 label = 2;
  inline int label_size() const;
  inline void clear_label();
  static const int kLabelFieldNumber = 2;
  inline ::google::protobuf::uint32 label(int index) const;
  inline void set_label(int index, ::google::protobuf::uint32 value);
  inline void add_label(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      label() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_label();

  // @@protoc_insertion_point(class_scope:panda.TaintQueryUniqueLabelSet)
 private:
  inline void set_has_ptr();
  inline void clear_has_ptr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 ptr_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > label_;
  friend void  protobuf_AddDesc_plog_2eproto();
  friend void protobuf_AssignDesc_plog_2eproto();
  friend void protobuf_ShutdownFile_plog_2eproto();

  void InitAsDefaultInstance();
  static TaintQueryUniqueLabelSet* default_instance_;
};
// -------------------------------------------------------------------

class SrcInfo : public ::google::protobuf::Message {
 public:
  SrcInfo();
  virtual ~SrcInfo();

  SrcInfo(const SrcInfo& from);

  inline SrcInfo& operator=(const SrcInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SrcInfo& default_instance();

  void Swap(SrcInfo* other);

  // implements Message ----------------------------------------------

  SrcInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SrcInfo& from);
  void MergeFrom(const SrcInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 filename = 1;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFilenameFieldNumber = 1;
  inline ::google::protobuf::uint32 filename() const;
  inline void set_filename(::google::protobuf::uint32 value);

  // required uint32 linenum = 2;
  inline bool has_linenum() const;
  inline void clear_linenum();
  static const int kLinenumFieldNumber = 2;
  inline ::google::protobuf::uint32 linenum() const;
  inline void set_linenum(::google::protobuf::uint32 value);

  // required uint32 astnodename = 3;
  inline bool has_astnodename() const;
  inline void clear_astnodename();
  static const int kAstnodenameFieldNumber = 3;
  inline ::google::protobuf::uint32 astnodename() const;
  inline void set_astnodename(::google::protobuf::uint32 value);

  // optional uint32 insertionpoint = 4;
  inline bool has_insertionpoint() const;
  inline void clear_insertionpoint();
  static const int kInsertionpointFieldNumber = 4;
  inline ::google::protobuf::uint32 insertionpoint() const;
  inline void set_insertionpoint(::google::protobuf::uint32 value);

  // optional uint32 ast_loc_id = 5;
  inline bool has_ast_loc_id() const;
  inline void clear_ast_loc_id();
  static const int kAstLocIdFieldNumber = 5;
  inline ::google::protobuf::uint32 ast_loc_id() const;
  inline void set_ast_loc_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:panda.SrcInfo)
 private:
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_linenum();
  inline void clear_has_linenum();
  inline void set_has_astnodename();
  inline void clear_has_astnodename();
  inline void set_has_insertionpoint();
  inline void clear_has_insertionpoint();
  inline void set_has_ast_loc_id();
  inline void clear_has_ast_loc_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 filename_;
  ::google::protobuf::uint32 linenum_;
  ::google::protobuf::uint32 astnodename_;
  ::google::protobuf::uint32 insertionpoint_;
  ::google::protobuf::uint32 ast_loc_id_;
  friend void  protobuf_AddDesc_plog_2eproto();
  friend void protobuf_AssignDesc_plog_2eproto();
  friend void protobuf_ShutdownFile_plog_2eproto();

  void InitAsDefaultInstance();
  static SrcInfo* default_instance_;
};
// -------------------------------------------------------------------

class TaintQuery : public ::google::protobuf::Message {
 public:
  TaintQuery();
  virtual ~TaintQuery();

  TaintQuery(const TaintQuery& from);

  inline TaintQuery& operator=(const TaintQuery& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TaintQuery& default_instance();

  void Swap(TaintQuery* other);

  // implements Message ----------------------------------------------

  TaintQuery* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaintQuery& from);
  void MergeFrom(const TaintQuery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 ptr = 1;
  inline bool has_ptr() const;
  inline void clear_ptr();
  static const int kPtrFieldNumber = 1;
  inline ::google::protobuf::uint64 ptr() const;
  inline void set_ptr(::google::protobuf::uint64 value);

  // required uint32 tcn = 2;
  inline bool has_tcn() const;
  inline void clear_tcn();
  static const int kTcnFieldNumber = 2;
  inline ::google::protobuf::uint32 tcn() const;
  inline void set_tcn(::google::protobuf::uint32 value);

  // required uint32 offset = 3;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 3;
  inline ::google::protobuf::uint32 offset() const;
  inline void set_offset(::google::protobuf::uint32 value);

  // optional .panda.TaintQueryUniqueLabelSet unique_label_set = 4;
  inline bool has_unique_label_set() const;
  inline void clear_unique_label_set();
  static const int kUniqueLabelSetFieldNumber = 4;
  inline const ::panda::TaintQueryUniqueLabelSet& unique_label_set() const;
  inline ::panda::TaintQueryUniqueLabelSet* mutable_unique_label_set();
  inline ::panda::TaintQueryUniqueLabelSet* release_unique_label_set();
  inline void set_allocated_unique_label_set(::panda::TaintQueryUniqueLabelSet* unique_label_set);

  // @@protoc_insertion_point(class_scope:panda.TaintQuery)
 private:
  inline void set_has_ptr();
  inline void clear_has_ptr();
  inline void set_has_tcn();
  inline void clear_has_tcn();
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_unique_label_set();
  inline void clear_has_unique_label_set();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 ptr_;
  ::google::protobuf::uint32 tcn_;
  ::google::protobuf::uint32 offset_;
  ::panda::TaintQueryUniqueLabelSet* unique_label_set_;
  friend void  protobuf_AddDesc_plog_2eproto();
  friend void protobuf_AssignDesc_plog_2eproto();
  friend void protobuf_ShutdownFile_plog_2eproto();

  void InitAsDefaultInstance();
  static TaintQuery* default_instance_;
};
// -------------------------------------------------------------------

class AttackPoint : public ::google::protobuf::Message {
 public:
  AttackPoint();
  virtual ~AttackPoint();

  AttackPoint(const AttackPoint& from);

  inline AttackPoint& operator=(const AttackPoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AttackPoint& default_instance();

  void Swap(AttackPoint* other);

  // implements Message ----------------------------------------------

  AttackPoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AttackPoint& from);
  void MergeFrom(const AttackPoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline ::google::protobuf::uint32 info() const;
  inline void set_info(::google::protobuf::uint32 value);

  // required .panda.CallStack call_stack = 2;
  inline bool has_call_stack() const;
  inline void clear_call_stack();
  static const int kCallStackFieldNumber = 2;
  inline const ::panda::CallStack& call_stack() const;
  inline ::panda::CallStack* mutable_call_stack();
  inline ::panda::CallStack* release_call_stack();
  inline void set_allocated_call_stack(::panda::CallStack* call_stack);

  // required .panda.SrcInfo src_info = 3;
  inline bool has_src_info() const;
  inline void clear_src_info();
  static const int kSrcInfoFieldNumber = 3;
  inline const ::panda::SrcInfo& src_info() const;
  inline ::panda::SrcInfo* mutable_src_info();
  inline ::panda::SrcInfo* release_src_info();
  inline void set_allocated_src_info(::panda::SrcInfo* src_info);

  // @@protoc_insertion_point(class_scope:panda.AttackPoint)
 private:
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_call_stack();
  inline void clear_has_call_stack();
  inline void set_has_src_info();
  inline void clear_has_src_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::panda::CallStack* call_stack_;
  ::panda::SrcInfo* src_info_;
  ::google::protobuf::uint32 info_;
  friend void  protobuf_AddDesc_plog_2eproto();
  friend void protobuf_AssignDesc_plog_2eproto();
  friend void protobuf_ShutdownFile_plog_2eproto();

  void InitAsDefaultInstance();
  static AttackPoint* default_instance_;
};
// -------------------------------------------------------------------

class TaintQueryHypercall : public ::google::protobuf::Message {
 public:
  TaintQueryHypercall();
  virtual ~TaintQueryHypercall();

  TaintQueryHypercall(const TaintQueryHypercall& from);

  inline TaintQueryHypercall& operator=(const TaintQueryHypercall& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TaintQueryHypercall& default_instance();

  void Swap(TaintQueryHypercall* other);

  // implements Message ----------------------------------------------

  TaintQueryHypercall* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaintQueryHypercall& from);
  void MergeFrom(const TaintQueryHypercall& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 buf = 1;
  inline bool has_buf() const;
  inline void clear_buf();
  static const int kBufFieldNumber = 1;
  inline ::google::protobuf::uint64 buf() const;
  inline void set_buf(::google::protobuf::uint64 value);

  // required uint32 len = 2;
  inline bool has_len() const;
  inline void clear_len();
  static const int kLenFieldNumber = 2;
  inline ::google::protobuf::uint32 len() const;
  inline void set_len(::google::protobuf::uint32 value);

  // repeated uint32 data = 3;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline ::google::protobuf::uint32 data(int index) const;
  inline void set_data(int index, ::google::protobuf::uint32 value);
  inline void add_data(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      data() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_data();

  // required uint32 num_tainted = 4;
  inline bool has_num_tainted() const;
  inline void clear_num_tainted();
  static const int kNumTaintedFieldNumber = 4;
  inline ::google::protobuf::uint32 num_tainted() const;
  inline void set_num_tainted(::google::protobuf::uint32 value);

  // required .panda.CallStack call_stack = 5;
  inline bool has_call_stack() const;
  inline void clear_call_stack();
  static const int kCallStackFieldNumber = 5;
  inline const ::panda::CallStack& call_stack() const;
  inline ::panda::CallStack* mutable_call_stack();
  inline ::panda::CallStack* release_call_stack();
  inline void set_allocated_call_stack(::panda::CallStack* call_stack);

  // required .panda.SrcInfo src_info = 6;
  inline bool has_src_info() const;
  inline void clear_src_info();
  static const int kSrcInfoFieldNumber = 6;
  inline const ::panda::SrcInfo& src_info() const;
  inline ::panda::SrcInfo* mutable_src_info();
  inline ::panda::SrcInfo* release_src_info();
  inline void set_allocated_src_info(::panda::SrcInfo* src_info);

  // repeated .panda.TaintQuery taint_query = 7;
  inline int taint_query_size() const;
  inline void clear_taint_query();
  static const int kTaintQueryFieldNumber = 7;
  inline const ::panda::TaintQuery& taint_query(int index) const;
  inline ::panda::TaintQuery* mutable_taint_query(int index);
  inline ::panda::TaintQuery* add_taint_query();
  inline const ::google::protobuf::RepeatedPtrField< ::panda::TaintQuery >&
      taint_query() const;
  inline ::google::protobuf::RepeatedPtrField< ::panda::TaintQuery >*
      mutable_taint_query();

  // @@protoc_insertion_point(class_scope:panda.TaintQueryHypercall)
 private:
  inline void set_has_buf();
  inline void clear_has_buf();
  inline void set_has_len();
  inline void clear_has_len();
  inline void set_has_num_tainted();
  inline void clear_has_num_tainted();
  inline void set_has_call_stack();
  inline void clear_has_call_stack();
  inline void set_has_src_info();
  inline void clear_has_src_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 buf_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > data_;
  ::google::protobuf::uint32 len_;
  ::google::protobuf::uint32 num_tainted_;
  ::panda::CallStack* call_stack_;
  ::panda::SrcInfo* src_info_;
  ::google::protobuf::RepeatedPtrField< ::panda::TaintQuery > taint_query_;
  friend void  protobuf_AddDesc_plog_2eproto();
  friend void protobuf_AssignDesc_plog_2eproto();
  friend void protobuf_ShutdownFile_plog_2eproto();

  void InitAsDefaultInstance();
  static TaintQueryHypercall* default_instance_;
};
// -------------------------------------------------------------------

class TaintedBranch : public ::google::protobuf::Message {
 public:
  TaintedBranch();
  virtual ~TaintedBranch();

  TaintedBranch(const TaintedBranch& from);

  inline TaintedBranch& operator=(const TaintedBranch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TaintedBranch& default_instance();

  void Swap(TaintedBranch* other);

  // implements Message ----------------------------------------------

  TaintedBranch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaintedBranch& from);
  void MergeFrom(const TaintedBranch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .panda.CallStack call_stack = 1;
  inline bool has_call_stack() const;
  inline void clear_call_stack();
  static const int kCallStackFieldNumber = 1;
  inline const ::panda::CallStack& call_stack() const;
  inline ::panda::CallStack* mutable_call_stack();
  inline ::panda::CallStack* release_call_stack();
  inline void set_allocated_call_stack(::panda::CallStack* call_stack);

  // repeated .panda.TaintQuery taint_query = 2;
  inline int taint_query_size() const;
  inline void clear_taint_query();
  static const int kTaintQueryFieldNumber = 2;
  inline const ::panda::TaintQuery& taint_query(int index) const;
  inline ::panda::TaintQuery* mutable_taint_query(int index);
  inline ::panda::TaintQuery* add_taint_query();
  inline const ::google::protobuf::RepeatedPtrField< ::panda::TaintQuery >&
      taint_query() const;
  inline ::google::protobuf::RepeatedPtrField< ::panda::TaintQuery >*
      mutable_taint_query();

  // @@protoc_insertion_point(class_scope:panda.TaintedBranch)
 private:
  inline void set_has_call_stack();
  inline void clear_has_call_stack();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::panda::CallStack* call_stack_;
  ::google::protobuf::RepeatedPtrField< ::panda::TaintQuery > taint_query_;
  friend void  protobuf_AddDesc_plog_2eproto();
  friend void protobuf_AssignDesc_plog_2eproto();
  friend void protobuf_ShutdownFile_plog_2eproto();

  void InitAsDefaultInstance();
  static TaintedBranch* default_instance_;
};
// -------------------------------------------------------------------

class TaintedBranchSummary : public ::google::protobuf::Message {
 public:
  TaintedBranchSummary();
  virtual ~TaintedBranchSummary();

  TaintedBranchSummary(const TaintedBranchSummary& from);

  inline TaintedBranchSummary& operator=(const TaintedBranchSummary& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TaintedBranchSummary& default_instance();

  void Swap(TaintedBranchSummary* other);

  // implements Message ----------------------------------------------

  TaintedBranchSummary* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaintedBranchSummary& from);
  void MergeFrom(const TaintedBranchSummary& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 asid = 1;
  inline bool has_asid() const;
  inline void clear_asid();
  static const int kAsidFieldNumber = 1;
  inline ::google::protobuf::uint64 asid() const;
  inline void set_asid(::google::protobuf::uint64 value);

  // required uint64 pc = 2;
  inline bool has_pc() const;
  inline void clear_pc();
  static const int kPcFieldNumber = 2;
  inline ::google::protobuf::uint64 pc() const;
  inline void set_pc(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:panda.TaintedBranchSummary)
 private:
  inline void set_has_asid();
  inline void clear_has_asid();
  inline void set_has_pc();
  inline void clear_has_pc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 asid_;
  ::google::protobuf::uint64 pc_;
  friend void  protobuf_AddDesc_plog_2eproto();
  friend void protobuf_AssignDesc_plog_2eproto();
  friend void protobuf_ShutdownFile_plog_2eproto();

  void InitAsDefaultInstance();
  static TaintedBranchSummary* default_instance_;
};
// -------------------------------------------------------------------

class TaintedInstr : public ::google::protobuf::Message {
 public:
  TaintedInstr();
  virtual ~TaintedInstr();

  TaintedInstr(const TaintedInstr& from);

  inline TaintedInstr& operator=(const TaintedInstr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TaintedInstr& default_instance();

  void Swap(TaintedInstr* other);

  // implements Message ----------------------------------------------

  TaintedInstr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaintedInstr& from);
  void MergeFrom(const TaintedInstr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .panda.CallStack call_stack = 1;
  inline bool has_call_stack() const;
  inline void clear_call_stack();
  static const int kCallStackFieldNumber = 1;
  inline const ::panda::CallStack& call_stack() const;
  inline ::panda::CallStack* mutable_call_stack();
  inline ::panda::CallStack* release_call_stack();
  inline void set_allocated_call_stack(::panda::CallStack* call_stack);

  // repeated .panda.TaintQuery taint_query = 2;
  inline int taint_query_size() const;
  inline void clear_taint_query();
  static const int kTaintQueryFieldNumber = 2;
  inline const ::panda::TaintQuery& taint_query(int index) const;
  inline ::panda::TaintQuery* mutable_taint_query(int index);
  inline ::panda::TaintQuery* add_taint_query();
  inline const ::google::protobuf::RepeatedPtrField< ::panda::TaintQuery >&
      taint_query() const;
  inline ::google::protobuf::RepeatedPtrField< ::panda::TaintQuery >*
      mutable_taint_query();

  // @@protoc_insertion_point(class_scope:panda.TaintedInstr)
 private:
  inline void set_has_call_stack();
  inline void clear_has_call_stack();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::panda::CallStack* call_stack_;
  ::google::protobuf::RepeatedPtrField< ::panda::TaintQuery > taint_query_;
  friend void  protobuf_AddDesc_plog_2eproto();
  friend void protobuf_AssignDesc_plog_2eproto();
  friend void protobuf_ShutdownFile_plog_2eproto();

  void InitAsDefaultInstance();
  static TaintedInstr* default_instance_;
};
// -------------------------------------------------------------------

class TaintedInstrSummary : public ::google::protobuf::Message {
 public:
  TaintedInstrSummary();
  virtual ~TaintedInstrSummary();

  TaintedInstrSummary(const TaintedInstrSummary& from);

  inline TaintedInstrSummary& operator=(const TaintedInstrSummary& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TaintedInstrSummary& default_instance();

  void Swap(TaintedInstrSummary* other);

  // implements Message ----------------------------------------------

  TaintedInstrSummary* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaintedInstrSummary& from);
  void MergeFrom(const TaintedInstrSummary& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 asid = 1;
  inline bool has_asid() const;
  inline void clear_asid();
  static const int kAsidFieldNumber = 1;
  inline ::google::protobuf::uint64 asid() const;
  inline void set_asid(::google::protobuf::uint64 value);

  // required uint64 pc = 2;
  inline bool has_pc() const;
  inline void clear_pc();
  static const int kPcFieldNumber = 2;
  inline ::google::protobuf::uint64 pc() const;
  inline void set_pc(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:panda.TaintedInstrSummary)
 private:
  inline void set_has_asid();
  inline void clear_has_asid();
  inline void set_has_pc();
  inline void clear_has_pc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 asid_;
  ::google::protobuf::uint64 pc_;
  friend void  protobuf_AddDesc_plog_2eproto();
  friend void protobuf_AssignDesc_plog_2eproto();
  friend void protobuf_ShutdownFile_plog_2eproto();

  void InitAsDefaultInstance();
  static TaintedInstrSummary* default_instance_;
};
// -------------------------------------------------------------------

class LogEntry : public ::google::protobuf::Message {
 public:
  LogEntry();
  virtual ~LogEntry();

  LogEntry(const LogEntry& from);

  inline LogEntry& operator=(const LogEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogEntry& default_instance();

  void Swap(LogEntry* other);

  // implements Message ----------------------------------------------

  LogEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogEntry& from);
  void MergeFrom(const LogEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 pc = 1;
  inline bool has_pc() const;
  inline void clear_pc();
  static const int kPcFieldNumber = 1;
  inline ::google::protobuf::uint64 pc() const;
  inline void set_pc(::google::protobuf::uint64 value);

  // required uint64 instr = 2;
  inline bool has_instr() const;
  inline void clear_instr();
  static const int kInstrFieldNumber = 2;
  inline ::google::protobuf::uint64 instr() const;
  inline void set_instr(::google::protobuf::uint64 value);

  // optional .panda.AsidInfo asid_info = 40;
  inline bool has_asid_info() const;
  inline void clear_asid_info();
  static const int kAsidInfoFieldNumber = 40;
  inline const ::panda::AsidInfo& asid_info() const;
  inline ::panda::AsidInfo* mutable_asid_info();
  inline ::panda::AsidInfo* release_asid_info();
  inline void set_allocated_asid_info(::panda::AsidInfo* asid_info);

  // optional uint64 asid = 3;
  inline bool has_asid() const;
  inline void clear_asid();
  static const int kAsidFieldNumber = 3;
  inline ::google::protobuf::uint64 asid() const;
  inline void set_asid(::google::protobuf::uint64 value);

  // optional .panda.CallStack call_stack = 10;
  inline bool has_call_stack() const;
  inline void clear_call_stack();
  static const int kCallStackFieldNumber = 10;
  inline const ::panda::CallStack& call_stack() const;
  inline ::panda::CallStack* mutable_call_stack();
  inline ::panda::CallStack* release_call_stack();
  inline void set_allocated_call_stack(::panda::CallStack* call_stack);

  // optional .panda.DwarfCall dwarf_call = 66;
  inline bool has_dwarf_call() const;
  inline void clear_dwarf_call();
  static const int kDwarfCallFieldNumber = 66;
  inline const ::panda::DwarfCall& dwarf_call() const;
  inline ::panda::DwarfCall* mutable_dwarf_call();
  inline ::panda::DwarfCall* release_dwarf_call();
  inline void set_allocated_dwarf_call(::panda::DwarfCall* dwarf_call);

  // optional .panda.DwarfCall dwarf_ret = 67;
  inline bool has_dwarf_ret() const;
  inline void clear_dwarf_ret();
  static const int kDwarfRetFieldNumber = 67;
  inline const ::panda::DwarfCall& dwarf_ret() const;
  inline ::panda::DwarfCall* mutable_dwarf_ret();
  inline ::panda::DwarfCall* release_dwarf_ret();
  inline void set_allocated_dwarf_ret(::panda::DwarfCall* dwarf_ret);

  // optional uint64 taint_label_virtual_addr = 6;
  inline bool has_taint_label_virtual_addr() const;
  inline void clear_taint_label_virtual_addr();
  static const int kTaintLabelVirtualAddrFieldNumber = 6;
  inline ::google::protobuf::uint64 taint_label_virtual_addr() const;
  inline void set_taint_label_virtual_addr(::google::protobuf::uint64 value);

  // optional uint64 taint_label_physical_addr = 7;
  inline bool has_taint_label_physical_addr() const;
  inline void clear_taint_label_physical_addr();
  static const int kTaintLabelPhysicalAddrFieldNumber = 7;
  inline ::google::protobuf::uint64 taint_label_physical_addr() const;
  inline void set_taint_label_physical_addr(::google::protobuf::uint64 value);

  // optional uint32 taint_label_number = 8;
  inline bool has_taint_label_number() const;
  inline void clear_taint_label_number();
  static const int kTaintLabelNumberFieldNumber = 8;
  inline ::google::protobuf::uint32 taint_label_number() const;
  inline void set_taint_label_number(::google::protobuf::uint32 value);

  // optional .panda.TaintQueryPri taint_query_pri = 68;
  inline bool has_taint_query_pri() const;
  inline void clear_taint_query_pri();
  static const int kTaintQueryPriFieldNumber = 68;
  inline const ::panda::TaintQueryPri& taint_query_pri() const;
  inline ::panda::TaintQueryPri* mutable_taint_query_pri();
  inline ::panda::TaintQueryPri* release_taint_query_pri();
  inline void set_allocated_taint_query_pri(::panda::TaintQueryPri* taint_query_pri);

  // optional .panda.AttackPointPri attack_point_pri = 69;
  inline bool has_attack_point_pri() const;
  inline void clear_attack_point_pri();
  static const int kAttackPointPriFieldNumber = 69;
  inline const ::panda::AttackPointPri& attack_point_pri() const;
  inline ::panda::AttackPointPri* mutable_attack_point_pri();
  inline ::panda::AttackPointPri* release_attack_point_pri();
  inline void set_allocated_attack_point_pri(::panda::AttackPointPri* attack_point_pri);

  // optional .panda.SrcInfoPri pri_trace_src_info = 70;
  inline bool has_pri_trace_src_info() const;
  inline void clear_pri_trace_src_info();
  static const int kPriTraceSrcInfoFieldNumber = 70;
  inline const ::panda::SrcInfoPri& pri_trace_src_info() const;
  inline ::panda::SrcInfoPri* mutable_pri_trace_src_info();
  inline ::panda::SrcInfoPri* release_pri_trace_src_info();
  inline void set_allocated_pri_trace_src_info(::panda::SrcInfoPri* pri_trace_src_info);

  // optional .panda.TaintQueryHypercall taint_query_hypercall = 38;
  inline bool has_taint_query_hypercall() const;
  inline void clear_taint_query_hypercall();
  static const int kTaintQueryHypercallFieldNumber = 38;
  inline const ::panda::TaintQueryHypercall& taint_query_hypercall() const;
  inline ::panda::TaintQueryHypercall* mutable_taint_query_hypercall();
  inline ::panda::TaintQueryHypercall* release_taint_query_hypercall();
  inline void set_allocated_taint_query_hypercall(::panda::TaintQueryHypercall* taint_query_hypercall);

  // optional .panda.AttackPoint attack_point = 39;
  inline bool has_attack_point() const;
  inline void clear_attack_point();
  static const int kAttackPointFieldNumber = 39;
  inline const ::panda::AttackPoint& attack_point() const;
  inline ::panda::AttackPoint* mutable_attack_point();
  inline ::panda::AttackPoint* release_attack_point();
  inline void set_allocated_attack_point(::panda::AttackPoint* attack_point);

  // optional .panda.TaintedBranch tainted_branch = 36;
  inline bool has_tainted_branch() const;
  inline void clear_tainted_branch();
  static const int kTaintedBranchFieldNumber = 36;
  inline const ::panda::TaintedBranch& tainted_branch() const;
  inline ::panda::TaintedBranch* mutable_tainted_branch();
  inline ::panda::TaintedBranch* release_tainted_branch();
  inline void set_allocated_tainted_branch(::panda::TaintedBranch* tainted_branch);

  // optional .panda.TaintedBranchSummary tainted_branch_summary = 72;
  inline bool has_tainted_branch_summary() const;
  inline void clear_tainted_branch_summary();
  static const int kTaintedBranchSummaryFieldNumber = 72;
  inline const ::panda::TaintedBranchSummary& tainted_branch_summary() const;
  inline ::panda::TaintedBranchSummary* mutable_tainted_branch_summary();
  inline ::panda::TaintedBranchSummary* release_tainted_branch_summary();
  inline void set_allocated_tainted_branch_summary(::panda::TaintedBranchSummary* tainted_branch_summary);

  // optional .panda.TaintedInstr tainted_instr = 37;
  inline bool has_tainted_instr() const;
  inline void clear_tainted_instr();
  static const int kTaintedInstrFieldNumber = 37;
  inline const ::panda::TaintedInstr& tainted_instr() const;
  inline ::panda::TaintedInstr* mutable_tainted_instr();
  inline ::panda::TaintedInstr* release_tainted_instr();
  inline void set_allocated_tainted_instr(::panda::TaintedInstr* tainted_instr);

  // optional .panda.TaintedInstrSummary tainted_instr_summary = 56;
  inline bool has_tainted_instr_summary() const;
  inline void clear_tainted_instr_summary();
  static const int kTaintedInstrSummaryFieldNumber = 56;
  inline const ::panda::TaintedInstrSummary& tainted_instr_summary() const;
  inline ::panda::TaintedInstrSummary* mutable_tainted_instr_summary();
  inline ::panda::TaintedInstrSummary* release_tainted_instr_summary();
  inline void set_allocated_tainted_instr_summary(::panda::TaintedInstrSummary* tainted_instr_summary);

  // @@protoc_insertion_point(class_scope:panda.LogEntry)
 private:
  inline void set_has_pc();
  inline void clear_has_pc();
  inline void set_has_instr();
  inline void clear_has_instr();
  inline void set_has_asid_info();
  inline void clear_has_asid_info();
  inline void set_has_asid();
  inline void clear_has_asid();
  inline void set_has_call_stack();
  inline void clear_has_call_stack();
  inline void set_has_dwarf_call();
  inline void clear_has_dwarf_call();
  inline void set_has_dwarf_ret();
  inline void clear_has_dwarf_ret();
  inline void set_has_taint_label_virtual_addr();
  inline void clear_has_taint_label_virtual_addr();
  inline void set_has_taint_label_physical_addr();
  inline void clear_has_taint_label_physical_addr();
  inline void set_has_taint_label_number();
  inline void clear_has_taint_label_number();
  inline void set_has_taint_query_pri();
  inline void clear_has_taint_query_pri();
  inline void set_has_attack_point_pri();
  inline void clear_has_attack_point_pri();
  inline void set_has_pri_trace_src_info();
  inline void clear_has_pri_trace_src_info();
  inline void set_has_taint_query_hypercall();
  inline void clear_has_taint_query_hypercall();
  inline void set_has_attack_point();
  inline void clear_has_attack_point();
  inline void set_has_tainted_branch();
  inline void clear_has_tainted_branch();
  inline void set_has_tainted_branch_summary();
  inline void clear_has_tainted_branch_summary();
  inline void set_has_tainted_instr();
  inline void clear_has_tainted_instr();
  inline void set_has_tainted_instr_summary();
  inline void clear_has_tainted_instr_summary();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 pc_;
  ::google::protobuf::uint64 instr_;
  ::panda::AsidInfo* asid_info_;
  ::google::protobuf::uint64 asid_;
  ::panda::CallStack* call_stack_;
  ::panda::DwarfCall* dwarf_call_;
  ::panda::DwarfCall* dwarf_ret_;
  ::google::protobuf::uint64 taint_label_virtual_addr_;
  ::google::protobuf::uint64 taint_label_physical_addr_;
  ::panda::TaintQueryPri* taint_query_pri_;
  ::panda::AttackPointPri* attack_point_pri_;
  ::panda::SrcInfoPri* pri_trace_src_info_;
  ::panda::TaintQueryHypercall* taint_query_hypercall_;
  ::panda::AttackPoint* attack_point_;
  ::panda::TaintedBranch* tainted_branch_;
  ::panda::TaintedBranchSummary* tainted_branch_summary_;
  ::panda::TaintedInstr* tainted_instr_;
  ::panda::TaintedInstrSummary* tainted_instr_summary_;
  ::google::protobuf::uint32 taint_label_number_;
  friend void  protobuf_AddDesc_plog_2eproto();
  friend void protobuf_AssignDesc_plog_2eproto();
  friend void protobuf_ShutdownFile_plog_2eproto();

  void InitAsDefaultInstance();
  static LogEntry* default_instance_;
};
// ===================================================================


// ===================================================================

// AsidInfo

// required uint64 asid = 1;
inline bool AsidInfo::has_asid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AsidInfo::set_has_asid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AsidInfo::clear_has_asid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AsidInfo::clear_asid() {
  asid_ = GOOGLE_ULONGLONG(0);
  clear_has_asid();
}
inline ::google::protobuf::uint64 AsidInfo::asid() const {
  // @@protoc_insertion_point(field_get:panda.AsidInfo.asid)
  return asid_;
}
inline void AsidInfo::set_asid(::google::protobuf::uint64 value) {
  set_has_asid();
  asid_ = value;
  // @@protoc_insertion_point(field_set:panda.AsidInfo.asid)
}

// required string name = 2;
inline bool AsidInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AsidInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AsidInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AsidInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& AsidInfo::name() const {
  // @@protoc_insertion_point(field_get:panda.AsidInfo.name)
  return *name_;
}
inline void AsidInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:panda.AsidInfo.name)
}
inline void AsidInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:panda.AsidInfo.name)
}
inline void AsidInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:panda.AsidInfo.name)
}
inline ::std::string* AsidInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:panda.AsidInfo.name)
  return name_;
}
inline ::std::string* AsidInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AsidInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:panda.AsidInfo.name)
}

// required uint32 pid = 3;
inline bool AsidInfo::has_pid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AsidInfo::set_has_pid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AsidInfo::clear_has_pid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AsidInfo::clear_pid() {
  pid_ = 0u;
  clear_has_pid();
}
inline ::google::protobuf::uint32 AsidInfo::pid() const {
  // @@protoc_insertion_point(field_get:panda.AsidInfo.pid)
  return pid_;
}
inline void AsidInfo::set_pid(::google::protobuf::uint32 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:panda.AsidInfo.pid)
}

// required uint64 start_instr = 4;
inline bool AsidInfo::has_start_instr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AsidInfo::set_has_start_instr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AsidInfo::clear_has_start_instr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AsidInfo::clear_start_instr() {
  start_instr_ = GOOGLE_ULONGLONG(0);
  clear_has_start_instr();
}
inline ::google::protobuf::uint64 AsidInfo::start_instr() const {
  // @@protoc_insertion_point(field_get:panda.AsidInfo.start_instr)
  return start_instr_;
}
inline void AsidInfo::set_start_instr(::google::protobuf::uint64 value) {
  set_has_start_instr();
  start_instr_ = value;
  // @@protoc_insertion_point(field_set:panda.AsidInfo.start_instr)
}

// required uint64 end_instr = 5;
inline bool AsidInfo::has_end_instr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AsidInfo::set_has_end_instr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AsidInfo::clear_has_end_instr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AsidInfo::clear_end_instr() {
  end_instr_ = GOOGLE_ULONGLONG(0);
  clear_has_end_instr();
}
inline ::google::protobuf::uint64 AsidInfo::end_instr() const {
  // @@protoc_insertion_point(field_get:panda.AsidInfo.end_instr)
  return end_instr_;
}
inline void AsidInfo::set_end_instr(::google::protobuf::uint64 value) {
  set_has_end_instr();
  end_instr_ = value;
  // @@protoc_insertion_point(field_set:panda.AsidInfo.end_instr)
}

// required uint64 count = 6;
inline bool AsidInfo::has_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AsidInfo::set_has_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AsidInfo::clear_has_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AsidInfo::clear_count() {
  count_ = GOOGLE_ULONGLONG(0);
  clear_has_count();
}
inline ::google::protobuf::uint64 AsidInfo::count() const {
  // @@protoc_insertion_point(field_get:panda.AsidInfo.count)
  return count_;
}
inline void AsidInfo::set_count(::google::protobuf::uint64 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:panda.AsidInfo.count)
}

// -------------------------------------------------------------------

// CallStack

// repeated uint64 addr = 1;
inline int CallStack::addr_size() const {
  return addr_.size();
}
inline void CallStack::clear_addr() {
  addr_.Clear();
}
inline ::google::protobuf::uint64 CallStack::addr(int index) const {
  // @@protoc_insertion_point(field_get:panda.CallStack.addr)
  return addr_.Get(index);
}
inline void CallStack::set_addr(int index, ::google::protobuf::uint64 value) {
  addr_.Set(index, value);
  // @@protoc_insertion_point(field_set:panda.CallStack.addr)
}
inline void CallStack::add_addr(::google::protobuf::uint64 value) {
  addr_.Add(value);
  // @@protoc_insertion_point(field_add:panda.CallStack.addr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CallStack::addr() const {
  // @@protoc_insertion_point(field_list:panda.CallStack.addr)
  return addr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CallStack::mutable_addr() {
  // @@protoc_insertion_point(field_mutable_list:panda.CallStack.addr)
  return &addr_;
}

// -------------------------------------------------------------------

// DwarfCall

// required string file_callee = 1;
inline bool DwarfCall::has_file_callee() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DwarfCall::set_has_file_callee() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DwarfCall::clear_has_file_callee() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DwarfCall::clear_file_callee() {
  if (file_callee_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_callee_->clear();
  }
  clear_has_file_callee();
}
inline const ::std::string& DwarfCall::file_callee() const {
  // @@protoc_insertion_point(field_get:panda.DwarfCall.file_callee)
  return *file_callee_;
}
inline void DwarfCall::set_file_callee(const ::std::string& value) {
  set_has_file_callee();
  if (file_callee_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_callee_ = new ::std::string;
  }
  file_callee_->assign(value);
  // @@protoc_insertion_point(field_set:panda.DwarfCall.file_callee)
}
inline void DwarfCall::set_file_callee(const char* value) {
  set_has_file_callee();
  if (file_callee_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_callee_ = new ::std::string;
  }
  file_callee_->assign(value);
  // @@protoc_insertion_point(field_set_char:panda.DwarfCall.file_callee)
}
inline void DwarfCall::set_file_callee(const char* value, size_t size) {
  set_has_file_callee();
  if (file_callee_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_callee_ = new ::std::string;
  }
  file_callee_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:panda.DwarfCall.file_callee)
}
inline ::std::string* DwarfCall::mutable_file_callee() {
  set_has_file_callee();
  if (file_callee_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_callee_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:panda.DwarfCall.file_callee)
  return file_callee_;
}
inline ::std::string* DwarfCall::release_file_callee() {
  clear_has_file_callee();
  if (file_callee_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = file_callee_;
    file_callee_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DwarfCall::set_allocated_file_callee(::std::string* file_callee) {
  if (file_callee_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_callee_;
  }
  if (file_callee) {
    set_has_file_callee();
    file_callee_ = file_callee;
  } else {
    clear_has_file_callee();
    file_callee_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:panda.DwarfCall.file_callee)
}

// required string function_name_callee = 2;
inline bool DwarfCall::has_function_name_callee() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DwarfCall::set_has_function_name_callee() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DwarfCall::clear_has_function_name_callee() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DwarfCall::clear_function_name_callee() {
  if (function_name_callee_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    function_name_callee_->clear();
  }
  clear_has_function_name_callee();
}
inline const ::std::string& DwarfCall::function_name_callee() const {
  // @@protoc_insertion_point(field_get:panda.DwarfCall.function_name_callee)
  return *function_name_callee_;
}
inline void DwarfCall::set_function_name_callee(const ::std::string& value) {
  set_has_function_name_callee();
  if (function_name_callee_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    function_name_callee_ = new ::std::string;
  }
  function_name_callee_->assign(value);
  // @@protoc_insertion_point(field_set:panda.DwarfCall.function_name_callee)
}
inline void DwarfCall::set_function_name_callee(const char* value) {
  set_has_function_name_callee();
  if (function_name_callee_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    function_name_callee_ = new ::std::string;
  }
  function_name_callee_->assign(value);
  // @@protoc_insertion_point(field_set_char:panda.DwarfCall.function_name_callee)
}
inline void DwarfCall::set_function_name_callee(const char* value, size_t size) {
  set_has_function_name_callee();
  if (function_name_callee_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    function_name_callee_ = new ::std::string;
  }
  function_name_callee_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:panda.DwarfCall.function_name_callee)
}
inline ::std::string* DwarfCall::mutable_function_name_callee() {
  set_has_function_name_callee();
  if (function_name_callee_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    function_name_callee_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:panda.DwarfCall.function_name_callee)
  return function_name_callee_;
}
inline ::std::string* DwarfCall::release_function_name_callee() {
  clear_has_function_name_callee();
  if (function_name_callee_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = function_name_callee_;
    function_name_callee_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DwarfCall::set_allocated_function_name_callee(::std::string* function_name_callee) {
  if (function_name_callee_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete function_name_callee_;
  }
  if (function_name_callee) {
    set_has_function_name_callee();
    function_name_callee_ = function_name_callee;
  } else {
    clear_has_function_name_callee();
    function_name_callee_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:panda.DwarfCall.function_name_callee)
}

// required uint64 line_number_callee = 3;
inline bool DwarfCall::has_line_number_callee() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DwarfCall::set_has_line_number_callee() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DwarfCall::clear_has_line_number_callee() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DwarfCall::clear_line_number_callee() {
  line_number_callee_ = GOOGLE_ULONGLONG(0);
  clear_has_line_number_callee();
}
inline ::google::protobuf::uint64 DwarfCall::line_number_callee() const {
  // @@protoc_insertion_point(field_get:panda.DwarfCall.line_number_callee)
  return line_number_callee_;
}
inline void DwarfCall::set_line_number_callee(::google::protobuf::uint64 value) {
  set_has_line_number_callee();
  line_number_callee_ = value;
  // @@protoc_insertion_point(field_set:panda.DwarfCall.line_number_callee)
}

// required string file_caller = 4;
inline bool DwarfCall::has_file_caller() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DwarfCall::set_has_file_caller() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DwarfCall::clear_has_file_caller() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DwarfCall::clear_file_caller() {
  if (file_caller_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_caller_->clear();
  }
  clear_has_file_caller();
}
inline const ::std::string& DwarfCall::file_caller() const {
  // @@protoc_insertion_point(field_get:panda.DwarfCall.file_caller)
  return *file_caller_;
}
inline void DwarfCall::set_file_caller(const ::std::string& value) {
  set_has_file_caller();
  if (file_caller_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_caller_ = new ::std::string;
  }
  file_caller_->assign(value);
  // @@protoc_insertion_point(field_set:panda.DwarfCall.file_caller)
}
inline void DwarfCall::set_file_caller(const char* value) {
  set_has_file_caller();
  if (file_caller_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_caller_ = new ::std::string;
  }
  file_caller_->assign(value);
  // @@protoc_insertion_point(field_set_char:panda.DwarfCall.file_caller)
}
inline void DwarfCall::set_file_caller(const char* value, size_t size) {
  set_has_file_caller();
  if (file_caller_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_caller_ = new ::std::string;
  }
  file_caller_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:panda.DwarfCall.file_caller)
}
inline ::std::string* DwarfCall::mutable_file_caller() {
  set_has_file_caller();
  if (file_caller_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_caller_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:panda.DwarfCall.file_caller)
  return file_caller_;
}
inline ::std::string* DwarfCall::release_file_caller() {
  clear_has_file_caller();
  if (file_caller_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = file_caller_;
    file_caller_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DwarfCall::set_allocated_file_caller(::std::string* file_caller) {
  if (file_caller_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_caller_;
  }
  if (file_caller) {
    set_has_file_caller();
    file_caller_ = file_caller;
  } else {
    clear_has_file_caller();
    file_caller_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:panda.DwarfCall.file_caller)
}

// required uint64 line_number_caller = 5;
inline bool DwarfCall::has_line_number_caller() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DwarfCall::set_has_line_number_caller() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DwarfCall::clear_has_line_number_caller() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DwarfCall::clear_line_number_caller() {
  line_number_caller_ = GOOGLE_ULONGLONG(0);
  clear_has_line_number_caller();
}
inline ::google::protobuf::uint64 DwarfCall::line_number_caller() const {
  // @@protoc_insertion_point(field_get:panda.DwarfCall.line_number_caller)
  return line_number_caller_;
}
inline void DwarfCall::set_line_number_caller(::google::protobuf::uint64 value) {
  set_has_line_number_caller();
  line_number_caller_ = value;
  // @@protoc_insertion_point(field_set:panda.DwarfCall.line_number_caller)
}

// -------------------------------------------------------------------

// SrcInfoPri

// required string filename = 1;
inline bool SrcInfoPri::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SrcInfoPri::set_has_filename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SrcInfoPri::clear_has_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SrcInfoPri::clear_filename() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& SrcInfoPri::filename() const {
  // @@protoc_insertion_point(field_get:panda.SrcInfoPri.filename)
  return *filename_;
}
inline void SrcInfoPri::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set:panda.SrcInfoPri.filename)
}
inline void SrcInfoPri::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set_char:panda.SrcInfoPri.filename)
}
inline void SrcInfoPri::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:panda.SrcInfoPri.filename)
}
inline ::std::string* SrcInfoPri::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:panda.SrcInfoPri.filename)
  return filename_;
}
inline ::std::string* SrcInfoPri::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SrcInfoPri::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:panda.SrcInfoPri.filename)
}

// required uint32 linenum = 2;
inline bool SrcInfoPri::has_linenum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SrcInfoPri::set_has_linenum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SrcInfoPri::clear_has_linenum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SrcInfoPri::clear_linenum() {
  linenum_ = 0u;
  clear_has_linenum();
}
inline ::google::protobuf::uint32 SrcInfoPri::linenum() const {
  // @@protoc_insertion_point(field_get:panda.SrcInfoPri.linenum)
  return linenum_;
}
inline void SrcInfoPri::set_linenum(::google::protobuf::uint32 value) {
  set_has_linenum();
  linenum_ = value;
  // @@protoc_insertion_point(field_set:panda.SrcInfoPri.linenum)
}

// required string astnodename = 3;
inline bool SrcInfoPri::has_astnodename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SrcInfoPri::set_has_astnodename() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SrcInfoPri::clear_has_astnodename() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SrcInfoPri::clear_astnodename() {
  if (astnodename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    astnodename_->clear();
  }
  clear_has_astnodename();
}
inline const ::std::string& SrcInfoPri::astnodename() const {
  // @@protoc_insertion_point(field_get:panda.SrcInfoPri.astnodename)
  return *astnodename_;
}
inline void SrcInfoPri::set_astnodename(const ::std::string& value) {
  set_has_astnodename();
  if (astnodename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    astnodename_ = new ::std::string;
  }
  astnodename_->assign(value);
  // @@protoc_insertion_point(field_set:panda.SrcInfoPri.astnodename)
}
inline void SrcInfoPri::set_astnodename(const char* value) {
  set_has_astnodename();
  if (astnodename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    astnodename_ = new ::std::string;
  }
  astnodename_->assign(value);
  // @@protoc_insertion_point(field_set_char:panda.SrcInfoPri.astnodename)
}
inline void SrcInfoPri::set_astnodename(const char* value, size_t size) {
  set_has_astnodename();
  if (astnodename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    astnodename_ = new ::std::string;
  }
  astnodename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:panda.SrcInfoPri.astnodename)
}
inline ::std::string* SrcInfoPri::mutable_astnodename() {
  set_has_astnodename();
  if (astnodename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    astnodename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:panda.SrcInfoPri.astnodename)
  return astnodename_;
}
inline ::std::string* SrcInfoPri::release_astnodename() {
  clear_has_astnodename();
  if (astnodename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = astnodename_;
    astnodename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SrcInfoPri::set_allocated_astnodename(::std::string* astnodename) {
  if (astnodename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete astnodename_;
  }
  if (astnodename) {
    set_has_astnodename();
    astnodename_ = astnodename;
  } else {
    clear_has_astnodename();
    astnodename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:panda.SrcInfoPri.astnodename)
}

// optional uint32 insertionpoint = 4;
inline bool SrcInfoPri::has_insertionpoint() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SrcInfoPri::set_has_insertionpoint() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SrcInfoPri::clear_has_insertionpoint() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SrcInfoPri::clear_insertionpoint() {
  insertionpoint_ = 0u;
  clear_has_insertionpoint();
}
inline ::google::protobuf::uint32 SrcInfoPri::insertionpoint() const {
  // @@protoc_insertion_point(field_get:panda.SrcInfoPri.insertionpoint)
  return insertionpoint_;
}
inline void SrcInfoPri::set_insertionpoint(::google::protobuf::uint32 value) {
  set_has_insertionpoint();
  insertionpoint_ = value;
  // @@protoc_insertion_point(field_set:panda.SrcInfoPri.insertionpoint)
}

// optional uint32 ast_loc_id = 5;
inline bool SrcInfoPri::has_ast_loc_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SrcInfoPri::set_has_ast_loc_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SrcInfoPri::clear_has_ast_loc_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SrcInfoPri::clear_ast_loc_id() {
  ast_loc_id_ = 0u;
  clear_has_ast_loc_id();
}
inline ::google::protobuf::uint32 SrcInfoPri::ast_loc_id() const {
  // @@protoc_insertion_point(field_get:panda.SrcInfoPri.ast_loc_id)
  return ast_loc_id_;
}
inline void SrcInfoPri::set_ast_loc_id(::google::protobuf::uint32 value) {
  set_has_ast_loc_id();
  ast_loc_id_ = value;
  // @@protoc_insertion_point(field_set:panda.SrcInfoPri.ast_loc_id)
}

// -------------------------------------------------------------------

// AttackPointPri

// required uint32 info = 1;
inline bool AttackPointPri::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AttackPointPri::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AttackPointPri::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AttackPointPri::clear_info() {
  info_ = 0u;
  clear_has_info();
}
inline ::google::protobuf::uint32 AttackPointPri::info() const {
  // @@protoc_insertion_point(field_get:panda.AttackPointPri.info)
  return info_;
}
inline void AttackPointPri::set_info(::google::protobuf::uint32 value) {
  set_has_info();
  info_ = value;
  // @@protoc_insertion_point(field_set:panda.AttackPointPri.info)
}

// required .panda.CallStack call_stack = 2;
inline bool AttackPointPri::has_call_stack() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AttackPointPri::set_has_call_stack() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AttackPointPri::clear_has_call_stack() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AttackPointPri::clear_call_stack() {
  if (call_stack_ != NULL) call_stack_->::panda::CallStack::Clear();
  clear_has_call_stack();
}
inline const ::panda::CallStack& AttackPointPri::call_stack() const {
  // @@protoc_insertion_point(field_get:panda.AttackPointPri.call_stack)
  return call_stack_ != NULL ? *call_stack_ : *default_instance_->call_stack_;
}
inline ::panda::CallStack* AttackPointPri::mutable_call_stack() {
  set_has_call_stack();
  if (call_stack_ == NULL) call_stack_ = new ::panda::CallStack;
  // @@protoc_insertion_point(field_mutable:panda.AttackPointPri.call_stack)
  return call_stack_;
}
inline ::panda::CallStack* AttackPointPri::release_call_stack() {
  clear_has_call_stack();
  ::panda::CallStack* temp = call_stack_;
  call_stack_ = NULL;
  return temp;
}
inline void AttackPointPri::set_allocated_call_stack(::panda::CallStack* call_stack) {
  delete call_stack_;
  call_stack_ = call_stack;
  if (call_stack) {
    set_has_call_stack();
  } else {
    clear_has_call_stack();
  }
  // @@protoc_insertion_point(field_set_allocated:panda.AttackPointPri.call_stack)
}

// required .panda.SrcInfoPri src_info = 3;
inline bool AttackPointPri::has_src_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AttackPointPri::set_has_src_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AttackPointPri::clear_has_src_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AttackPointPri::clear_src_info() {
  if (src_info_ != NULL) src_info_->::panda::SrcInfoPri::Clear();
  clear_has_src_info();
}
inline const ::panda::SrcInfoPri& AttackPointPri::src_info() const {
  // @@protoc_insertion_point(field_get:panda.AttackPointPri.src_info)
  return src_info_ != NULL ? *src_info_ : *default_instance_->src_info_;
}
inline ::panda::SrcInfoPri* AttackPointPri::mutable_src_info() {
  set_has_src_info();
  if (src_info_ == NULL) src_info_ = new ::panda::SrcInfoPri;
  // @@protoc_insertion_point(field_mutable:panda.AttackPointPri.src_info)
  return src_info_;
}
inline ::panda::SrcInfoPri* AttackPointPri::release_src_info() {
  clear_has_src_info();
  ::panda::SrcInfoPri* temp = src_info_;
  src_info_ = NULL;
  return temp;
}
inline void AttackPointPri::set_allocated_src_info(::panda::SrcInfoPri* src_info) {
  delete src_info_;
  src_info_ = src_info;
  if (src_info) {
    set_has_src_info();
  } else {
    clear_has_src_info();
  }
  // @@protoc_insertion_point(field_set_allocated:panda.AttackPointPri.src_info)
}

// -------------------------------------------------------------------

// TaintQueryPri

// required uint64 buf = 1;
inline bool TaintQueryPri::has_buf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaintQueryPri::set_has_buf() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TaintQueryPri::clear_has_buf() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TaintQueryPri::clear_buf() {
  buf_ = GOOGLE_ULONGLONG(0);
  clear_has_buf();
}
inline ::google::protobuf::uint64 TaintQueryPri::buf() const {
  // @@protoc_insertion_point(field_get:panda.TaintQueryPri.buf)
  return buf_;
}
inline void TaintQueryPri::set_buf(::google::protobuf::uint64 value) {
  set_has_buf();
  buf_ = value;
  // @@protoc_insertion_point(field_set:panda.TaintQueryPri.buf)
}

// required uint32 len = 2;
inline bool TaintQueryPri::has_len() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TaintQueryPri::set_has_len() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TaintQueryPri::clear_has_len() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TaintQueryPri::clear_len() {
  len_ = 0u;
  clear_has_len();
}
inline ::google::protobuf::uint32 TaintQueryPri::len() const {
  // @@protoc_insertion_point(field_get:panda.TaintQueryPri.len)
  return len_;
}
inline void TaintQueryPri::set_len(::google::protobuf::uint32 value) {
  set_has_len();
  len_ = value;
  // @@protoc_insertion_point(field_set:panda.TaintQueryPri.len)
}

// repeated uint32 data = 3;
inline int TaintQueryPri::data_size() const {
  return data_.size();
}
inline void TaintQueryPri::clear_data() {
  data_.Clear();
}
inline ::google::protobuf::uint32 TaintQueryPri::data(int index) const {
  // @@protoc_insertion_point(field_get:panda.TaintQueryPri.data)
  return data_.Get(index);
}
inline void TaintQueryPri::set_data(int index, ::google::protobuf::uint32 value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:panda.TaintQueryPri.data)
}
inline void TaintQueryPri::add_data(::google::protobuf::uint32 value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:panda.TaintQueryPri.data)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TaintQueryPri::data() const {
  // @@protoc_insertion_point(field_list:panda.TaintQueryPri.data)
  return data_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TaintQueryPri::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:panda.TaintQueryPri.data)
  return &data_;
}

// required uint32 num_tainted = 4;
inline bool TaintQueryPri::has_num_tainted() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TaintQueryPri::set_has_num_tainted() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TaintQueryPri::clear_has_num_tainted() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TaintQueryPri::clear_num_tainted() {
  num_tainted_ = 0u;
  clear_has_num_tainted();
}
inline ::google::protobuf::uint32 TaintQueryPri::num_tainted() const {
  // @@protoc_insertion_point(field_get:panda.TaintQueryPri.num_tainted)
  return num_tainted_;
}
inline void TaintQueryPri::set_num_tainted(::google::protobuf::uint32 value) {
  set_has_num_tainted();
  num_tainted_ = value;
  // @@protoc_insertion_point(field_set:panda.TaintQueryPri.num_tainted)
}

// required .panda.CallStack call_stack = 5;
inline bool TaintQueryPri::has_call_stack() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TaintQueryPri::set_has_call_stack() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TaintQueryPri::clear_has_call_stack() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TaintQueryPri::clear_call_stack() {
  if (call_stack_ != NULL) call_stack_->::panda::CallStack::Clear();
  clear_has_call_stack();
}
inline const ::panda::CallStack& TaintQueryPri::call_stack() const {
  // @@protoc_insertion_point(field_get:panda.TaintQueryPri.call_stack)
  return call_stack_ != NULL ? *call_stack_ : *default_instance_->call_stack_;
}
inline ::panda::CallStack* TaintQueryPri::mutable_call_stack() {
  set_has_call_stack();
  if (call_stack_ == NULL) call_stack_ = new ::panda::CallStack;
  // @@protoc_insertion_point(field_mutable:panda.TaintQueryPri.call_stack)
  return call_stack_;
}
inline ::panda::CallStack* TaintQueryPri::release_call_stack() {
  clear_has_call_stack();
  ::panda::CallStack* temp = call_stack_;
  call_stack_ = NULL;
  return temp;
}
inline void TaintQueryPri::set_allocated_call_stack(::panda::CallStack* call_stack) {
  delete call_stack_;
  call_stack_ = call_stack;
  if (call_stack) {
    set_has_call_stack();
  } else {
    clear_has_call_stack();
  }
  // @@protoc_insertion_point(field_set_allocated:panda.TaintQueryPri.call_stack)
}

// required .panda.SrcInfoPri src_info = 6;
inline bool TaintQueryPri::has_src_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TaintQueryPri::set_has_src_info() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TaintQueryPri::clear_has_src_info() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TaintQueryPri::clear_src_info() {
  if (src_info_ != NULL) src_info_->::panda::SrcInfoPri::Clear();
  clear_has_src_info();
}
inline const ::panda::SrcInfoPri& TaintQueryPri::src_info() const {
  // @@protoc_insertion_point(field_get:panda.TaintQueryPri.src_info)
  return src_info_ != NULL ? *src_info_ : *default_instance_->src_info_;
}
inline ::panda::SrcInfoPri* TaintQueryPri::mutable_src_info() {
  set_has_src_info();
  if (src_info_ == NULL) src_info_ = new ::panda::SrcInfoPri;
  // @@protoc_insertion_point(field_mutable:panda.TaintQueryPri.src_info)
  return src_info_;
}
inline ::panda::SrcInfoPri* TaintQueryPri::release_src_info() {
  clear_has_src_info();
  ::panda::SrcInfoPri* temp = src_info_;
  src_info_ = NULL;
  return temp;
}
inline void TaintQueryPri::set_allocated_src_info(::panda::SrcInfoPri* src_info) {
  delete src_info_;
  src_info_ = src_info;
  if (src_info) {
    set_has_src_info();
  } else {
    clear_has_src_info();
  }
  // @@protoc_insertion_point(field_set_allocated:panda.TaintQueryPri.src_info)
}

// repeated .panda.TaintQuery taint_query = 7;
inline int TaintQueryPri::taint_query_size() const {
  return taint_query_.size();
}
inline void TaintQueryPri::clear_taint_query() {
  taint_query_.Clear();
}
inline const ::panda::TaintQuery& TaintQueryPri::taint_query(int index) const {
  // @@protoc_insertion_point(field_get:panda.TaintQueryPri.taint_query)
  return taint_query_.Get(index);
}
inline ::panda::TaintQuery* TaintQueryPri::mutable_taint_query(int index) {
  // @@protoc_insertion_point(field_mutable:panda.TaintQueryPri.taint_query)
  return taint_query_.Mutable(index);
}
inline ::panda::TaintQuery* TaintQueryPri::add_taint_query() {
  // @@protoc_insertion_point(field_add:panda.TaintQueryPri.taint_query)
  return taint_query_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::panda::TaintQuery >&
TaintQueryPri::taint_query() const {
  // @@protoc_insertion_point(field_list:panda.TaintQueryPri.taint_query)
  return taint_query_;
}
inline ::google::protobuf::RepeatedPtrField< ::panda::TaintQuery >*
TaintQueryPri::mutable_taint_query() {
  // @@protoc_insertion_point(field_mutable_list:panda.TaintQueryPri.taint_query)
  return &taint_query_;
}

// -------------------------------------------------------------------

// TaintQueryUniqueLabelSet

// required uint64 ptr = 1;
inline bool TaintQueryUniqueLabelSet::has_ptr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaintQueryUniqueLabelSet::set_has_ptr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TaintQueryUniqueLabelSet::clear_has_ptr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TaintQueryUniqueLabelSet::clear_ptr() {
  ptr_ = GOOGLE_ULONGLONG(0);
  clear_has_ptr();
}
inline ::google::protobuf::uint64 TaintQueryUniqueLabelSet::ptr() const {
  // @@protoc_insertion_point(field_get:panda.TaintQueryUniqueLabelSet.ptr)
  return ptr_;
}
inline void TaintQueryUniqueLabelSet::set_ptr(::google::protobuf::uint64 value) {
  set_has_ptr();
  ptr_ = value;
  // @@protoc_insertion_point(field_set:panda.TaintQueryUniqueLabelSet.ptr)
}

// repeated uint32 label = 2;
inline int TaintQueryUniqueLabelSet::label_size() const {
  return label_.size();
}
inline void TaintQueryUniqueLabelSet::clear_label() {
  label_.Clear();
}
inline ::google::protobuf::uint32 TaintQueryUniqueLabelSet::label(int index) const {
  // @@protoc_insertion_point(field_get:panda.TaintQueryUniqueLabelSet.label)
  return label_.Get(index);
}
inline void TaintQueryUniqueLabelSet::set_label(int index, ::google::protobuf::uint32 value) {
  label_.Set(index, value);
  // @@protoc_insertion_point(field_set:panda.TaintQueryUniqueLabelSet.label)
}
inline void TaintQueryUniqueLabelSet::add_label(::google::protobuf::uint32 value) {
  label_.Add(value);
  // @@protoc_insertion_point(field_add:panda.TaintQueryUniqueLabelSet.label)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TaintQueryUniqueLabelSet::label() const {
  // @@protoc_insertion_point(field_list:panda.TaintQueryUniqueLabelSet.label)
  return label_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TaintQueryUniqueLabelSet::mutable_label() {
  // @@protoc_insertion_point(field_mutable_list:panda.TaintQueryUniqueLabelSet.label)
  return &label_;
}

// -------------------------------------------------------------------

// SrcInfo

// required uint32 filename = 1;
inline bool SrcInfo::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SrcInfo::set_has_filename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SrcInfo::clear_has_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SrcInfo::clear_filename() {
  filename_ = 0u;
  clear_has_filename();
}
inline ::google::protobuf::uint32 SrcInfo::filename() const {
  // @@protoc_insertion_point(field_get:panda.SrcInfo.filename)
  return filename_;
}
inline void SrcInfo::set_filename(::google::protobuf::uint32 value) {
  set_has_filename();
  filename_ = value;
  // @@protoc_insertion_point(field_set:panda.SrcInfo.filename)
}

// required uint32 linenum = 2;
inline bool SrcInfo::has_linenum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SrcInfo::set_has_linenum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SrcInfo::clear_has_linenum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SrcInfo::clear_linenum() {
  linenum_ = 0u;
  clear_has_linenum();
}
inline ::google::protobuf::uint32 SrcInfo::linenum() const {
  // @@protoc_insertion_point(field_get:panda.SrcInfo.linenum)
  return linenum_;
}
inline void SrcInfo::set_linenum(::google::protobuf::uint32 value) {
  set_has_linenum();
  linenum_ = value;
  // @@protoc_insertion_point(field_set:panda.SrcInfo.linenum)
}

// required uint32 astnodename = 3;
inline bool SrcInfo::has_astnodename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SrcInfo::set_has_astnodename() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SrcInfo::clear_has_astnodename() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SrcInfo::clear_astnodename() {
  astnodename_ = 0u;
  clear_has_astnodename();
}
inline ::google::protobuf::uint32 SrcInfo::astnodename() const {
  // @@protoc_insertion_point(field_get:panda.SrcInfo.astnodename)
  return astnodename_;
}
inline void SrcInfo::set_astnodename(::google::protobuf::uint32 value) {
  set_has_astnodename();
  astnodename_ = value;
  // @@protoc_insertion_point(field_set:panda.SrcInfo.astnodename)
}

// optional uint32 insertionpoint = 4;
inline bool SrcInfo::has_insertionpoint() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SrcInfo::set_has_insertionpoint() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SrcInfo::clear_has_insertionpoint() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SrcInfo::clear_insertionpoint() {
  insertionpoint_ = 0u;
  clear_has_insertionpoint();
}
inline ::google::protobuf::uint32 SrcInfo::insertionpoint() const {
  // @@protoc_insertion_point(field_get:panda.SrcInfo.insertionpoint)
  return insertionpoint_;
}
inline void SrcInfo::set_insertionpoint(::google::protobuf::uint32 value) {
  set_has_insertionpoint();
  insertionpoint_ = value;
  // @@protoc_insertion_point(field_set:panda.SrcInfo.insertionpoint)
}

// optional uint32 ast_loc_id = 5;
inline bool SrcInfo::has_ast_loc_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SrcInfo::set_has_ast_loc_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SrcInfo::clear_has_ast_loc_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SrcInfo::clear_ast_loc_id() {
  ast_loc_id_ = 0u;
  clear_has_ast_loc_id();
}
inline ::google::protobuf::uint32 SrcInfo::ast_loc_id() const {
  // @@protoc_insertion_point(field_get:panda.SrcInfo.ast_loc_id)
  return ast_loc_id_;
}
inline void SrcInfo::set_ast_loc_id(::google::protobuf::uint32 value) {
  set_has_ast_loc_id();
  ast_loc_id_ = value;
  // @@protoc_insertion_point(field_set:panda.SrcInfo.ast_loc_id)
}

// -------------------------------------------------------------------

// TaintQuery

// required uint64 ptr = 1;
inline bool TaintQuery::has_ptr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaintQuery::set_has_ptr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TaintQuery::clear_has_ptr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TaintQuery::clear_ptr() {
  ptr_ = GOOGLE_ULONGLONG(0);
  clear_has_ptr();
}
inline ::google::protobuf::uint64 TaintQuery::ptr() const {
  // @@protoc_insertion_point(field_get:panda.TaintQuery.ptr)
  return ptr_;
}
inline void TaintQuery::set_ptr(::google::protobuf::uint64 value) {
  set_has_ptr();
  ptr_ = value;
  // @@protoc_insertion_point(field_set:panda.TaintQuery.ptr)
}

// required uint32 tcn = 2;
inline bool TaintQuery::has_tcn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TaintQuery::set_has_tcn() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TaintQuery::clear_has_tcn() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TaintQuery::clear_tcn() {
  tcn_ = 0u;
  clear_has_tcn();
}
inline ::google::protobuf::uint32 TaintQuery::tcn() const {
  // @@protoc_insertion_point(field_get:panda.TaintQuery.tcn)
  return tcn_;
}
inline void TaintQuery::set_tcn(::google::protobuf::uint32 value) {
  set_has_tcn();
  tcn_ = value;
  // @@protoc_insertion_point(field_set:panda.TaintQuery.tcn)
}

// required uint32 offset = 3;
inline bool TaintQuery::has_offset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TaintQuery::set_has_offset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TaintQuery::clear_has_offset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TaintQuery::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
inline ::google::protobuf::uint32 TaintQuery::offset() const {
  // @@protoc_insertion_point(field_get:panda.TaintQuery.offset)
  return offset_;
}
inline void TaintQuery::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:panda.TaintQuery.offset)
}

// optional .panda.TaintQueryUniqueLabelSet unique_label_set = 4;
inline bool TaintQuery::has_unique_label_set() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TaintQuery::set_has_unique_label_set() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TaintQuery::clear_has_unique_label_set() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TaintQuery::clear_unique_label_set() {
  if (unique_label_set_ != NULL) unique_label_set_->::panda::TaintQueryUniqueLabelSet::Clear();
  clear_has_unique_label_set();
}
inline const ::panda::TaintQueryUniqueLabelSet& TaintQuery::unique_label_set() const {
  // @@protoc_insertion_point(field_get:panda.TaintQuery.unique_label_set)
  return unique_label_set_ != NULL ? *unique_label_set_ : *default_instance_->unique_label_set_;
}
inline ::panda::TaintQueryUniqueLabelSet* TaintQuery::mutable_unique_label_set() {
  set_has_unique_label_set();
  if (unique_label_set_ == NULL) unique_label_set_ = new ::panda::TaintQueryUniqueLabelSet;
  // @@protoc_insertion_point(field_mutable:panda.TaintQuery.unique_label_set)
  return unique_label_set_;
}
inline ::panda::TaintQueryUniqueLabelSet* TaintQuery::release_unique_label_set() {
  clear_has_unique_label_set();
  ::panda::TaintQueryUniqueLabelSet* temp = unique_label_set_;
  unique_label_set_ = NULL;
  return temp;
}
inline void TaintQuery::set_allocated_unique_label_set(::panda::TaintQueryUniqueLabelSet* unique_label_set) {
  delete unique_label_set_;
  unique_label_set_ = unique_label_set;
  if (unique_label_set) {
    set_has_unique_label_set();
  } else {
    clear_has_unique_label_set();
  }
  // @@protoc_insertion_point(field_set_allocated:panda.TaintQuery.unique_label_set)
}

// -------------------------------------------------------------------

// AttackPoint

// required uint32 info = 1;
inline bool AttackPoint::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AttackPoint::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AttackPoint::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AttackPoint::clear_info() {
  info_ = 0u;
  clear_has_info();
}
inline ::google::protobuf::uint32 AttackPoint::info() const {
  // @@protoc_insertion_point(field_get:panda.AttackPoint.info)
  return info_;
}
inline void AttackPoint::set_info(::google::protobuf::uint32 value) {
  set_has_info();
  info_ = value;
  // @@protoc_insertion_point(field_set:panda.AttackPoint.info)
}

// required .panda.CallStack call_stack = 2;
inline bool AttackPoint::has_call_stack() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AttackPoint::set_has_call_stack() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AttackPoint::clear_has_call_stack() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AttackPoint::clear_call_stack() {
  if (call_stack_ != NULL) call_stack_->::panda::CallStack::Clear();
  clear_has_call_stack();
}
inline const ::panda::CallStack& AttackPoint::call_stack() const {
  // @@protoc_insertion_point(field_get:panda.AttackPoint.call_stack)
  return call_stack_ != NULL ? *call_stack_ : *default_instance_->call_stack_;
}
inline ::panda::CallStack* AttackPoint::mutable_call_stack() {
  set_has_call_stack();
  if (call_stack_ == NULL) call_stack_ = new ::panda::CallStack;
  // @@protoc_insertion_point(field_mutable:panda.AttackPoint.call_stack)
  return call_stack_;
}
inline ::panda::CallStack* AttackPoint::release_call_stack() {
  clear_has_call_stack();
  ::panda::CallStack* temp = call_stack_;
  call_stack_ = NULL;
  return temp;
}
inline void AttackPoint::set_allocated_call_stack(::panda::CallStack* call_stack) {
  delete call_stack_;
  call_stack_ = call_stack;
  if (call_stack) {
    set_has_call_stack();
  } else {
    clear_has_call_stack();
  }
  // @@protoc_insertion_point(field_set_allocated:panda.AttackPoint.call_stack)
}

// required .panda.SrcInfo src_info = 3;
inline bool AttackPoint::has_src_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AttackPoint::set_has_src_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AttackPoint::clear_has_src_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AttackPoint::clear_src_info() {
  if (src_info_ != NULL) src_info_->::panda::SrcInfo::Clear();
  clear_has_src_info();
}
inline const ::panda::SrcInfo& AttackPoint::src_info() const {
  // @@protoc_insertion_point(field_get:panda.AttackPoint.src_info)
  return src_info_ != NULL ? *src_info_ : *default_instance_->src_info_;
}
inline ::panda::SrcInfo* AttackPoint::mutable_src_info() {
  set_has_src_info();
  if (src_info_ == NULL) src_info_ = new ::panda::SrcInfo;
  // @@protoc_insertion_point(field_mutable:panda.AttackPoint.src_info)
  return src_info_;
}
inline ::panda::SrcInfo* AttackPoint::release_src_info() {
  clear_has_src_info();
  ::panda::SrcInfo* temp = src_info_;
  src_info_ = NULL;
  return temp;
}
inline void AttackPoint::set_allocated_src_info(::panda::SrcInfo* src_info) {
  delete src_info_;
  src_info_ = src_info;
  if (src_info) {
    set_has_src_info();
  } else {
    clear_has_src_info();
  }
  // @@protoc_insertion_point(field_set_allocated:panda.AttackPoint.src_info)
}

// -------------------------------------------------------------------

// TaintQueryHypercall

// required uint64 buf = 1;
inline bool TaintQueryHypercall::has_buf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaintQueryHypercall::set_has_buf() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TaintQueryHypercall::clear_has_buf() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TaintQueryHypercall::clear_buf() {
  buf_ = GOOGLE_ULONGLONG(0);
  clear_has_buf();
}
inline ::google::protobuf::uint64 TaintQueryHypercall::buf() const {
  // @@protoc_insertion_point(field_get:panda.TaintQueryHypercall.buf)
  return buf_;
}
inline void TaintQueryHypercall::set_buf(::google::protobuf::uint64 value) {
  set_has_buf();
  buf_ = value;
  // @@protoc_insertion_point(field_set:panda.TaintQueryHypercall.buf)
}

// required uint32 len = 2;
inline bool TaintQueryHypercall::has_len() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TaintQueryHypercall::set_has_len() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TaintQueryHypercall::clear_has_len() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TaintQueryHypercall::clear_len() {
  len_ = 0u;
  clear_has_len();
}
inline ::google::protobuf::uint32 TaintQueryHypercall::len() const {
  // @@protoc_insertion_point(field_get:panda.TaintQueryHypercall.len)
  return len_;
}
inline void TaintQueryHypercall::set_len(::google::protobuf::uint32 value) {
  set_has_len();
  len_ = value;
  // @@protoc_insertion_point(field_set:panda.TaintQueryHypercall.len)
}

// repeated uint32 data = 3;
inline int TaintQueryHypercall::data_size() const {
  return data_.size();
}
inline void TaintQueryHypercall::clear_data() {
  data_.Clear();
}
inline ::google::protobuf::uint32 TaintQueryHypercall::data(int index) const {
  // @@protoc_insertion_point(field_get:panda.TaintQueryHypercall.data)
  return data_.Get(index);
}
inline void TaintQueryHypercall::set_data(int index, ::google::protobuf::uint32 value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:panda.TaintQueryHypercall.data)
}
inline void TaintQueryHypercall::add_data(::google::protobuf::uint32 value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:panda.TaintQueryHypercall.data)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TaintQueryHypercall::data() const {
  // @@protoc_insertion_point(field_list:panda.TaintQueryHypercall.data)
  return data_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TaintQueryHypercall::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:panda.TaintQueryHypercall.data)
  return &data_;
}

// required uint32 num_tainted = 4;
inline bool TaintQueryHypercall::has_num_tainted() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TaintQueryHypercall::set_has_num_tainted() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TaintQueryHypercall::clear_has_num_tainted() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TaintQueryHypercall::clear_num_tainted() {
  num_tainted_ = 0u;
  clear_has_num_tainted();
}
inline ::google::protobuf::uint32 TaintQueryHypercall::num_tainted() const {
  // @@protoc_insertion_point(field_get:panda.TaintQueryHypercall.num_tainted)
  return num_tainted_;
}
inline void TaintQueryHypercall::set_num_tainted(::google::protobuf::uint32 value) {
  set_has_num_tainted();
  num_tainted_ = value;
  // @@protoc_insertion_point(field_set:panda.TaintQueryHypercall.num_tainted)
}

// required .panda.CallStack call_stack = 5;
inline bool TaintQueryHypercall::has_call_stack() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TaintQueryHypercall::set_has_call_stack() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TaintQueryHypercall::clear_has_call_stack() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TaintQueryHypercall::clear_call_stack() {
  if (call_stack_ != NULL) call_stack_->::panda::CallStack::Clear();
  clear_has_call_stack();
}
inline const ::panda::CallStack& TaintQueryHypercall::call_stack() const {
  // @@protoc_insertion_point(field_get:panda.TaintQueryHypercall.call_stack)
  return call_stack_ != NULL ? *call_stack_ : *default_instance_->call_stack_;
}
inline ::panda::CallStack* TaintQueryHypercall::mutable_call_stack() {
  set_has_call_stack();
  if (call_stack_ == NULL) call_stack_ = new ::panda::CallStack;
  // @@protoc_insertion_point(field_mutable:panda.TaintQueryHypercall.call_stack)
  return call_stack_;
}
inline ::panda::CallStack* TaintQueryHypercall::release_call_stack() {
  clear_has_call_stack();
  ::panda::CallStack* temp = call_stack_;
  call_stack_ = NULL;
  return temp;
}
inline void TaintQueryHypercall::set_allocated_call_stack(::panda::CallStack* call_stack) {
  delete call_stack_;
  call_stack_ = call_stack;
  if (call_stack) {
    set_has_call_stack();
  } else {
    clear_has_call_stack();
  }
  // @@protoc_insertion_point(field_set_allocated:panda.TaintQueryHypercall.call_stack)
}

// required .panda.SrcInfo src_info = 6;
inline bool TaintQueryHypercall::has_src_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TaintQueryHypercall::set_has_src_info() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TaintQueryHypercall::clear_has_src_info() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TaintQueryHypercall::clear_src_info() {
  if (src_info_ != NULL) src_info_->::panda::SrcInfo::Clear();
  clear_has_src_info();
}
inline const ::panda::SrcInfo& TaintQueryHypercall::src_info() const {
  // @@protoc_insertion_point(field_get:panda.TaintQueryHypercall.src_info)
  return src_info_ != NULL ? *src_info_ : *default_instance_->src_info_;
}
inline ::panda::SrcInfo* TaintQueryHypercall::mutable_src_info() {
  set_has_src_info();
  if (src_info_ == NULL) src_info_ = new ::panda::SrcInfo;
  // @@protoc_insertion_point(field_mutable:panda.TaintQueryHypercall.src_info)
  return src_info_;
}
inline ::panda::SrcInfo* TaintQueryHypercall::release_src_info() {
  clear_has_src_info();
  ::panda::SrcInfo* temp = src_info_;
  src_info_ = NULL;
  return temp;
}
inline void TaintQueryHypercall::set_allocated_src_info(::panda::SrcInfo* src_info) {
  delete src_info_;
  src_info_ = src_info;
  if (src_info) {
    set_has_src_info();
  } else {
    clear_has_src_info();
  }
  // @@protoc_insertion_point(field_set_allocated:panda.TaintQueryHypercall.src_info)
}

// repeated .panda.TaintQuery taint_query = 7;
inline int TaintQueryHypercall::taint_query_size() const {
  return taint_query_.size();
}
inline void TaintQueryHypercall::clear_taint_query() {
  taint_query_.Clear();
}
inline const ::panda::TaintQuery& TaintQueryHypercall::taint_query(int index) const {
  // @@protoc_insertion_point(field_get:panda.TaintQueryHypercall.taint_query)
  return taint_query_.Get(index);
}
inline ::panda::TaintQuery* TaintQueryHypercall::mutable_taint_query(int index) {
  // @@protoc_insertion_point(field_mutable:panda.TaintQueryHypercall.taint_query)
  return taint_query_.Mutable(index);
}
inline ::panda::TaintQuery* TaintQueryHypercall::add_taint_query() {
  // @@protoc_insertion_point(field_add:panda.TaintQueryHypercall.taint_query)
  return taint_query_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::panda::TaintQuery >&
TaintQueryHypercall::taint_query() const {
  // @@protoc_insertion_point(field_list:panda.TaintQueryHypercall.taint_query)
  return taint_query_;
}
inline ::google::protobuf::RepeatedPtrField< ::panda::TaintQuery >*
TaintQueryHypercall::mutable_taint_query() {
  // @@protoc_insertion_point(field_mutable_list:panda.TaintQueryHypercall.taint_query)
  return &taint_query_;
}

// -------------------------------------------------------------------

// TaintedBranch

// required .panda.CallStack call_stack = 1;
inline bool TaintedBranch::has_call_stack() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaintedBranch::set_has_call_stack() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TaintedBranch::clear_has_call_stack() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TaintedBranch::clear_call_stack() {
  if (call_stack_ != NULL) call_stack_->::panda::CallStack::Clear();
  clear_has_call_stack();
}
inline const ::panda::CallStack& TaintedBranch::call_stack() const {
  // @@protoc_insertion_point(field_get:panda.TaintedBranch.call_stack)
  return call_stack_ != NULL ? *call_stack_ : *default_instance_->call_stack_;
}
inline ::panda::CallStack* TaintedBranch::mutable_call_stack() {
  set_has_call_stack();
  if (call_stack_ == NULL) call_stack_ = new ::panda::CallStack;
  // @@protoc_insertion_point(field_mutable:panda.TaintedBranch.call_stack)
  return call_stack_;
}
inline ::panda::CallStack* TaintedBranch::release_call_stack() {
  clear_has_call_stack();
  ::panda::CallStack* temp = call_stack_;
  call_stack_ = NULL;
  return temp;
}
inline void TaintedBranch::set_allocated_call_stack(::panda::CallStack* call_stack) {
  delete call_stack_;
  call_stack_ = call_stack;
  if (call_stack) {
    set_has_call_stack();
  } else {
    clear_has_call_stack();
  }
  // @@protoc_insertion_point(field_set_allocated:panda.TaintedBranch.call_stack)
}

// repeated .panda.TaintQuery taint_query = 2;
inline int TaintedBranch::taint_query_size() const {
  return taint_query_.size();
}
inline void TaintedBranch::clear_taint_query() {
  taint_query_.Clear();
}
inline const ::panda::TaintQuery& TaintedBranch::taint_query(int index) const {
  // @@protoc_insertion_point(field_get:panda.TaintedBranch.taint_query)
  return taint_query_.Get(index);
}
inline ::panda::TaintQuery* TaintedBranch::mutable_taint_query(int index) {
  // @@protoc_insertion_point(field_mutable:panda.TaintedBranch.taint_query)
  return taint_query_.Mutable(index);
}
inline ::panda::TaintQuery* TaintedBranch::add_taint_query() {
  // @@protoc_insertion_point(field_add:panda.TaintedBranch.taint_query)
  return taint_query_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::panda::TaintQuery >&
TaintedBranch::taint_query() const {
  // @@protoc_insertion_point(field_list:panda.TaintedBranch.taint_query)
  return taint_query_;
}
inline ::google::protobuf::RepeatedPtrField< ::panda::TaintQuery >*
TaintedBranch::mutable_taint_query() {
  // @@protoc_insertion_point(field_mutable_list:panda.TaintedBranch.taint_query)
  return &taint_query_;
}

// -------------------------------------------------------------------

// TaintedBranchSummary

// required uint64 asid = 1;
inline bool TaintedBranchSummary::has_asid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaintedBranchSummary::set_has_asid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TaintedBranchSummary::clear_has_asid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TaintedBranchSummary::clear_asid() {
  asid_ = GOOGLE_ULONGLONG(0);
  clear_has_asid();
}
inline ::google::protobuf::uint64 TaintedBranchSummary::asid() const {
  // @@protoc_insertion_point(field_get:panda.TaintedBranchSummary.asid)
  return asid_;
}
inline void TaintedBranchSummary::set_asid(::google::protobuf::uint64 value) {
  set_has_asid();
  asid_ = value;
  // @@protoc_insertion_point(field_set:panda.TaintedBranchSummary.asid)
}

// required uint64 pc = 2;
inline bool TaintedBranchSummary::has_pc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TaintedBranchSummary::set_has_pc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TaintedBranchSummary::clear_has_pc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TaintedBranchSummary::clear_pc() {
  pc_ = GOOGLE_ULONGLONG(0);
  clear_has_pc();
}
inline ::google::protobuf::uint64 TaintedBranchSummary::pc() const {
  // @@protoc_insertion_point(field_get:panda.TaintedBranchSummary.pc)
  return pc_;
}
inline void TaintedBranchSummary::set_pc(::google::protobuf::uint64 value) {
  set_has_pc();
  pc_ = value;
  // @@protoc_insertion_point(field_set:panda.TaintedBranchSummary.pc)
}

// -------------------------------------------------------------------

// TaintedInstr

// required .panda.CallStack call_stack = 1;
inline bool TaintedInstr::has_call_stack() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaintedInstr::set_has_call_stack() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TaintedInstr::clear_has_call_stack() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TaintedInstr::clear_call_stack() {
  if (call_stack_ != NULL) call_stack_->::panda::CallStack::Clear();
  clear_has_call_stack();
}
inline const ::panda::CallStack& TaintedInstr::call_stack() const {
  // @@protoc_insertion_point(field_get:panda.TaintedInstr.call_stack)
  return call_stack_ != NULL ? *call_stack_ : *default_instance_->call_stack_;
}
inline ::panda::CallStack* TaintedInstr::mutable_call_stack() {
  set_has_call_stack();
  if (call_stack_ == NULL) call_stack_ = new ::panda::CallStack;
  // @@protoc_insertion_point(field_mutable:panda.TaintedInstr.call_stack)
  return call_stack_;
}
inline ::panda::CallStack* TaintedInstr::release_call_stack() {
  clear_has_call_stack();
  ::panda::CallStack* temp = call_stack_;
  call_stack_ = NULL;
  return temp;
}
inline void TaintedInstr::set_allocated_call_stack(::panda::CallStack* call_stack) {
  delete call_stack_;
  call_stack_ = call_stack;
  if (call_stack) {
    set_has_call_stack();
  } else {
    clear_has_call_stack();
  }
  // @@protoc_insertion_point(field_set_allocated:panda.TaintedInstr.call_stack)
}

// repeated .panda.TaintQuery taint_query = 2;
inline int TaintedInstr::taint_query_size() const {
  return taint_query_.size();
}
inline void TaintedInstr::clear_taint_query() {
  taint_query_.Clear();
}
inline const ::panda::TaintQuery& TaintedInstr::taint_query(int index) const {
  // @@protoc_insertion_point(field_get:panda.TaintedInstr.taint_query)
  return taint_query_.Get(index);
}
inline ::panda::TaintQuery* TaintedInstr::mutable_taint_query(int index) {
  // @@protoc_insertion_point(field_mutable:panda.TaintedInstr.taint_query)
  return taint_query_.Mutable(index);
}
inline ::panda::TaintQuery* TaintedInstr::add_taint_query() {
  // @@protoc_insertion_point(field_add:panda.TaintedInstr.taint_query)
  return taint_query_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::panda::TaintQuery >&
TaintedInstr::taint_query() const {
  // @@protoc_insertion_point(field_list:panda.TaintedInstr.taint_query)
  return taint_query_;
}
inline ::google::protobuf::RepeatedPtrField< ::panda::TaintQuery >*
TaintedInstr::mutable_taint_query() {
  // @@protoc_insertion_point(field_mutable_list:panda.TaintedInstr.taint_query)
  return &taint_query_;
}

// -------------------------------------------------------------------

// TaintedInstrSummary

// required uint64 asid = 1;
inline bool TaintedInstrSummary::has_asid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaintedInstrSummary::set_has_asid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TaintedInstrSummary::clear_has_asid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TaintedInstrSummary::clear_asid() {
  asid_ = GOOGLE_ULONGLONG(0);
  clear_has_asid();
}
inline ::google::protobuf::uint64 TaintedInstrSummary::asid() const {
  // @@protoc_insertion_point(field_get:panda.TaintedInstrSummary.asid)
  return asid_;
}
inline void TaintedInstrSummary::set_asid(::google::protobuf::uint64 value) {
  set_has_asid();
  asid_ = value;
  // @@protoc_insertion_point(field_set:panda.TaintedInstrSummary.asid)
}

// required uint64 pc = 2;
inline bool TaintedInstrSummary::has_pc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TaintedInstrSummary::set_has_pc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TaintedInstrSummary::clear_has_pc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TaintedInstrSummary::clear_pc() {
  pc_ = GOOGLE_ULONGLONG(0);
  clear_has_pc();
}
inline ::google::protobuf::uint64 TaintedInstrSummary::pc() const {
  // @@protoc_insertion_point(field_get:panda.TaintedInstrSummary.pc)
  return pc_;
}
inline void TaintedInstrSummary::set_pc(::google::protobuf::uint64 value) {
  set_has_pc();
  pc_ = value;
  // @@protoc_insertion_point(field_set:panda.TaintedInstrSummary.pc)
}

// -------------------------------------------------------------------

// LogEntry

// required uint64 pc = 1;
inline bool LogEntry::has_pc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogEntry::set_has_pc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogEntry::clear_has_pc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogEntry::clear_pc() {
  pc_ = GOOGLE_ULONGLONG(0);
  clear_has_pc();
}
inline ::google::protobuf::uint64 LogEntry::pc() const {
  // @@protoc_insertion_point(field_get:panda.LogEntry.pc)
  return pc_;
}
inline void LogEntry::set_pc(::google::protobuf::uint64 value) {
  set_has_pc();
  pc_ = value;
  // @@protoc_insertion_point(field_set:panda.LogEntry.pc)
}

// required uint64 instr = 2;
inline bool LogEntry::has_instr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogEntry::set_has_instr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogEntry::clear_has_instr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogEntry::clear_instr() {
  instr_ = GOOGLE_ULONGLONG(0);
  clear_has_instr();
}
inline ::google::protobuf::uint64 LogEntry::instr() const {
  // @@protoc_insertion_point(field_get:panda.LogEntry.instr)
  return instr_;
}
inline void LogEntry::set_instr(::google::protobuf::uint64 value) {
  set_has_instr();
  instr_ = value;
  // @@protoc_insertion_point(field_set:panda.LogEntry.instr)
}

// optional .panda.AsidInfo asid_info = 40;
inline bool LogEntry::has_asid_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogEntry::set_has_asid_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogEntry::clear_has_asid_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogEntry::clear_asid_info() {
  if (asid_info_ != NULL) asid_info_->::panda::AsidInfo::Clear();
  clear_has_asid_info();
}
inline const ::panda::AsidInfo& LogEntry::asid_info() const {
  // @@protoc_insertion_point(field_get:panda.LogEntry.asid_info)
  return asid_info_ != NULL ? *asid_info_ : *default_instance_->asid_info_;
}
inline ::panda::AsidInfo* LogEntry::mutable_asid_info() {
  set_has_asid_info();
  if (asid_info_ == NULL) asid_info_ = new ::panda::AsidInfo;
  // @@protoc_insertion_point(field_mutable:panda.LogEntry.asid_info)
  return asid_info_;
}
inline ::panda::AsidInfo* LogEntry::release_asid_info() {
  clear_has_asid_info();
  ::panda::AsidInfo* temp = asid_info_;
  asid_info_ = NULL;
  return temp;
}
inline void LogEntry::set_allocated_asid_info(::panda::AsidInfo* asid_info) {
  delete asid_info_;
  asid_info_ = asid_info;
  if (asid_info) {
    set_has_asid_info();
  } else {
    clear_has_asid_info();
  }
  // @@protoc_insertion_point(field_set_allocated:panda.LogEntry.asid_info)
}

// optional uint64 asid = 3;
inline bool LogEntry::has_asid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogEntry::set_has_asid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogEntry::clear_has_asid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogEntry::clear_asid() {
  asid_ = GOOGLE_ULONGLONG(0);
  clear_has_asid();
}
inline ::google::protobuf::uint64 LogEntry::asid() const {
  // @@protoc_insertion_point(field_get:panda.LogEntry.asid)
  return asid_;
}
inline void LogEntry::set_asid(::google::protobuf::uint64 value) {
  set_has_asid();
  asid_ = value;
  // @@protoc_insertion_point(field_set:panda.LogEntry.asid)
}

// optional .panda.CallStack call_stack = 10;
inline bool LogEntry::has_call_stack() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogEntry::set_has_call_stack() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogEntry::clear_has_call_stack() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogEntry::clear_call_stack() {
  if (call_stack_ != NULL) call_stack_->::panda::CallStack::Clear();
  clear_has_call_stack();
}
inline const ::panda::CallStack& LogEntry::call_stack() const {
  // @@protoc_insertion_point(field_get:panda.LogEntry.call_stack)
  return call_stack_ != NULL ? *call_stack_ : *default_instance_->call_stack_;
}
inline ::panda::CallStack* LogEntry::mutable_call_stack() {
  set_has_call_stack();
  if (call_stack_ == NULL) call_stack_ = new ::panda::CallStack;
  // @@protoc_insertion_point(field_mutable:panda.LogEntry.call_stack)
  return call_stack_;
}
inline ::panda::CallStack* LogEntry::release_call_stack() {
  clear_has_call_stack();
  ::panda::CallStack* temp = call_stack_;
  call_stack_ = NULL;
  return temp;
}
inline void LogEntry::set_allocated_call_stack(::panda::CallStack* call_stack) {
  delete call_stack_;
  call_stack_ = call_stack;
  if (call_stack) {
    set_has_call_stack();
  } else {
    clear_has_call_stack();
  }
  // @@protoc_insertion_point(field_set_allocated:panda.LogEntry.call_stack)
}

// optional .panda.DwarfCall dwarf_call = 66;
inline bool LogEntry::has_dwarf_call() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LogEntry::set_has_dwarf_call() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LogEntry::clear_has_dwarf_call() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LogEntry::clear_dwarf_call() {
  if (dwarf_call_ != NULL) dwarf_call_->::panda::DwarfCall::Clear();
  clear_has_dwarf_call();
}
inline const ::panda::DwarfCall& LogEntry::dwarf_call() const {
  // @@protoc_insertion_point(field_get:panda.LogEntry.dwarf_call)
  return dwarf_call_ != NULL ? *dwarf_call_ : *default_instance_->dwarf_call_;
}
inline ::panda::DwarfCall* LogEntry::mutable_dwarf_call() {
  set_has_dwarf_call();
  if (dwarf_call_ == NULL) dwarf_call_ = new ::panda::DwarfCall;
  // @@protoc_insertion_point(field_mutable:panda.LogEntry.dwarf_call)
  return dwarf_call_;
}
inline ::panda::DwarfCall* LogEntry::release_dwarf_call() {
  clear_has_dwarf_call();
  ::panda::DwarfCall* temp = dwarf_call_;
  dwarf_call_ = NULL;
  return temp;
}
inline void LogEntry::set_allocated_dwarf_call(::panda::DwarfCall* dwarf_call) {
  delete dwarf_call_;
  dwarf_call_ = dwarf_call;
  if (dwarf_call) {
    set_has_dwarf_call();
  } else {
    clear_has_dwarf_call();
  }
  // @@protoc_insertion_point(field_set_allocated:panda.LogEntry.dwarf_call)
}

// optional .panda.DwarfCall dwarf_ret = 67;
inline bool LogEntry::has_dwarf_ret() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LogEntry::set_has_dwarf_ret() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LogEntry::clear_has_dwarf_ret() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LogEntry::clear_dwarf_ret() {
  if (dwarf_ret_ != NULL) dwarf_ret_->::panda::DwarfCall::Clear();
  clear_has_dwarf_ret();
}
inline const ::panda::DwarfCall& LogEntry::dwarf_ret() const {
  // @@protoc_insertion_point(field_get:panda.LogEntry.dwarf_ret)
  return dwarf_ret_ != NULL ? *dwarf_ret_ : *default_instance_->dwarf_ret_;
}
inline ::panda::DwarfCall* LogEntry::mutable_dwarf_ret() {
  set_has_dwarf_ret();
  if (dwarf_ret_ == NULL) dwarf_ret_ = new ::panda::DwarfCall;
  // @@protoc_insertion_point(field_mutable:panda.LogEntry.dwarf_ret)
  return dwarf_ret_;
}
inline ::panda::DwarfCall* LogEntry::release_dwarf_ret() {
  clear_has_dwarf_ret();
  ::panda::DwarfCall* temp = dwarf_ret_;
  dwarf_ret_ = NULL;
  return temp;
}
inline void LogEntry::set_allocated_dwarf_ret(::panda::DwarfCall* dwarf_ret) {
  delete dwarf_ret_;
  dwarf_ret_ = dwarf_ret;
  if (dwarf_ret) {
    set_has_dwarf_ret();
  } else {
    clear_has_dwarf_ret();
  }
  // @@protoc_insertion_point(field_set_allocated:panda.LogEntry.dwarf_ret)
}

// optional uint64 taint_label_virtual_addr = 6;
inline bool LogEntry::has_taint_label_virtual_addr() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LogEntry::set_has_taint_label_virtual_addr() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LogEntry::clear_has_taint_label_virtual_addr() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LogEntry::clear_taint_label_virtual_addr() {
  taint_label_virtual_addr_ = GOOGLE_ULONGLONG(0);
  clear_has_taint_label_virtual_addr();
}
inline ::google::protobuf::uint64 LogEntry::taint_label_virtual_addr() const {
  // @@protoc_insertion_point(field_get:panda.LogEntry.taint_label_virtual_addr)
  return taint_label_virtual_addr_;
}
inline void LogEntry::set_taint_label_virtual_addr(::google::protobuf::uint64 value) {
  set_has_taint_label_virtual_addr();
  taint_label_virtual_addr_ = value;
  // @@protoc_insertion_point(field_set:panda.LogEntry.taint_label_virtual_addr)
}

// optional uint64 taint_label_physical_addr = 7;
inline bool LogEntry::has_taint_label_physical_addr() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LogEntry::set_has_taint_label_physical_addr() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LogEntry::clear_has_taint_label_physical_addr() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LogEntry::clear_taint_label_physical_addr() {
  taint_label_physical_addr_ = GOOGLE_ULONGLONG(0);
  clear_has_taint_label_physical_addr();
}
inline ::google::protobuf::uint64 LogEntry::taint_label_physical_addr() const {
  // @@protoc_insertion_point(field_get:panda.LogEntry.taint_label_physical_addr)
  return taint_label_physical_addr_;
}
inline void LogEntry::set_taint_label_physical_addr(::google::protobuf::uint64 value) {
  set_has_taint_label_physical_addr();
  taint_label_physical_addr_ = value;
  // @@protoc_insertion_point(field_set:panda.LogEntry.taint_label_physical_addr)
}

// optional uint32 taint_label_number = 8;
inline bool LogEntry::has_taint_label_number() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LogEntry::set_has_taint_label_number() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LogEntry::clear_has_taint_label_number() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LogEntry::clear_taint_label_number() {
  taint_label_number_ = 0u;
  clear_has_taint_label_number();
}
inline ::google::protobuf::uint32 LogEntry::taint_label_number() const {
  // @@protoc_insertion_point(field_get:panda.LogEntry.taint_label_number)
  return taint_label_number_;
}
inline void LogEntry::set_taint_label_number(::google::protobuf::uint32 value) {
  set_has_taint_label_number();
  taint_label_number_ = value;
  // @@protoc_insertion_point(field_set:panda.LogEntry.taint_label_number)
}

// optional .panda.TaintQueryPri taint_query_pri = 68;
inline bool LogEntry::has_taint_query_pri() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LogEntry::set_has_taint_query_pri() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LogEntry::clear_has_taint_query_pri() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LogEntry::clear_taint_query_pri() {
  if (taint_query_pri_ != NULL) taint_query_pri_->::panda::TaintQueryPri::Clear();
  clear_has_taint_query_pri();
}
inline const ::panda::TaintQueryPri& LogEntry::taint_query_pri() const {
  // @@protoc_insertion_point(field_get:panda.LogEntry.taint_query_pri)
  return taint_query_pri_ != NULL ? *taint_query_pri_ : *default_instance_->taint_query_pri_;
}
inline ::panda::TaintQueryPri* LogEntry::mutable_taint_query_pri() {
  set_has_taint_query_pri();
  if (taint_query_pri_ == NULL) taint_query_pri_ = new ::panda::TaintQueryPri;
  // @@protoc_insertion_point(field_mutable:panda.LogEntry.taint_query_pri)
  return taint_query_pri_;
}
inline ::panda::TaintQueryPri* LogEntry::release_taint_query_pri() {
  clear_has_taint_query_pri();
  ::panda::TaintQueryPri* temp = taint_query_pri_;
  taint_query_pri_ = NULL;
  return temp;
}
inline void LogEntry::set_allocated_taint_query_pri(::panda::TaintQueryPri* taint_query_pri) {
  delete taint_query_pri_;
  taint_query_pri_ = taint_query_pri;
  if (taint_query_pri) {
    set_has_taint_query_pri();
  } else {
    clear_has_taint_query_pri();
  }
  // @@protoc_insertion_point(field_set_allocated:panda.LogEntry.taint_query_pri)
}

// optional .panda.AttackPointPri attack_point_pri = 69;
inline bool LogEntry::has_attack_point_pri() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LogEntry::set_has_attack_point_pri() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LogEntry::clear_has_attack_point_pri() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LogEntry::clear_attack_point_pri() {
  if (attack_point_pri_ != NULL) attack_point_pri_->::panda::AttackPointPri::Clear();
  clear_has_attack_point_pri();
}
inline const ::panda::AttackPointPri& LogEntry::attack_point_pri() const {
  // @@protoc_insertion_point(field_get:panda.LogEntry.attack_point_pri)
  return attack_point_pri_ != NULL ? *attack_point_pri_ : *default_instance_->attack_point_pri_;
}
inline ::panda::AttackPointPri* LogEntry::mutable_attack_point_pri() {
  set_has_attack_point_pri();
  if (attack_point_pri_ == NULL) attack_point_pri_ = new ::panda::AttackPointPri;
  // @@protoc_insertion_point(field_mutable:panda.LogEntry.attack_point_pri)
  return attack_point_pri_;
}
inline ::panda::AttackPointPri* LogEntry::release_attack_point_pri() {
  clear_has_attack_point_pri();
  ::panda::AttackPointPri* temp = attack_point_pri_;
  attack_point_pri_ = NULL;
  return temp;
}
inline void LogEntry::set_allocated_attack_point_pri(::panda::AttackPointPri* attack_point_pri) {
  delete attack_point_pri_;
  attack_point_pri_ = attack_point_pri;
  if (attack_point_pri) {
    set_has_attack_point_pri();
  } else {
    clear_has_attack_point_pri();
  }
  // @@protoc_insertion_point(field_set_allocated:panda.LogEntry.attack_point_pri)
}

// optional .panda.SrcInfoPri pri_trace_src_info = 70;
inline bool LogEntry::has_pri_trace_src_info() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LogEntry::set_has_pri_trace_src_info() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LogEntry::clear_has_pri_trace_src_info() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LogEntry::clear_pri_trace_src_info() {
  if (pri_trace_src_info_ != NULL) pri_trace_src_info_->::panda::SrcInfoPri::Clear();
  clear_has_pri_trace_src_info();
}
inline const ::panda::SrcInfoPri& LogEntry::pri_trace_src_info() const {
  // @@protoc_insertion_point(field_get:panda.LogEntry.pri_trace_src_info)
  return pri_trace_src_info_ != NULL ? *pri_trace_src_info_ : *default_instance_->pri_trace_src_info_;
}
inline ::panda::SrcInfoPri* LogEntry::mutable_pri_trace_src_info() {
  set_has_pri_trace_src_info();
  if (pri_trace_src_info_ == NULL) pri_trace_src_info_ = new ::panda::SrcInfoPri;
  // @@protoc_insertion_point(field_mutable:panda.LogEntry.pri_trace_src_info)
  return pri_trace_src_info_;
}
inline ::panda::SrcInfoPri* LogEntry::release_pri_trace_src_info() {
  clear_has_pri_trace_src_info();
  ::panda::SrcInfoPri* temp = pri_trace_src_info_;
  pri_trace_src_info_ = NULL;
  return temp;
}
inline void LogEntry::set_allocated_pri_trace_src_info(::panda::SrcInfoPri* pri_trace_src_info) {
  delete pri_trace_src_info_;
  pri_trace_src_info_ = pri_trace_src_info;
  if (pri_trace_src_info) {
    set_has_pri_trace_src_info();
  } else {
    clear_has_pri_trace_src_info();
  }
  // @@protoc_insertion_point(field_set_allocated:panda.LogEntry.pri_trace_src_info)
}

// optional .panda.TaintQueryHypercall taint_query_hypercall = 38;
inline bool LogEntry::has_taint_query_hypercall() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void LogEntry::set_has_taint_query_hypercall() {
  _has_bits_[0] |= 0x00002000u;
}
inline void LogEntry::clear_has_taint_query_hypercall() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void LogEntry::clear_taint_query_hypercall() {
  if (taint_query_hypercall_ != NULL) taint_query_hypercall_->::panda::TaintQueryHypercall::Clear();
  clear_has_taint_query_hypercall();
}
inline const ::panda::TaintQueryHypercall& LogEntry::taint_query_hypercall() const {
  // @@protoc_insertion_point(field_get:panda.LogEntry.taint_query_hypercall)
  return taint_query_hypercall_ != NULL ? *taint_query_hypercall_ : *default_instance_->taint_query_hypercall_;
}
inline ::panda::TaintQueryHypercall* LogEntry::mutable_taint_query_hypercall() {
  set_has_taint_query_hypercall();
  if (taint_query_hypercall_ == NULL) taint_query_hypercall_ = new ::panda::TaintQueryHypercall;
  // @@protoc_insertion_point(field_mutable:panda.LogEntry.taint_query_hypercall)
  return taint_query_hypercall_;
}
inline ::panda::TaintQueryHypercall* LogEntry::release_taint_query_hypercall() {
  clear_has_taint_query_hypercall();
  ::panda::TaintQueryHypercall* temp = taint_query_hypercall_;
  taint_query_hypercall_ = NULL;
  return temp;
}
inline void LogEntry::set_allocated_taint_query_hypercall(::panda::TaintQueryHypercall* taint_query_hypercall) {
  delete taint_query_hypercall_;
  taint_query_hypercall_ = taint_query_hypercall;
  if (taint_query_hypercall) {
    set_has_taint_query_hypercall();
  } else {
    clear_has_taint_query_hypercall();
  }
  // @@protoc_insertion_point(field_set_allocated:panda.LogEntry.taint_query_hypercall)
}

// optional .panda.AttackPoint attack_point = 39;
inline bool LogEntry::has_attack_point() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void LogEntry::set_has_attack_point() {
  _has_bits_[0] |= 0x00004000u;
}
inline void LogEntry::clear_has_attack_point() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void LogEntry::clear_attack_point() {
  if (attack_point_ != NULL) attack_point_->::panda::AttackPoint::Clear();
  clear_has_attack_point();
}
inline const ::panda::AttackPoint& LogEntry::attack_point() const {
  // @@protoc_insertion_point(field_get:panda.LogEntry.attack_point)
  return attack_point_ != NULL ? *attack_point_ : *default_instance_->attack_point_;
}
inline ::panda::AttackPoint* LogEntry::mutable_attack_point() {
  set_has_attack_point();
  if (attack_point_ == NULL) attack_point_ = new ::panda::AttackPoint;
  // @@protoc_insertion_point(field_mutable:panda.LogEntry.attack_point)
  return attack_point_;
}
inline ::panda::AttackPoint* LogEntry::release_attack_point() {
  clear_has_attack_point();
  ::panda::AttackPoint* temp = attack_point_;
  attack_point_ = NULL;
  return temp;
}
inline void LogEntry::set_allocated_attack_point(::panda::AttackPoint* attack_point) {
  delete attack_point_;
  attack_point_ = attack_point;
  if (attack_point) {
    set_has_attack_point();
  } else {
    clear_has_attack_point();
  }
  // @@protoc_insertion_point(field_set_allocated:panda.LogEntry.attack_point)
}

// optional .panda.TaintedBranch tainted_branch = 36;
inline bool LogEntry::has_tainted_branch() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void LogEntry::set_has_tainted_branch() {
  _has_bits_[0] |= 0x00008000u;
}
inline void LogEntry::clear_has_tainted_branch() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void LogEntry::clear_tainted_branch() {
  if (tainted_branch_ != NULL) tainted_branch_->::panda::TaintedBranch::Clear();
  clear_has_tainted_branch();
}
inline const ::panda::TaintedBranch& LogEntry::tainted_branch() const {
  // @@protoc_insertion_point(field_get:panda.LogEntry.tainted_branch)
  return tainted_branch_ != NULL ? *tainted_branch_ : *default_instance_->tainted_branch_;
}
inline ::panda::TaintedBranch* LogEntry::mutable_tainted_branch() {
  set_has_tainted_branch();
  if (tainted_branch_ == NULL) tainted_branch_ = new ::panda::TaintedBranch;
  // @@protoc_insertion_point(field_mutable:panda.LogEntry.tainted_branch)
  return tainted_branch_;
}
inline ::panda::TaintedBranch* LogEntry::release_tainted_branch() {
  clear_has_tainted_branch();
  ::panda::TaintedBranch* temp = tainted_branch_;
  tainted_branch_ = NULL;
  return temp;
}
inline void LogEntry::set_allocated_tainted_branch(::panda::TaintedBranch* tainted_branch) {
  delete tainted_branch_;
  tainted_branch_ = tainted_branch;
  if (tainted_branch) {
    set_has_tainted_branch();
  } else {
    clear_has_tainted_branch();
  }
  // @@protoc_insertion_point(field_set_allocated:panda.LogEntry.tainted_branch)
}

// optional .panda.TaintedBranchSummary tainted_branch_summary = 72;
inline bool LogEntry::has_tainted_branch_summary() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void LogEntry::set_has_tainted_branch_summary() {
  _has_bits_[0] |= 0x00010000u;
}
inline void LogEntry::clear_has_tainted_branch_summary() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void LogEntry::clear_tainted_branch_summary() {
  if (tainted_branch_summary_ != NULL) tainted_branch_summary_->::panda::TaintedBranchSummary::Clear();
  clear_has_tainted_branch_summary();
}
inline const ::panda::TaintedBranchSummary& LogEntry::tainted_branch_summary() const {
  // @@protoc_insertion_point(field_get:panda.LogEntry.tainted_branch_summary)
  return tainted_branch_summary_ != NULL ? *tainted_branch_summary_ : *default_instance_->tainted_branch_summary_;
}
inline ::panda::TaintedBranchSummary* LogEntry::mutable_tainted_branch_summary() {
  set_has_tainted_branch_summary();
  if (tainted_branch_summary_ == NULL) tainted_branch_summary_ = new ::panda::TaintedBranchSummary;
  // @@protoc_insertion_point(field_mutable:panda.LogEntry.tainted_branch_summary)
  return tainted_branch_summary_;
}
inline ::panda::TaintedBranchSummary* LogEntry::release_tainted_branch_summary() {
  clear_has_tainted_branch_summary();
  ::panda::TaintedBranchSummary* temp = tainted_branch_summary_;
  tainted_branch_summary_ = NULL;
  return temp;
}
inline void LogEntry::set_allocated_tainted_branch_summary(::panda::TaintedBranchSummary* tainted_branch_summary) {
  delete tainted_branch_summary_;
  tainted_branch_summary_ = tainted_branch_summary;
  if (tainted_branch_summary) {
    set_has_tainted_branch_summary();
  } else {
    clear_has_tainted_branch_summary();
  }
  // @@protoc_insertion_point(field_set_allocated:panda.LogEntry.tainted_branch_summary)
}

// optional .panda.TaintedInstr tainted_instr = 37;
inline bool LogEntry::has_tainted_instr() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void LogEntry::set_has_tainted_instr() {
  _has_bits_[0] |= 0x00020000u;
}
inline void LogEntry::clear_has_tainted_instr() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void LogEntry::clear_tainted_instr() {
  if (tainted_instr_ != NULL) tainted_instr_->::panda::TaintedInstr::Clear();
  clear_has_tainted_instr();
}
inline const ::panda::TaintedInstr& LogEntry::tainted_instr() const {
  // @@protoc_insertion_point(field_get:panda.LogEntry.tainted_instr)
  return tainted_instr_ != NULL ? *tainted_instr_ : *default_instance_->tainted_instr_;
}
inline ::panda::TaintedInstr* LogEntry::mutable_tainted_instr() {
  set_has_tainted_instr();
  if (tainted_instr_ == NULL) tainted_instr_ = new ::panda::TaintedInstr;
  // @@protoc_insertion_point(field_mutable:panda.LogEntry.tainted_instr)
  return tainted_instr_;
}
inline ::panda::TaintedInstr* LogEntry::release_tainted_instr() {
  clear_has_tainted_instr();
  ::panda::TaintedInstr* temp = tainted_instr_;
  tainted_instr_ = NULL;
  return temp;
}
inline void LogEntry::set_allocated_tainted_instr(::panda::TaintedInstr* tainted_instr) {
  delete tainted_instr_;
  tainted_instr_ = tainted_instr;
  if (tainted_instr) {
    set_has_tainted_instr();
  } else {
    clear_has_tainted_instr();
  }
  // @@protoc_insertion_point(field_set_allocated:panda.LogEntry.tainted_instr)
}

// optional .panda.TaintedInstrSummary tainted_instr_summary = 56;
inline bool LogEntry::has_tainted_instr_summary() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void LogEntry::set_has_tainted_instr_summary() {
  _has_bits_[0] |= 0x00040000u;
}
inline void LogEntry::clear_has_tainted_instr_summary() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void LogEntry::clear_tainted_instr_summary() {
  if (tainted_instr_summary_ != NULL) tainted_instr_summary_->::panda::TaintedInstrSummary::Clear();
  clear_has_tainted_instr_summary();
}
inline const ::panda::TaintedInstrSummary& LogEntry::tainted_instr_summary() const {
  // @@protoc_insertion_point(field_get:panda.LogEntry.tainted_instr_summary)
  return tainted_instr_summary_ != NULL ? *tainted_instr_summary_ : *default_instance_->tainted_instr_summary_;
}
inline ::panda::TaintedInstrSummary* LogEntry::mutable_tainted_instr_summary() {
  set_has_tainted_instr_summary();
  if (tainted_instr_summary_ == NULL) tainted_instr_summary_ = new ::panda::TaintedInstrSummary;
  // @@protoc_insertion_point(field_mutable:panda.LogEntry.tainted_instr_summary)
  return tainted_instr_summary_;
}
inline ::panda::TaintedInstrSummary* LogEntry::release_tainted_instr_summary() {
  clear_has_tainted_instr_summary();
  ::panda::TaintedInstrSummary* temp = tainted_instr_summary_;
  tainted_instr_summary_ = NULL;
  return temp;
}
inline void LogEntry::set_allocated_tainted_instr_summary(::panda::TaintedInstrSummary* tainted_instr_summary) {
  delete tainted_instr_summary_;
  tainted_instr_summary_ = tainted_instr_summary;
  if (tainted_instr_summary) {
    set_has_tainted_instr_summary();
  } else {
    clear_has_tainted_instr_summary();
  }
  // @@protoc_insertion_point(field_set_allocated:panda.LogEntry.tainted_instr_summary)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace panda

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_plog_2eproto__INCLUDED
